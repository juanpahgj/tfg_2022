
++ File:".\\tests\\COPS\\CSTRS\\1274.trs" :
TRS {trsSignature = fromList [("0",0),("cons",2),("from",1),("length",1),("length1",1),("nil",0),("s",1)], trsVariables = fromList ["X","Y"], trsRMap = [("from",[1]),("length",[]),("length1",[]),("0",[]),("cons",[1]),("nil",[]),("s",[1])], trsRules = [from(X) -> cons(X,from(s(X))),length(cons(X,Y)) -> s(length1(Y)),length(nil) -> 0,length1(X) -> length(X)], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1273.trs" :
TRS {trsSignature = fromList [("a",0),("b",0),("f",2),("g",2),("h",1)], trsVariables = fromList ["X"], trsRMap = [("a",[]),("f",[1]),("g",[1]),("h",[1]),("b",[])], trsRules = [a -> b,f(X,X) -> h(a),g(a,X) -> f(b,X),h(X) -> g(X,X)], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1272.trs" :
TRS {trsSignature = fromList [("a",0),("f",1),("g",1)], trsVariables = fromList [], trsRMap = [("f",[]),("a",[]),("g",[1])], trsRules = [f(f(a)) -> f(g(f(a)))], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1271.trs" :
TRS {trsSignature = fromList [("0",0),("add",2),("and",2),("cons",2),("false",0),("first",2),("from",1),("if",3),("nil",0),("s",1),("true",0)], trsVariables = fromList ["X","Y","Z"], trsRMap = [("add",[1]),("and",[1]),("first",[1,2]),("from",[]),("if",[1]),("0",[]),("cons",[]),("false",[]),("nil",[]),("s",[]),("true",[])], trsRules = [add(0,X) -> X,add(s(X),Y) -> s(add(X,Y)),and(false,Y) -> false,and(true,X) -> X,first(0,X) -> nil,first(s(X),cons(Y,Z)) -> cons(Y,first(X,Z)),from(X) -> cons(X,from(s(X))),if(false,X,Y) -> Y,if(true,X,Y) -> X], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1270.trs" :
TRS {trsSignature = fromList [("a",0),("b",0),("f",2)], trsVariables = fromList ["X"], trsRMap = [("b",[]),("f",[1]),("a",[])], trsRules = [b -> a,f(X,X) -> f(a,b)], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1269.trs" :
TRS {trsSignature = fromList [("a",0),("f",1),("g",1)], trsVariables = fromList [], trsRMap = [("f",[1]),("a",[]),("g",[])], trsRules = [f(f(a)) -> f(g(f(a)))], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1268.trs" :
TRS {trsSignature = fromList [("0",0),("2ndsneg",2),("2ndspos",2),("cons",2),("from",1),("negrecip",1),("pi",1),("plus",2),("posrecip",1),("rcons",2),("rnil",0),("s",1),("square",1),("times",2)], trsVariables = fromList ["N","X","Y","Z"], trsRMap = [("2ndsneg",[1,2]),("2ndspos",[1,2]),("from",[1]),("pi",[1]),("plus",[1,2]),("square",[1]),("times",[1,2]),("0",[]),("cons",[1]),("negrecip",[1]),("posrecip",[1]),("rcons",[1,2]),("rnil",[]),("s",[1])], trsRules = [2ndsneg(0,Z) -> rnil,2ndsneg(s(N),cons(X,cons(Y,Z))) -> rcons(negrecip(Y),2ndspos(N,Z)),2ndspos(0,Z) -> rnil,2ndspos(s(N),cons(X,cons(Y,Z))) -> rcons(posrecip(Y),2ndsneg(N,Z)),from(X) -> cons(X,from(s(X))),pi(X) -> 2ndspos(X,from(0)),plus(0,Y) -> Y,plus(s(X),Y) -> s(plus(X,Y)),square(X) -> times(X,X),times(0,Y) -> 0,times(s(X),Y) -> plus(Y,times(X,Y))], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1267.trs" :
TRS {trsSignature = fromList [("2nd",1),("cons",2),("from",1),("s",1)], trsVariables = fromList ["X","Y","Z"], trsRMap = [("2nd",[1]),("from",[1]),("cons",[1]),("s",[1])], trsRules = [2nd(cons(X,cons(Y,Z))) -> Y,from(X) -> cons(X,from(s(X)))], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1266.trs" :
TRS {trsSignature = fromList [("0",0),("cons",2),("eq",2),("false",0),("inf",1),("length",1),("nil",0),("s",1),("take",2),("true",0)], trsVariables = fromList ["L","X","Y"], trsRMap = [("eq",[]),("inf",[1]),("length",[1]),("take",[1,2]),("0",[]),("cons",[]),("false",[]),("nil",[]),("s",[]),("true",[])], trsRules = [eq(0,0) -> true,eq(s(X),s(Y)) -> eq(X,Y),eq(X,Y) -> false,inf(X) -> cons(X,inf(s(X))),length(cons(X,L)) -> s(length(L)),length(nil) -> 0,take(0,X) -> nil,take(s(X),cons(Y,L)) -> cons(Y,take(X,L))], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1265.trs" :
TRS {trsSignature = fromList [("0",0),("diff",2),("false",0),("if",3),("leq",2),("p",1),("s",1),("true",0)], trsVariables = fromList ["X","Y"], trsRMap = [("diff",[1,2]),("if",[1]),("leq",[1,2]),("p",[1]),("0",[]),("false",[]),("s",[1]),("true",[])], trsRules = [diff(X,Y) -> if(leq(X,Y),0,s(diff(p(X),Y))),if(false,X,Y) -> Y,if(true,X,Y) -> X,leq(0,Y) -> true,leq(s(X),0) -> false,leq(s(X),s(Y)) -> leq(X,Y),p(0) -> 0,p(s(X)) -> X], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1264.trs" :
TRS {trsSignature = fromList [("a",0),("b",0),("c",0),("f",3)], trsVariables = fromList ["X"], trsRMap = [("c",[]),("f",[3]),("a",[]),("b",[])], trsRules = [c -> a,c -> b,f(a,b,X) -> f(X,X,X)], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1263.trs" :
TRS {trsSignature = fromList [("0",0),("cons",2),("first",2),("from",1),("nil",0),("s",1),("sel",2)], trsVariables = fromList ["X","Y","Z"], trsRMap = [("first",[1,2]),("from",[1]),("sel",[1,2]),("0",[]),("cons",[1]),("nil",[]),("s",[1])], trsRules = [first(0,Z) -> nil,first(s(X),cons(Y,Z)) -> cons(Y,first(X,Z)),from(X) -> cons(X,from(s(X))),sel(0,cons(X,Z)) -> X,sel(s(X),cons(Y,Z)) -> sel(X,Z)], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1262.trs" :
TRS {trsSignature = fromList [("0",0),("cons",2),("head",1),("incr",1),("nats",0),("odds",0),("pairs",0),("s",1),("tail",1)], trsVariables = fromList ["X","XS"], trsRMap = [("head",[1]),("incr",[1]),("nats",[]),("odds",[]),("pairs",[]),("tail",[1]),("0",[]),("cons",[1]),("s",[1])], trsRules = [head(cons(X,XS)) -> X,incr(cons(X,XS)) -> cons(s(X),incr(XS)),nats -> cons(0,incr(nats)),odds -> incr(pairs),pairs -> cons(0,incr(odds)),tail(cons(X,XS)) -> XS], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1261.trs" :
TRS {trsSignature = fromList [("c",0),("d",0),("g",1),("h",1)], trsVariables = fromList ["X"], trsRMap = [("c",[]),("g",[]),("h",[]),("d",[])], trsRules = [c -> d,g(X) -> h(X),h(d) -> g(c)], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1260.trs" :
TRS {trsSignature = fromList [("a",0),("c",1),("f",1),("g",1)], trsVariables = fromList [], trsRMap = [("f",[1]),("a",[]),("c",[]),("g",[1])], trsRules = [f(f(a)) -> c(f(g(f(a))))], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1259.trs" :
TRS {trsSignature = fromList [("b",0),("c",0),("f",3),("g",1)], trsVariables = fromList ["X","Y"], trsRMap = [("b",[]),("f",[]),("g",[1]),("c",[])], trsRules = [b -> c,f(X,g(X),Y) -> f(Y,Y,Y),g(b) -> c], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1258.trs" :
TRS {trsSignature = fromList [("b",0),("c",0),("f",3)], trsVariables = fromList ["X"], trsRMap = [("c",[]),("f",[2]),("b",[])], trsRules = [c -> b,f(b,X,c) -> f(X,c,X)], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1257.trs" :
TRS {trsSignature = fromList [("c",1),("d",1),("f",1),("g",1),("h",1)], trsVariables = fromList ["X"], trsRMap = [("c",[]),("f",[1]),("h",[1]),("d",[]),("g",[])], trsRules = [c(X) -> d(X),f(f(X)) -> c(f(g(f(X)))),h(X) -> c(d(X))], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1256.trs" :
TRS {trsSignature = fromList [("0",0),("add",2),("cons",2),("dbl",1),("first",2),("nil",0),("recip",1),("s",1),("sqr",1),("terms",1)], trsVariables = fromList ["N","X","Y","Z"], trsRMap = [("add",[1,2]),("dbl",[1]),("first",[1,2]),("sqr",[1]),("terms",[1]),("0",[]),("cons",[1]),("nil",[]),("recip",[1]),("s",[])], trsRules = [add(0,X) -> X,add(s(X),Y) -> s(add(X,Y)),dbl(0) -> 0,dbl(s(X)) -> s(s(dbl(X))),first(0,X) -> nil,first(s(X),cons(Y,Z)) -> cons(Y,first(X,Z)),sqr(0) -> 0,sqr(s(X)) -> s(add(sqr(X),dbl(X))),terms(N) -> cons(recip(sqr(N)),terms(s(N)))], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1255.trs" :
TRS {trsSignature = fromList [("0",0),("add",2),("cons",2),("dbl",1),("first",2),("nil",0),("recip",1),("s",1),("sqr",1),("terms",1)], trsVariables = fromList ["N","X","Y","Z"], trsRMap = [("add",[1,2]),("dbl",[1]),("first",[1,2]),("sqr",[1]),("terms",[1]),("0",[]),("cons",[1]),("nil",[]),("recip",[1]),("s",[1])], trsRules = [add(0,X) -> X,add(s(X),Y) -> s(add(X,Y)),dbl(0) -> 0,dbl(s(X)) -> s(s(dbl(X))),first(0,X) -> nil,first(s(X),cons(Y,Z)) -> cons(Y,first(X,Z)),sqr(0) -> 0,sqr(s(X)) -> s(add(sqr(X),dbl(X))),terms(N) -> cons(recip(sqr(N)),terms(s(N)))], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1254.trs" :
TRS {trsSignature = fromList [("0",0),("add",2),("cons",2),("from",1),("fst",2),("len",1),("nil",0),("s",1)], trsVariables = fromList ["X","Y","Z"], trsRMap = [("add",[1,2]),("from",[1]),("fst",[1,2]),("len",[1]),("0",[]),("cons",[1]),("nil",[]),("s",[])], trsRules = [add(0,X) -> X,add(s(X),Y) -> s(add(X,Y)),from(X) -> cons(X,from(s(X))),fst(0,Z) -> nil,fst(s(X),cons(Y,Z)) -> cons(Y,fst(X,Z)),len(cons(X,Z)) -> s(len(Z)),len(nil) -> 0], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1253.trs" :
TRS {trsSignature = fromList [("0",0),("cons",2),("from",1),("s",1),("sel",2)], trsVariables = fromList ["X","Y","Z"], trsRMap = [("from",[1]),("sel",[1,2]),("0",[]),("cons",[1]),("s",[1])], trsRules = [from(X) -> cons(X,from(s(X))),sel(0,cons(X,Y)) -> X,sel(s(X),cons(Y,Z)) -> sel(X,Z)], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1252.trs" :
TRS {trsSignature = fromList [("0",0),("cons",2),("dbl",1),("dbls",1),("from",1),("indx",2),("nil",0),("s",1),("sel",2)], trsVariables = fromList ["X","Y","Z"], trsRMap = [("dbl",[1]),("dbls",[1]),("from",[]),("indx",[1]),("sel",[1,2]),("0",[]),("cons",[]),("nil",[]),("s",[])], trsRules = [dbl(0) -> 0,dbl(s(X)) -> s(s(dbl(X))),dbls(cons(X,Y)) -> cons(dbl(X),dbls(Y)),dbls(nil) -> nil,from(X) -> cons(X,from(s(X))),indx(cons(X,Y),Z) -> cons(sel(X,Z),indx(Y,Z)),indx(nil,X) -> nil,sel(0,cons(X,Y)) -> X,sel(s(X),cons(Y,Z)) -> sel(X,Z)], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1251.trs" :
TRS {trsSignature = fromList [("app",2),("cons",2),("from",1),("nil",0),("prefix",1),("s",1),("zWadr",2)], trsVariables = fromList ["L","X","XS","Y","YS"], trsRMap = [("app",[1,2]),("from",[1]),("prefix",[1]),("zWadr",[1,2]),("cons",[1]),("nil",[]),("s",[1])], trsRules = [app(cons(X,XS),YS) -> cons(X,app(XS,YS)),app(nil,YS) -> YS,from(X) -> cons(X,from(s(X))),prefix(L) -> cons(nil,zWadr(L,prefix(L))),zWadr(cons(X,XS),cons(Y,YS)) -> cons(app(Y,cons(X,nil)),zWadr(XS,YS)),zWadr(nil,YS) -> nil,zWadr(XS,nil) -> nil], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1250.trs" :
TRS {trsSignature = fromList [("0",0),("div",2),("false",0),("geq",2),("if",3),("minus",2),("s",1),("true",0)], trsVariables = fromList ["X","Y"], trsRMap = [("div",[1]),("geq",[]),("if",[1]),("minus",[]),("0",[]),("false",[]),("s",[1]),("true",[])], trsRules = [div(0,s(Y)) -> 0,div(s(X),s(Y)) -> if(geq(X,Y),s(div(minus(X,Y),s(Y))),0),geq(0,s(Y)) -> false,geq(s(X),s(Y)) -> geq(X,Y),geq(X,0) -> true,if(false,X,Y) -> Y,if(true,X,Y) -> X,minus(0,Y) -> 0,minus(s(X),s(Y)) -> minus(X,Y)], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1249.trs" :
TRS {trsSignature = fromList [("f",2),("g",1)], trsVariables = fromList ["X","Y"], trsRMap = [("f",[1]),("g",[1])], trsRules = [f(g(X),Y) -> f(X,f(g(X),Y))], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1248.trs" :
TRS {trsSignature = fromList [("0",0),("cons",2),("f",1),("p",1),("s",1)], trsVariables = fromList [], trsRMap = [("f",[1]),("p",[1]),("0",[]),("cons",[1]),("s",[1])], trsRules = [f(0) -> cons(0,f(s(0))),f(s(0)) -> f(p(s(0))),p(s(0)) -> 0], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1247.trs" :
TRS {trsSignature = fromList [("0",0),("cons",2),("from",1),("minus",2),("nil",0),("quot",2),("s",1),("sel",2),("zWquot",2)], trsVariables = fromList ["N","X","XS","Y","YS"], trsRMap = [("from",[1]),("minus",[1,2]),("quot",[1,2]),("sel",[1,2]),("zWquot",[1,2]),("0",[]),("cons",[1]),("nil",[]),("s",[1])], trsRules = [from(X) -> cons(X,from(s(X))),minus(s(X),s(Y)) -> minus(X,Y),minus(X,0) -> 0,quot(0,s(Y)) -> 0,quot(s(X),s(Y)) -> s(quot(minus(X,Y),s(Y))),sel(0,cons(X,XS)) -> X,sel(s(N),cons(X,XS)) -> sel(N,XS),zWquot(cons(X,XS),cons(Y,YS)) -> cons(quot(X,Y),zWquot(XS,YS)),zWquot(nil,XS) -> nil,zWquot(XS,nil) -> nil], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1246.trs" :
TRS {trsSignature = fromList [("0",0),("after",2),("cons",2),("from",1),("s",1)], trsVariables = fromList ["N","X","XS"], trsRMap = [("after",[1,2]),("from",[1]),("0",[]),("cons",[1]),("s",[1])], trsRules = [after(0,XS) -> XS,after(s(N),cons(X,XS)) -> after(N,XS),from(X) -> cons(X,from(s(X)))], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1245.trs" :
TRS {trsSignature = fromList [("0",0),("cons",2),("tail",1),("zeros",0)], trsVariables = fromList ["X","XS"], trsRMap = [("tail",[1]),("zeros",[]),("0",[]),("cons",[1])], trsRules = [tail(cons(X,XS)) -> XS,zeros -> cons(0,zeros)], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1244.trs" :
TRS {trsSignature = fromList [("0",0),("and",2),("cons",2),("isNat",1),("isNatIList",1),("isNatList",1),("length",1),("nil",0),("s",1),("take",2),("tt",0),("uLength",2),("uTake1",1),("uTake2",4),("zeros",0)], trsVariables = fromList ["IL","L","M","N","T"], trsRMap = [("and",[1,2]),("isNat",[]),("isNatIList",[]),("isNatList",[]),("length",[1]),("take",[1,2]),("uLength",[1]),("uTake1",[1]),("uTake2",[1]),("zeros",[]),("0",[]),("cons",[1]),("nil",[]),("s",[1]),("tt",[])], trsRules = [and(tt,T) -> T,isNat(length(L)) -> isNatList(L),isNat(0) -> tt,isNat(s(N)) -> isNat(N),isNatIList(zeros) -> tt,isNatIList(cons(N,IL)) -> and(isNat(N),isNatIList(IL)),isNatIList(IL) -> isNatList(IL),isNatList(take(N,IL)) -> and(isNat(N),isNatIList(IL)),isNatList(cons(N,L)) -> and(isNat(N),isNatList(L)),isNatList(nil) -> tt,length(cons(N,L)) -> uLength(and(isNat(N),isNatList(L)),L),take(0,IL) -> uTake1(isNatIList(IL)),take(s(M),cons(N,IL)) -> uTake2(and(isNat(M),and(isNat(N),isNatIList(IL))),M,N,IL),uLength(tt,L) -> s(length(L)),uTake1(tt) -> nil,uTake2(tt,M,N,IL) -> cons(N,take(M,IL)),zeros -> cons(0,zeros)], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1243.trs" :
TRS {trsSignature = fromList [("0",0),("cons",2),("f",1),("g",1),("s",1),("sel",2)], trsVariables = fromList ["X","Y","Z"], trsRMap = [("f",[1]),("g",[1]),("sel",[1,2]),("0",[]),("cons",[1]),("s",[1])], trsRules = [f(X) -> cons(X,f(g(X))),g(0) -> s(0),g(s(X)) -> s(s(g(X))),sel(0,cons(X,Y)) -> X,sel(s(X),cons(Y,Z)) -> sel(X,Z)], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1242.trs" :
TRS {trsSignature = fromList [("0",0),("01",0),("cons",2),("dbl",1),("dbl1",1),("dbls",1),("from",1),("indx",2),("nil",0),("quote",1),("s",1),("s1",1),("sel",2),("sel1",2)], trsVariables = fromList ["X","Y","Z"], trsRMap = [("dbl",[1]),("dbl1",[1]),("dbls",[1]),("from",[]),("indx",[1]),("quote",[1]),("sel",[1,2]),("sel1",[1,2]),("0",[]),("01",[]),("cons",[]),("nil",[]),("s",[]),("s1",[1])], trsRules = [dbl(0) -> 0,dbl(s(X)) -> s(s(dbl(X))),dbl1(0) -> 01,dbl1(s(X)) -> s1(s1(dbl1(X))),dbls(cons(X,Y)) -> cons(dbl(X),dbls(Y)),dbls(nil) -> nil,from(X) -> cons(X,from(s(X))),indx(cons(X,Y),Z) -> cons(sel(X,Z),indx(Y,Z)),indx(nil,X) -> nil,quote(dbl(X)) -> dbl1(X),quote(sel(X,Y)) -> sel1(X,Y),quote(0) -> 01,quote(s(X)) -> s1(quote(X)),sel(0,cons(X,Y)) -> X,sel(s(X),cons(Y,Z)) -> sel(X,Z),sel1(0,cons(X,Y)) -> X,sel1(s(X),cons(Y,Z)) -> sel1(X,Z)], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1241.trs" :
TRS {trsSignature = fromList [("0",0),("cons",2),("incr",1),("nil",0),("oddNs",0),("pair",2),("pairNs",0),("repItems",1),("s",1),("tail",1),("take",2),("zip",2)], trsVariables = fromList ["N","X","XS","Y","YS"], trsRMap = [("incr",[1]),("oddNs",[]),("pairNs",[]),("repItems",[1]),("tail",[1]),("take",[1,2]),("zip",[1,2]),("0",[]),("cons",[1]),("nil",[]),("pair",[1,2]),("s",[1])], trsRules = [incr(cons(X,XS)) -> cons(s(X),incr(XS)),oddNs -> incr(pairNs),pairNs -> cons(0,incr(oddNs)),repItems(cons(X,XS)) -> cons(X,cons(X,repItems(XS))),repItems(nil) -> nil,tail(cons(X,XS)) -> XS,take(0,XS) -> nil,take(s(N),cons(X,XS)) -> cons(X,take(N,XS)),zip(cons(X,XS),cons(Y,YS)) -> cons(pair(X,Y),zip(XS,YS)),zip(nil,XS) -> nil,zip(X,nil) -> nil], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1240.trs" :
TRS {trsSignature = fromList [("c",0),("f",1),("false",0),("if",3),("true",0)], trsVariables = fromList ["X","Y"], trsRMap = [("f",[1]),("if",[1,2]),("c",[]),("false",[]),("true",[])], trsRules = [f(X) -> if(X,c,f(true)),if(false,X,Y) -> Y,if(true,X,Y) -> X], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1239.trs" :
TRS {trsSignature = fromList [("0",0),("01",0),("cons",2),("cons1",2),("fcons",2),("first",2),("first1",2),("from",1),("nil",0),("nil1",0),("quote",1),("quote1",1),("s",1),("s1",1),("sel",2),("sel1",2),("unquote",1),("unquote1",1)], trsVariables = fromList ["X","Y","Z"], trsRMap = [("fcons",[1,2]),("first",[1,2]),("first1",[1,2]),("from",[1]),("quote",[]),("quote1",[]),("sel",[1,2]),("sel1",[1,2]),("unquote",[1]),("unquote1",[1]),("0",[]),("01",[]),("cons",[1]),("cons1",[1,2]),("nil",[]),("nil1",[]),("s",[1]),("s1",[1])], trsRules = [fcons(X,Z) -> cons(X,Z),first(0,Z) -> nil,first(s(X),cons(Y,Z)) -> cons(Y,first(X,Z)),first1(0,Z) -> nil1,first1(s(X),cons(Y,Z)) -> cons1(quote(Y),first1(X,Z)),from(X) -> cons(X,from(s(X))),quote(sel(X,Z)) -> sel1(X,Z),quote(0) -> 01,quote(s(X)) -> s1(quote(X)),quote1(first(X,Z)) -> first1(X,Z),quote1(cons(X,Z)) -> cons1(quote(X),quote1(Z)),quote1(nil) -> nil1,sel(0,cons(X,Z)) -> X,sel(s(X),cons(Y,Z)) -> sel(X,Z),sel1(0,cons(X,Z)) -> quote(X),sel1(s(X),cons(Y,Z)) -> sel1(X,Z),unquote(01) -> 0,unquote(s1(X)) -> s(unquote(X)),unquote1(cons1(X,Z)) -> fcons(unquote(X),unquote1(Z)),unquote1(nil1) -> nil], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1238.trs" :
TRS {trsSignature = fromList [("2nd",1),("cons",2),("cons1",2),("from",1),("s",1)], trsVariables = fromList ["X","X1","Y","Z"], trsRMap = [("2nd",[1]),("from",[1]),("cons",[1]),("cons1",[1,2]),("s",[1])], trsRules = [2nd(cons(X,X1)) -> 2nd(cons1(X,X1)),2nd(cons1(X,cons(Y,Z))) -> Y,from(X) -> cons(X,from(s(X)))], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1237.trs" :
TRS {trsSignature = fromList [("c",0),("f",1),("g",1)], trsVariables = fromList ["X"], trsRMap = [("c",[]),("f",[]),("g",[])], trsRules = [c -> f(g(c)),f(g(X)) -> g(X)], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1236.trs" :
TRS {trsSignature = fromList [("0",0),("cons",2),("first",2),("from",1),("nil",0),("s",1)], trsVariables = fromList ["X","Y","Z"], trsRMap = [("first",[1,2]),("from",[1]),("0",[]),("cons",[1]),("nil",[]),("s",[1])], trsRules = [first(0,X) -> nil,first(s(X),cons(Y,Z)) -> cons(Y,first(X,Z)),from(X) -> cons(X,from(s(X)))], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1235.trs" :
TRS {trsSignature = fromList [("0",0),("2nd",1),("cons",2),("from",1),("head",1),("nil",0),("s",1),("sel",2),("take",2)], trsVariables = fromList ["N","X","XS"], trsRMap = [("2nd",[1]),("from",[1]),("head",[1]),("sel",[1,2]),("take",[1,2]),("0",[]),("cons",[1]),("nil",[]),("s",[1])], trsRules = [2nd(cons(X,XS)) -> head(XS),from(X) -> cons(X,from(s(X))),head(cons(X,XS)) -> X,sel(0,cons(X,XS)) -> X,sel(s(N),cons(X,XS)) -> sel(N,XS),take(0,XS) -> nil,take(s(N),cons(X,XS)) -> cons(X,take(N,XS))], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1234.trs" :
TRS {trsSignature = fromList [("0",0),("add",2),("cons",2),("fib",1),("fib1",2),("s",1),("sel",2)], trsVariables = fromList ["N","X","XS","Y"], trsRMap = [("add",[1,2]),("fib",[1]),("fib1",[1,2]),("sel",[1,2]),("0",[]),("cons",[1]),("s",[1])], trsRules = [add(0,X) -> X,add(s(X),Y) -> s(add(X,Y)),fib(N) -> sel(N,fib1(s(0),s(0))),fib1(X,Y) -> cons(X,fib1(Y,add(X,Y))),sel(0,cons(X,XS)) -> X,sel(s(N),cons(X,XS)) -> sel(N,XS)], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1233.trs" :
TRS {trsSignature = fromList [("0",0),("cons",2),("filter",3),("nats",1),("s",1),("sieve",1),("zprimes",0)], trsVariables = fromList ["M","N","X","Y"], trsRMap = [("filter",[1,2,3]),("nats",[1]),("sieve",[1]),("zprimes",[]),("0",[]),("cons",[1]),("s",[1])], trsRules = [filter(cons(X,Y),0,M) -> cons(0,filter(Y,M,M)),filter(cons(X,Y),s(N),M) -> cons(X,filter(Y,N,M)),nats(N) -> cons(N,nats(s(N))),sieve(cons(0,Y)) -> cons(0,sieve(Y)),sieve(cons(s(N),Y)) -> cons(s(N),sieve(filter(Y,N,N))),zprimes -> sieve(nats(s(s(0))))], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1232.trs" :
TRS {trsSignature = fromList [("a",0),("b",0),("c",0),("f",3)], trsVariables = fromList ["X"], trsRMap = [("c",[]),("f",[1,3]),("a",[]),("b",[])], trsRules = [c -> a,c -> b,f(a,b,X) -> f(X,X,X)], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1231.trs" :
TRS {trsSignature = fromList [("a",0),("b",0),("f",3)], trsVariables = fromList ["X"], trsRMap = [("b",[]),("f",[2]),("a",[])], trsRules = [b -> a,f(a,X,X) -> f(X,b,b)], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1230.trs" :
TRS {trsSignature = fromList [("0",0),("2ndsneg",2),("2ndspos",2),("cons",2),("cons2",2),("from",1),("negrecip",1),("pi",1),("plus",2),("posrecip",1),("rcons",2),("rnil",0),("s",1),("square",1),("times",2)], trsVariables = fromList ["N","X","Y","Z"], trsRMap = [("2ndsneg",[1,2]),("2ndspos",[1,2]),("from",[1]),("pi",[1]),("plus",[1,2]),("square",[1]),("times",[1,2]),("0",[]),("cons",[1]),("cons2",[2]),("negrecip",[1]),("posrecip",[1]),("rcons",[1,2]),("rnil",[]),("s",[1])], trsRules = [2ndsneg(0,Z) -> rnil,2ndsneg(s(N),cons(X,Z)) -> 2ndsneg(s(N),cons2(X,Z)),2ndsneg(s(N),cons2(X,cons(Y,Z))) -> rcons(negrecip(Y),2ndspos(N,Z)),2ndspos(0,Z) -> rnil,2ndspos(s(N),cons(X,Z)) -> 2ndspos(s(N),cons2(X,Z)),2ndspos(s(N),cons2(X,cons(Y,Z))) -> rcons(posrecip(Y),2ndsneg(N,Z)),from(X) -> cons(X,from(s(X))),pi(X) -> 2ndspos(X,from(0)),plus(0,Y) -> Y,plus(s(X),Y) -> s(plus(X,Y)),square(X) -> times(X,X),times(0,Y) -> 0,times(s(X),Y) -> plus(Y,times(X,Y))], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1229.trs" :
TRS {trsSignature = fromList [("f",1),("g",1),("h",1)], trsVariables = fromList ["X"], trsRMap = [("f",[1]),("g",[]),("h",[1])], trsRules = [f(X) -> g(h(f(X)))], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1228.trs" :
TRS {trsSignature = fromList [("0",0),("adx",1),("cons",2),("head",1),("incr",1),("nats",0),("nil",0),("s",1),("tail",1),("zeros",0)], trsVariables = fromList ["L","X"], trsRMap = [("adx",[1]),("head",[1]),("incr",[1]),("nats",[]),("tail",[1]),("zeros",[]),("0",[]),("cons",[1]),("nil",[]),("s",[1])], trsRules = [adx(cons(X,L)) -> incr(cons(X,adx(L))),adx(nil) -> nil,head(cons(X,L)) -> X,incr(cons(X,L)) -> cons(s(X),incr(L)),incr(nil) -> nil,nats -> adx(zeros),tail(cons(X,L)) -> L,zeros -> cons(0,zeros)], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1227.trs" :
TRS {trsSignature = fromList [("0",0),("adx",1),("cons",2),("hd",1),("incr",1),("nats",0),("s",1),("tl",1),("zeros",0)], trsVariables = fromList ["X","Y"], trsRMap = [("adx",[1]),("hd",[1]),("incr",[1]),("nats",[]),("tl",[1]),("zeros",[]),("0",[]),("cons",[]),("s",[])], trsRules = [adx(cons(X,Y)) -> incr(cons(X,adx(Y))),hd(cons(X,Y)) -> X,incr(cons(X,Y)) -> cons(s(X),incr(Y)),nats -> adx(zeros),tl(cons(X,Y)) -> Y,zeros -> cons(0,zeros)], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1226.trs" :
TRS {trsSignature = fromList [("0",0),("cons",2),("divides",2),("false",0),("filter",2),("from",1),("head",1),("if",3),("primes",0),("s",1),("sieve",1),("tail",1),("true",0)], trsVariables = fromList ["X","Y","Z"], trsRMap = [("filter",[1,2]),("from",[1]),("head",[1]),("if",[1]),("primes",[]),("sieve",[1]),("tail",[1]),("0",[]),("cons",[1]),("divides",[1,2]),("false",[]),("s",[1]),("true",[])], trsRules = [filter(s(s(X)),cons(Y,Z)) -> if(divides(s(s(X)),Y),filter(s(s(X)),Z),cons(Y,filter(X,sieve(Y)))),from(X) -> cons(X,from(s(X))),head(cons(X,Y)) -> X,if(false,X,Y) -> Y,if(true,X,Y) -> X,primes -> sieve(from(s(s(0)))),sieve(cons(X,Y)) -> cons(X,filter(X,sieve(Y))),tail(cons(X,Y)) -> Y], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1225.trs" :
TRS {trsSignature = fromList [("0",0),("add",2),("fact",1),("false",0),("if",3),("p",1),("prod",2),("s",1),("true",0),("zero",1)], trsVariables = fromList ["X","Y"], trsRMap = [("add",[1,2]),("fact",[1]),("if",[1]),("p",[1]),("prod",[1,2]),("zero",[1]),("0",[]),("false",[]),("s",[1]),("true",[])], trsRules = [add(0,X) -> X,add(s(X),Y) -> s(add(X,Y)),fact(X) -> if(zero(X),s(0),prod(X,fact(p(X)))),if(false,X,Y) -> Y,if(true,X,Y) -> X,p(s(X)) -> X,prod(0,X) -> 0,prod(s(X),Y) -> add(Y,prod(X,Y)),zero(0) -> true,zero(s(X)) -> false], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1224.trs" :
TRS {trsSignature = fromList [("0",0),("cons",2),("f",1),("p",1),("s",1)], trsVariables = fromList ["X"], trsRMap = [("f",[1]),("p",[1]),("0",[]),("cons",[1]),("s",[1])], trsRules = [f(0) -> cons(0,f(s(0))),f(s(0)) -> f(p(s(0))),p(s(X)) -> X], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1223.trs" :
TRS {trsSignature = fromList [("0",0),("add",2),("cons",2),("dbl",1),("first",2),("half",1),("nil",0),("recip",1),("s",1),("sqr",1),("terms",1)], trsVariables = fromList ["N","X","Y","Z"], trsRMap = [("add",[1,2]),("dbl",[1]),("first",[1,2]),("half",[1]),("sqr",[1]),("terms",[1]),("0",[]),("cons",[1]),("nil",[]),("recip",[1]),("s",[1])], trsRules = [add(0,X) -> X,add(s(X),Y) -> s(add(X,Y)),dbl(0) -> 0,dbl(s(X)) -> s(s(dbl(X))),first(0,X) -> nil,first(s(X),cons(Y,Z)) -> cons(Y,first(X,Z)),half(dbl(X)) -> X,half(0) -> 0,half(s(0)) -> 0,half(s(s(X))) -> s(half(X)),sqr(0) -> 0,sqr(s(X)) -> s(add(sqr(X),dbl(X))),terms(N) -> cons(recip(sqr(N)),terms(s(N)))], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1222.trs" :
TRS {trsSignature = fromList [("0",0),("afterNth",2),("cons",2),("fst",1),("head",1),("natsFrom",1),("nil",0),("pair",2),("s",1),("sel",2),("snd",1),("splitAt",2),("tail",1),("take",2),("u",4)], trsVariables = fromList ["N","X","XS","YS","ZS"], trsRMap = [("afterNth",[1,2]),("fst",[1]),("head",[1]),("natsFrom",[1]),("sel",[1,2]),("snd",[1]),("splitAt",[1,2]),("tail",[1]),("take",[1,2]),("u",[1]),("0",[]),("cons",[1]),("nil",[]),("pair",[1,2]),("s",[1])], trsRules = [afterNth(N,XS) -> snd(splitAt(N,XS)),fst(pair(XS,YS)) -> XS,head(cons(N,XS)) -> N,natsFrom(N) -> cons(N,natsFrom(s(N))),sel(N,XS) -> head(afterNth(N,XS)),snd(pair(XS,YS)) -> YS,splitAt(0,XS) -> pair(nil,XS),splitAt(s(N),cons(X,XS)) -> u(splitAt(N,XS),N,X,XS),tail(cons(N,XS)) -> XS,take(N,XS) -> fst(splitAt(N,XS)),u(pair(YS,ZS),N,X,XS) -> pair(cons(X,YS),ZS)], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1221.trs" :
TRS {trsSignature = fromList [("0",0),("U101",3),("U102",3),("U103",3),("U104",3),("U105",2),("U106",1),("U11",3),("U111",2),("U112",1),("U12",3),("U121",2),("U122",1),("U13",3),("U131",1),("U14",3),("U141",1),("U151",1),("U161",1),("U171",2),("U172",1),("U181",2),("U182",2),("U183",1),("U191",2),("U192",2),("U193",1),("U201",3),("U202",3),("U203",3),("U204",3),("U205",2),("U206",1),("U21",3),("U211",1),("U22",3),("U221",1),("U23",3),("U231",2),("U232",1),("U24",2),("U241",3),("U242",3),("U243",3),("U244",3),("U245",2),("U246",1),("U251",3),("U252",3),("U253",3),("U254",3),("U255",2),("U256",1),("U261",2),("U262",1),("U271",2),("U272",1),("U281",2),("U282",2),("U291",3),("U292",3),("U293",3),("U294",3),("U301",3),("U302",2),("U303",2),("U304",2),("U31",3),("U311",2),("U312",2),("U32",3),("U321",4),("U322",4),("U323",4),("U324",4),("U325",4),("U326",4),("U327",2),("U33",3),("U331",3),("U332",2),("U333",2),("U334",2),("U34",2),("U341",3),("U342",3),("U343",3),("U344",3),("U41",3),("U42",3),("U43",3),("U44",3),("U45",2),("U46",1),("U51",3),("U52",3),("U53",3),("U54",3),("U55",2),("U56",1),("U61",2),("U62",2),("U63",1),("U71",2),("U72",2),("U73",1),("U81",2),("U82",2),("U83",1),("U91",2),("U92",2),("U93",1),("afterNth",2),("cons",2),("fst",1),("head",1),("isLNat",1),("isLNatKind",1),("isNatural",1),("isNaturalKind",1),("isPLNat",1),("isPLNatKind",1),("natsFrom",1),("nil",0),("pair",2),("s",1),("sel",2),("snd",1),("splitAt",2),("tail",1),("take",2),("tt",0)], trsVariables = fromList ["N","V1","V2","X","XS","Y","YS","ZS"], trsRMap = [("U101",[1]),("U102",[1]),("U103",[1]),("U104",[1]),("U105",[1]),("U106",[1]),("U11",[1]),("U111",[1]),("U112",[1]),("U12",[1]),("U121",[1]),("U122",[1]),("U13",[1]),("U131",[1]),("U14",[1]),("U141",[1]),("U151",[1]),("U161",[1]),("U171",[1]),("U172",[1]),("U181",[1]),("U182",[1]),("U183",[1]),("U191",[1]),("U192",[1]),("U193",[1]),("U201",[1]),("U202",[1]),("U203",[1]),("U204",[1]),("U205",[1]),("U206",[1]),("U21",[1]),("U211",[1]),("U22",[1]),("U221",[1]),("U23",[1]),("U231",[1]),("U232",[1]),("U24",[1]),("U241",[1]),("U242",[1]),("U243",[1]),("U244",[1]),("U245",[1]),("U246",[1]),("U251",[1]),("U252",[1]),("U253",[1]),("U254",[1]),("U255",[1]),("U256",[1]),("U261",[1]),("U262",[1]),("U271",[1]),("U272",[1]),("U281",[1]),("U282",[1]),("U291",[1]),("U292",[1]),("U293",[1]),("U294",[1]),("U301",[1]),("U302",[1]),("U303",[1]),("U304",[1]),("U31",[1]),("U311",[1]),("U312",[1]),("U32",[1]),("U321",[1]),("U322",[1]),("U323",[1]),("U324",[1]),("U325",[1]),("U326",[1]),("U327",[1]),("U33",[1]),("U331",[1]),("U332",[1]),("U333",[1]),("U334",[1]),("U34",[1]),("U341",[1]),("U342",[1]),("U343",[1]),("U344",[1]),("U41",[1]),("U42",[1]),("U43",[1]),("U44",[1]),("U45",[1]),("U46",[1]),("U51",[1]),("U52",[1]),("U53",[1]),("U54",[1]),("U55",[1]),("U56",[1]),("U61",[1]),("U62",[1]),("U63",[1]),("U71",[1]),("U72",[1]),("U73",[1]),("U81",[1]),("U82",[1]),("U83",[1]),("U91",[1]),("U92",[1]),("U93",[1]),("afterNth",[1,2]),("fst",[1]),("head",[1]),("isLNat",[]),("isLNatKind",[]),("isNatural",[]),("isNaturalKind",[]),("isPLNat",[]),("isPLNatKind",[]),("natsFrom",[1]),("sel",[1,2]),("snd",[1]),("splitAt",[1,2]),("tail",[1]),("take",[1,2]),("0",[]),("cons",[1]),("nil",[]),("pair",[1,2]),("s",[1]),("tt",[])], trsRules = [U101(tt,V1,V2) -> U102(isNaturalKind(V1),V1,V2),U102(tt,V1,V2) -> U103(isLNatKind(V2),V1,V2),U103(tt,V1,V2) -> U104(isLNatKind(V2),V1,V2),U104(tt,V1,V2) -> U105(isNatural(V1),V2),U105(tt,V2) -> U106(isLNat(V2)),U106(tt) -> tt,U11(tt,N,XS) -> U12(isNaturalKind(N),N,XS),U111(tt,V2) -> U112(isLNatKind(V2)),U112(tt) -> tt,U12(tt,N,XS) -> U13(isLNat(XS),N,XS),U121(tt,V2) -> U122(isLNatKind(V2)),U122(tt) -> tt,U13(tt,N,XS) -> U14(isLNatKind(XS),N,XS),U131(tt) -> tt,U14(tt,N,XS) -> snd(splitAt(N,XS)),U141(tt) -> tt,U151(tt) -> tt,U161(tt) -> tt,U171(tt,V2) -> U172(isLNatKind(V2)),U172(tt) -> tt,U181(tt,V1) -> U182(isLNatKind(V1),V1),U182(tt,V1) -> U183(isLNat(V1)),U183(tt) -> tt,U191(tt,V1) -> U192(isNaturalKind(V1),V1),U192(tt,V1) -> U193(isNatural(V1)),U193(tt) -> tt,U201(tt,V1,V2) -> U202(isNaturalKind(V1),V1,V2),U202(tt,V1,V2) -> U203(isLNatKind(V2),V1,V2),U203(tt,V1,V2) -> U204(isLNatKind(V2),V1,V2),U204(tt,V1,V2) -> U205(isNatural(V1),V2),U205(tt,V2) -> U206(isLNat(V2)),U206(tt) -> tt,U21(tt,X,Y) -> U22(isLNatKind(X),X,Y),U211(tt) -> tt,U22(tt,X,Y) -> U23(isLNat(Y),X,Y),U221(tt) -> tt,U23(tt,X,Y) -> U24(isLNatKind(Y),X),U231(tt,V2) -> U232(isLNatKind(V2)),U232(tt) -> tt,U24(tt,X) -> X,U241(tt,V1,V2) -> U242(isLNatKind(V1),V1,V2),U242(tt,V1,V2) -> U243(isLNatKind(V2),V1,V2),U243(tt,V1,V2) -> U244(isLNatKind(V2),V1,V2),U244(tt,V1,V2) -> U245(isLNat(V1),V2),U245(tt,V2) -> U246(isLNat(V2)),U246(tt) -> tt,U251(tt,V1,V2) -> U252(isNaturalKind(V1),V1,V2),U252(tt,V1,V2) -> U253(isLNatKind(V2),V1,V2),U253(tt,V1,V2) -> U254(isLNatKind(V2),V1,V2),U254(tt,V1,V2) -> U255(isNatural(V1),V2),U255(tt,V2) -> U256(isLNat(V2)),U256(tt) -> tt,U261(tt,V2) -> U262(isLNatKind(V2)),U262(tt) -> tt,U271(tt,V2) -> U272(isLNatKind(V2)),U272(tt) -> tt,U281(tt,N) -> U282(isNaturalKind(N),N),U282(tt,N) -> cons(N,natsFrom(s(N))),U291(tt,N,XS) -> U292(isNaturalKind(N),N,XS),U292(tt,N,XS) -> U293(isLNat(XS),N,XS),U293(tt,N,XS) -> U294(isLNatKind(XS),N,XS),U294(tt,N,XS) -> head(afterNth(N,XS)),U301(tt,X,Y) -> U302(isLNatKind(X),Y),U302(tt,Y) -> U303(isLNat(Y),Y),U303(tt,Y) -> U304(isLNatKind(Y),Y),U304(tt,Y) -> Y,U31(tt,N,XS) -> U32(isNaturalKind(N),N,XS),U311(tt,XS) -> U312(isLNatKind(XS),XS),U312(tt,XS) -> pair(nil,XS),U32(tt,N,XS) -> U33(isLNat(XS),N,XS),U321(tt,N,X,XS) -> U322(isNaturalKind(N),N,X,XS),U322(tt,N,X,XS) -> U323(isNatural(X),N,X,XS),U323(tt,N,X,XS) -> U324(isNaturalKind(X),N,X,XS),U324(tt,N,X,XS) -> U325(isLNat(XS),N,X,XS),U325(tt,N,X,XS) -> U326(isLNatKind(XS),N,X,XS),U326(tt,N,X,XS) -> U327(splitAt(N,XS),X),U327(pair(YS,ZS),X) -> pair(cons(X,YS),ZS),U33(tt,N,XS) -> U34(isLNatKind(XS),N),U331(tt,N,XS) -> U332(isNaturalKind(N),XS),U332(tt,XS) -> U333(isLNat(XS),XS),U333(tt,XS) -> U334(isLNatKind(XS),XS),U334(tt,XS) -> XS,U34(tt,N) -> N,U341(tt,N,XS) -> U342(isNaturalKind(N),N,XS),U342(tt,N,XS) -> U343(isLNat(XS),N,XS),U343(tt,N,XS) -> U344(isLNatKind(XS),N,XS),U344(tt,N,XS) -> fst(splitAt(N,XS)),U41(tt,V1,V2) -> U42(isNaturalKind(V1),V1,V2),U42(tt,V1,V2) -> U43(isLNatKind(V2),V1,V2),U43(tt,V1,V2) -> U44(isLNatKind(V2),V1,V2),U44(tt,V1,V2) -> U45(isNatural(V1),V2),U45(tt,V2) -> U46(isLNat(V2)),U46(tt) -> tt,U51(tt,V1,V2) -> U52(isNaturalKind(V1),V1,V2),U52(tt,V1,V2) -> U53(isLNatKind(V2),V1,V2),U53(tt,V1,V2) -> U54(isLNatKind(V2),V1,V2),U54(tt,V1,V2) -> U55(isNatural(V1),V2),U55(tt,V2) -> U56(isLNat(V2)),U56(tt) -> tt,U61(tt,V1) -> U62(isPLNatKind(V1),V1),U62(tt,V1) -> U63(isPLNat(V1)),U63(tt) -> tt,U71(tt,V1) -> U72(isNaturalKind(V1),V1),U72(tt,V1) -> U73(isNatural(V1)),U73(tt) -> tt,U81(tt,V1) -> U82(isPLNatKind(V1),V1),U82(tt,V1) -> U83(isPLNat(V1)),U83(tt) -> tt,U91(tt,V1) -> U92(isLNatKind(V1),V1),U92(tt,V1) -> U93(isLNat(V1)),U93(tt) -> tt,afterNth(N,XS) -> U11(isNatural(N),N,XS),fst(pair(X,Y)) -> U21(isLNat(X),X,Y),head(cons(N,XS)) -> U31(isNatural(N),N,XS),isLNat(afterNth(V1,V2)) -> U41(isNaturalKind(V1),V1,V2),isLNat(fst(V1)) -> U61(isPLNatKind(V1),V1),isLNat(natsFrom(V1)) -> U71(isNaturalKind(V1),V1),isLNat(snd(V1)) -> U81(isPLNatKind(V1),V1),isLNat(tail(V1)) -> U91(isLNatKind(V1),V1),isLNat(take(V1,V2)) -> U101(isNaturalKind(V1),V1,V2),isLNat(cons(V1,V2)) -> U51(isNaturalKind(V1),V1,V2),isLNat(nil) -> tt,isLNatKind(afterNth(V1,V2)) -> U111(isNaturalKind(V1),V2),isLNatKind(fst(V1)) -> U131(isPLNatKind(V1)),isLNatKind(natsFrom(V1)) -> U141(isNaturalKind(V1)),isLNatKind(snd(V1)) -> U151(isPLNatKind(V1)),isLNatKind(tail(V1)) -> U161(isLNatKind(V1)),isLNatKind(take(V1,V2)) -> U171(isNaturalKind(V1),V2),isLNatKind(cons(V1,V2)) -> U121(isNaturalKind(V1),V2),isLNatKind(nil) -> tt,isNatural(head(V1)) -> U181(isLNatKind(V1),V1),isNatural(sel(V1,V2)) -> U201(isNaturalKind(V1),V1,V2),isNatural(0) -> tt,isNatural(s(V1)) -> U191(isNaturalKind(V1),V1),isNaturalKind(head(V1)) -> U211(isLNatKind(V1)),isNaturalKind(sel(V1,V2)) -> U231(isNaturalKind(V1),V2),isNaturalKind(0) -> tt,isNaturalKind(s(V1)) -> U221(isNaturalKind(V1)),isPLNat(splitAt(V1,V2)) -> U251(isNaturalKind(V1),V1,V2),isPLNat(pair(V1,V2)) -> U241(isLNatKind(V1),V1,V2),isPLNatKind(splitAt(V1,V2)) -> U271(isNaturalKind(V1),V2),isPLNatKind(pair(V1,V2)) -> U261(isLNatKind(V1),V2),natsFrom(N) -> U281(isNatural(N),N),sel(N,XS) -> U291(isNatural(N),N,XS),snd(pair(X,Y)) -> U301(isLNat(X),X,Y),splitAt(0,XS) -> U311(isLNat(XS),XS),splitAt(s(N),cons(X,XS)) -> U321(isNatural(N),N,X,XS),tail(cons(N,XS)) -> U331(isNatural(N),N,XS),take(N,XS) -> U341(isNatural(N),N,XS)], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1220.trs" :
TRS {trsSignature = fromList [("0",0),("U101",3),("U102",2),("U103",1),("U11",3),("U111",2),("U112",1),("U121",2),("U122",1),("U131",3),("U132",2),("U133",1),("U141",3),("U142",2),("U143",1),("U151",3),("U152",2),("U153",1),("U161",2),("U171",3),("U181",2),("U191",2),("U201",4),("U202",2),("U21",2),("U211",2),("U221",3),("U31",2),("U41",3),("U42",2),("U43",1),("U51",3),("U52",2),("U53",1),("U61",2),("U62",1),("U71",2),("U72",1),("U81",2),("U82",1),("U91",2),("U92",1),("afterNth",2),("and",2),("cons",2),("fst",1),("head",1),("isLNat",1),("isLNatKind",1),("isNatural",1),("isNaturalKind",1),("isPLNat",1),("isPLNatKind",1),("natsFrom",1),("nil",0),("pair",2),("s",1),("sel",2),("snd",1),("splitAt",2),("tail",1),("take",2),("tt",0)], trsVariables = fromList ["N","V1","V2","X","XS","Y","YS","ZS"], trsRMap = [("U101",[1]),("U102",[1]),("U103",[1]),("U11",[1]),("U111",[1]),("U112",[1]),("U121",[1]),("U122",[1]),("U131",[1]),("U132",[1]),("U133",[1]),("U141",[1]),("U142",[1]),("U143",[1]),("U151",[1]),("U152",[1]),("U153",[1]),("U161",[1]),("U171",[1]),("U181",[1]),("U191",[1]),("U201",[1]),("U202",[1]),("U21",[1]),("U211",[1]),("U221",[1]),("U31",[1]),("U41",[1]),("U42",[1]),("U43",[1]),("U51",[1]),("U52",[1]),("U53",[1]),("U61",[1]),("U62",[1]),("U71",[1]),("U72",[1]),("U81",[1]),("U82",[1]),("U91",[1]),("U92",[1]),("afterNth",[1,2]),("and",[1]),("fst",[1]),("head",[1]),("isLNat",[]),("isLNatKind",[]),("isNatural",[]),("isNaturalKind",[]),("isPLNat",[]),("isPLNatKind",[]),("natsFrom",[1]),("sel",[1,2]),("snd",[1]),("splitAt",[1,2]),("tail",[1]),("take",[1,2]),("0",[]),("cons",[1]),("nil",[]),("pair",[1,2]),("s",[1]),("tt",[])], trsRules = [U101(tt,V1,V2) -> U102(isNatural(V1),V2),U102(tt,V2) -> U103(isLNat(V2)),U103(tt) -> tt,U11(tt,N,XS) -> snd(splitAt(N,XS)),U111(tt,V1) -> U112(isLNat(V1)),U112(tt) -> tt,U121(tt,V1) -> U122(isNatural(V1)),U122(tt) -> tt,U131(tt,V1,V2) -> U132(isNatural(V1),V2),U132(tt,V2) -> U133(isLNat(V2)),U133(tt) -> tt,U141(tt,V1,V2) -> U142(isLNat(V1),V2),U142(tt,V2) -> U143(isLNat(V2)),U143(tt) -> tt,U151(tt,V1,V2) -> U152(isNatural(V1),V2),U152(tt,V2) -> U153(isLNat(V2)),U153(tt) -> tt,U161(tt,N) -> cons(N,natsFrom(s(N))),U171(tt,N,XS) -> head(afterNth(N,XS)),U181(tt,Y) -> Y,U191(tt,XS) -> pair(nil,XS),U201(tt,N,X,XS) -> U202(splitAt(N,XS),X),U202(pair(YS,ZS),X) -> pair(cons(X,YS),ZS),U21(tt,X) -> X,U211(tt,XS) -> XS,U221(tt,N,XS) -> fst(splitAt(N,XS)),U31(tt,N) -> N,U41(tt,V1,V2) -> U42(isNatural(V1),V2),U42(tt,V2) -> U43(isLNat(V2)),U43(tt) -> tt,U51(tt,V1,V2) -> U52(isNatural(V1),V2),U52(tt,V2) -> U53(isLNat(V2)),U53(tt) -> tt,U61(tt,V1) -> U62(isPLNat(V1)),U62(tt) -> tt,U71(tt,V1) -> U72(isNatural(V1)),U72(tt) -> tt,U81(tt,V1) -> U82(isPLNat(V1)),U82(tt) -> tt,U91(tt,V1) -> U92(isLNat(V1)),U92(tt) -> tt,afterNth(N,XS) -> U11(and(and(isNatural(N),isNaturalKind(N)),and(isLNat(XS),isLNatKind(XS))),N,XS),and(tt,X) -> X,fst(pair(X,Y)) -> U21(and(and(isLNat(X),isLNatKind(X)),and(isLNat(Y),isLNatKind(Y))),X),head(cons(N,XS)) -> U31(and(and(isNatural(N),isNaturalKind(N)),and(isLNat(XS),isLNatKind(XS))),N),isLNat(afterNth(V1,V2)) -> U41(and(isNaturalKind(V1),isLNatKind(V2)),V1,V2),isLNat(fst(V1)) -> U61(isPLNatKind(V1),V1),isLNat(natsFrom(V1)) -> U71(isNaturalKind(V1),V1),isLNat(snd(V1)) -> U81(isPLNatKind(V1),V1),isLNat(tail(V1)) -> U91(isLNatKind(V1),V1),isLNat(take(V1,V2)) -> U101(and(isNaturalKind(V1),isLNatKind(V2)),V1,V2),isLNat(cons(V1,V2)) -> U51(and(isNaturalKind(V1),isLNatKind(V2)),V1,V2),isLNat(nil) -> tt,isLNatKind(afterNth(V1,V2)) -> and(isNaturalKind(V1),isLNatKind(V2)),isLNatKind(fst(V1)) -> isPLNatKind(V1),isLNatKind(natsFrom(V1)) -> isNaturalKind(V1),isLNatKind(snd(V1)) -> isPLNatKind(V1),isLNatKind(tail(V1)) -> isLNatKind(V1),isLNatKind(take(V1,V2)) -> and(isNaturalKind(V1),isLNatKind(V2)),isLNatKind(cons(V1,V2)) -> and(isNaturalKind(V1),isLNatKind(V2)),isLNatKind(nil) -> tt,isNatural(head(V1)) -> U111(isLNatKind(V1),V1),isNatural(sel(V1,V2)) -> U131(and(isNaturalKind(V1),isLNatKind(V2)),V1,V2),isNatural(0) -> tt,isNatural(s(V1)) -> U121(isNaturalKind(V1),V1),isNaturalKind(head(V1)) -> isLNatKind(V1),isNaturalKind(sel(V1,V2)) -> and(isNaturalKind(V1),isLNatKind(V2)),isNaturalKind(0) -> tt,isNaturalKind(s(V1)) -> isNaturalKind(V1),isPLNat(splitAt(V1,V2)) -> U151(and(isNaturalKind(V1),isLNatKind(V2)),V1,V2),isPLNat(pair(V1,V2)) -> U141(and(isLNatKind(V1),isLNatKind(V2)),V1,V2),isPLNatKind(splitAt(V1,V2)) -> and(isNaturalKind(V1),isLNatKind(V2)),isPLNatKind(pair(V1,V2)) -> and(isLNatKind(V1),isLNatKind(V2)),natsFrom(N) -> U161(and(isNatural(N),isNaturalKind(N)),N),sel(N,XS) -> U171(and(and(isNatural(N),isNaturalKind(N)),and(isLNat(XS),isLNatKind(XS))),N,XS),snd(pair(X,Y)) -> U181(and(and(isLNat(X),isLNatKind(X)),and(isLNat(Y),isLNatKind(Y))),Y),splitAt(0,XS) -> U191(and(isLNat(XS),isLNatKind(XS)),XS),splitAt(s(N),cons(X,XS)) -> U201(and(and(isNatural(N),isNaturalKind(N)),and(and(isNatural(X),isNaturalKind(X)),and(isLNat(XS),isLNatKind(XS)))),N,X,XS),tail(cons(N,XS)) -> U211(and(and(isNatural(N),isNaturalKind(N)),and(isLNat(XS),isLNatKind(XS))),XS),take(N,XS) -> U221(and(and(isNatural(N),isNaturalKind(N)),and(isLNat(XS),isLNatKind(XS))),N,XS)], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1219.trs" :
TRS {trsSignature = fromList [("0",0),("U101",2),("U102",1),("U11",3),("U111",1),("U12",3),("U121",1),("U131",2),("U132",1),("U141",2),("U142",1),("U151",2),("U152",1),("U161",2),("U171",3),("U172",3),("U181",2),("U182",2),("U191",2),("U201",4),("U202",4),("U203",4),("U204",2),("U21",3),("U211",2),("U212",2),("U22",2),("U221",3),("U222",3),("U31",3),("U32",2),("U41",2),("U42",1),("U51",2),("U52",1),("U61",1),("U71",1),("U81",1),("U91",1),("afterNth",2),("cons",2),("fst",1),("head",1),("isLNat",1),("isNatural",1),("isPLNat",1),("natsFrom",1),("nil",0),("pair",2),("s",1),("sel",2),("snd",1),("splitAt",2),("tail",1),("take",2),("tt",0)], trsVariables = fromList ["N","V1","V2","X","XS","Y","YS","ZS"], trsRMap = [("U101",[1]),("U102",[1]),("U11",[1]),("U111",[1]),("U12",[1]),("U121",[1]),("U131",[1]),("U132",[1]),("U141",[1]),("U142",[1]),("U151",[1]),("U152",[1]),("U161",[1]),("U171",[1]),("U172",[1]),("U181",[1]),("U182",[1]),("U191",[1]),("U201",[1]),("U202",[1]),("U203",[1]),("U204",[1]),("U21",[1]),("U211",[1]),("U212",[1]),("U22",[1]),("U221",[1]),("U222",[1]),("U31",[1]),("U32",[1]),("U41",[1]),("U42",[1]),("U51",[1]),("U52",[1]),("U61",[1]),("U71",[1]),("U81",[1]),("U91",[1]),("afterNth",[1,2]),("fst",[1]),("head",[1]),("isLNat",[]),("isNatural",[]),("isPLNat",[]),("natsFrom",[1]),("sel",[1,2]),("snd",[1]),("splitAt",[1,2]),("tail",[1]),("take",[1,2]),("0",[]),("cons",[1]),("nil",[]),("pair",[1,2]),("s",[1]),("tt",[])], trsRules = [U101(tt,V2) -> U102(isLNat(V2)),U102(tt) -> tt,U11(tt,N,XS) -> U12(isLNat(XS),N,XS),U111(tt) -> tt,U12(tt,N,XS) -> snd(splitAt(N,XS)),U121(tt) -> tt,U131(tt,V2) -> U132(isLNat(V2)),U132(tt) -> tt,U141(tt,V2) -> U142(isLNat(V2)),U142(tt) -> tt,U151(tt,V2) -> U152(isLNat(V2)),U152(tt) -> tt,U161(tt,N) -> cons(N,natsFrom(s(N))),U171(tt,N,XS) -> U172(isLNat(XS),N,XS),U172(tt,N,XS) -> head(afterNth(N,XS)),U181(tt,Y) -> U182(isLNat(Y),Y),U182(tt,Y) -> Y,U191(tt,XS) -> pair(nil,XS),U201(tt,N,X,XS) -> U202(isNatural(X),N,X,XS),U202(tt,N,X,XS) -> U203(isLNat(XS),N,X,XS),U203(tt,N,X,XS) -> U204(splitAt(N,XS),X),U204(pair(YS,ZS),X) -> pair(cons(X,YS),ZS),U21(tt,X,Y) -> U22(isLNat(Y),X),U211(tt,XS) -> U212(isLNat(XS),XS),U212(tt,XS) -> XS,U22(tt,X) -> X,U221(tt,N,XS) -> U222(isLNat(XS),N,XS),U222(tt,N,XS) -> fst(splitAt(N,XS)),U31(tt,N,XS) -> U32(isLNat(XS),N),U32(tt,N) -> N,U41(tt,V2) -> U42(isLNat(V2)),U42(tt) -> tt,U51(tt,V2) -> U52(isLNat(V2)),U52(tt) -> tt,U61(tt) -> tt,U71(tt) -> tt,U81(tt) -> tt,U91(tt) -> tt,afterNth(N,XS) -> U11(isNatural(N),N,XS),fst(pair(X,Y)) -> U21(isLNat(X),X,Y),head(cons(N,XS)) -> U31(isNatural(N),N,XS),isLNat(afterNth(V1,V2)) -> U41(isNatural(V1),V2),isLNat(fst(V1)) -> U61(isPLNat(V1)),isLNat(natsFrom(V1)) -> U71(isNatural(V1)),isLNat(snd(V1)) -> U81(isPLNat(V1)),isLNat(tail(V1)) -> U91(isLNat(V1)),isLNat(take(V1,V2)) -> U101(isNatural(V1),V2),isLNat(cons(V1,V2)) -> U51(isNatural(V1),V2),isLNat(nil) -> tt,isNatural(head(V1)) -> U111(isLNat(V1)),isNatural(sel(V1,V2)) -> U131(isNatural(V1),V2),isNatural(0) -> tt,isNatural(s(V1)) -> U121(isNatural(V1)),isPLNat(splitAt(V1,V2)) -> U151(isNatural(V1),V2),isPLNat(pair(V1,V2)) -> U141(isLNat(V1),V2),natsFrom(N) -> U161(isNatural(N),N),sel(N,XS) -> U171(isNatural(N),N,XS),snd(pair(X,Y)) -> U181(isLNat(X),Y),splitAt(0,XS) -> U191(isLNat(XS),XS),splitAt(s(N),cons(X,XS)) -> U201(isNatural(N),N,X,XS),tail(cons(N,XS)) -> U211(isNatural(N),XS),take(N,XS) -> U221(isNatural(N),N,XS)], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1218.trs" :
TRS {trsSignature = fromList [("0",0),("U101",3),("U11",3),("U21",2),("U31",2),("U41",2),("U51",3),("U61",2),("U71",2),("U81",4),("U82",2),("U91",2),("afterNth",2),("and",2),("cons",2),("fst",1),("head",1),("isLNat",1),("isNatural",1),("isPLNat",1),("natsFrom",1),("nil",0),("pair",2),("s",1),("sel",2),("snd",1),("splitAt",2),("tail",1),("take",2),("tt",0)], trsVariables = fromList ["N","V1","V2","X","XS","Y","YS","ZS"], trsRMap = [("U101",[1]),("U11",[1]),("U21",[1]),("U31",[1]),("U41",[1]),("U51",[1]),("U61",[1]),("U71",[1]),("U81",[1]),("U82",[1]),("U91",[1]),("afterNth",[1,2]),("and",[1]),("fst",[1]),("head",[1]),("isLNat",[]),("isNatural",[]),("isPLNat",[]),("natsFrom",[1]),("sel",[1,2]),("snd",[1]),("splitAt",[1,2]),("tail",[1]),("take",[1,2]),("0",[]),("cons",[1]),("nil",[]),("pair",[1,2]),("s",[1]),("tt",[])], trsRules = [U101(tt,N,XS) -> fst(splitAt(N,XS)),U11(tt,N,XS) -> snd(splitAt(N,XS)),U21(tt,X) -> X,U31(tt,N) -> N,U41(tt,N) -> cons(N,natsFrom(s(N))),U51(tt,N,XS) -> head(afterNth(N,XS)),U61(tt,Y) -> Y,U71(tt,XS) -> pair(nil,XS),U81(tt,N,X,XS) -> U82(splitAt(N,XS),X),U82(pair(YS,ZS),X) -> pair(cons(X,YS),ZS),U91(tt,XS) -> XS,afterNth(N,XS) -> U11(and(isNatural(N),isLNat(XS)),N,XS),and(tt,X) -> X,fst(pair(X,Y)) -> U21(and(isLNat(X),isLNat(Y)),X),head(cons(N,XS)) -> U31(and(isNatural(N),isLNat(XS)),N),isLNat(afterNth(V1,V2)) -> and(isNatural(V1),isLNat(V2)),isLNat(fst(V1)) -> isPLNat(V1),isLNat(natsFrom(V1)) -> isNatural(V1),isLNat(snd(V1)) -> isPLNat(V1),isLNat(tail(V1)) -> isLNat(V1),isLNat(take(V1,V2)) -> and(isNatural(V1),isLNat(V2)),isLNat(cons(V1,V2)) -> and(isNatural(V1),isLNat(V2)),isLNat(nil) -> tt,isNatural(head(V1)) -> isLNat(V1),isNatural(sel(V1,V2)) -> and(isNatural(V1),isLNat(V2)),isNatural(0) -> tt,isNatural(s(V1)) -> isNatural(V1),isPLNat(splitAt(V1,V2)) -> and(isNatural(V1),isLNat(V2)),isPLNat(pair(V1,V2)) -> and(isLNat(V1),isLNat(V2)),natsFrom(N) -> U41(isNatural(N),N),sel(N,XS) -> U51(and(isNatural(N),isLNat(XS)),N,XS),snd(pair(X,Y)) -> U61(and(isLNat(X),isLNat(Y)),Y),splitAt(0,XS) -> U71(isLNat(XS),XS),splitAt(s(N),cons(X,XS)) -> U81(and(isNatural(N),and(isNatural(X),isLNat(XS))),N,X,XS),tail(cons(N,XS)) -> U91(and(isNatural(N),isLNat(XS)),XS),take(N,XS) -> U101(and(isNatural(N),isLNat(XS)),N,XS)], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1217.trs" :
TRS {trsSignature = fromList [("0",0),("U11",3),("U12",3),("U21",2),("U22",2),("U31",2),("U32",2),("U41",3),("U42",3),("U51",2),("U52",2),("U61",4),("U62",4),("U63",4),("U64",2),("U71",2),("U72",2),("U81",3),("U82",3),("afterNth",2),("cons",2),("fst",1),("head",1),("natsFrom",1),("nil",0),("pair",2),("s",1),("sel",2),("snd",1),("splitAt",2),("tail",1),("take",2),("tt",0)], trsVariables = fromList ["N","X","XS","Y","YS","ZS"], trsRMap = [("U11",[1]),("U12",[1]),("U21",[1]),("U22",[1]),("U31",[1]),("U32",[1]),("U41",[1]),("U42",[1]),("U51",[1]),("U52",[1]),("U61",[1]),("U62",[1]),("U63",[1]),("U64",[1]),("U71",[1]),("U72",[1]),("U81",[1]),("U82",[1]),("afterNth",[1,2]),("fst",[1]),("head",[1]),("natsFrom",[1]),("sel",[1,2]),("snd",[1]),("splitAt",[1,2]),("tail",[1]),("take",[1,2]),("0",[]),("cons",[1]),("nil",[]),("pair",[1,2]),("s",[1]),("tt",[])], trsRules = [U11(tt,N,XS) -> U12(tt,N,XS),U12(tt,N,XS) -> snd(splitAt(N,XS)),U21(tt,X) -> U22(tt,X),U22(tt,X) -> X,U31(tt,N) -> U32(tt,N),U32(tt,N) -> N,U41(tt,N,XS) -> U42(tt,N,XS),U42(tt,N,XS) -> head(afterNth(N,XS)),U51(tt,Y) -> U52(tt,Y),U52(tt,Y) -> Y,U61(tt,N,X,XS) -> U62(tt,N,X,XS),U62(tt,N,X,XS) -> U63(tt,N,X,XS),U63(tt,N,X,XS) -> U64(splitAt(N,XS),X),U64(pair(YS,ZS),X) -> pair(cons(X,YS),ZS),U71(tt,XS) -> U72(tt,XS),U72(tt,XS) -> XS,U81(tt,N,XS) -> U82(tt,N,XS),U82(tt,N,XS) -> fst(splitAt(N,XS)),afterNth(N,XS) -> U11(tt,N,XS),fst(pair(X,Y)) -> U21(tt,X),head(cons(N,XS)) -> U31(tt,N),natsFrom(N) -> cons(N,natsFrom(s(N))),sel(N,XS) -> U41(tt,N,XS),snd(pair(X,Y)) -> U51(tt,Y),splitAt(0,XS) -> pair(nil,XS),splitAt(s(N),cons(X,XS)) -> U61(tt,N,X,XS),tail(cons(N,XS)) -> U71(tt,XS),take(N,XS) -> U81(tt,N,XS)], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1216.trs" :
TRS {trsSignature = fromList [("0",0),("U11",4),("U12",2),("afterNth",2),("and",2),("cons",2),("fst",1),("head",1),("natsFrom",1),("nil",0),("pair",2),("s",1),("sel",2),("snd",1),("splitAt",2),("tail",1),("take",2),("tt",0)], trsVariables = fromList ["N","X","XS","Y","YS","ZS"], trsRMap = [("U11",[1]),("U12",[1]),("afterNth",[1,2]),("and",[1]),("fst",[1]),("head",[1]),("natsFrom",[1]),("sel",[1,2]),("snd",[1]),("splitAt",[1,2]),("tail",[1]),("take",[1,2]),("0",[]),("cons",[1]),("nil",[]),("pair",[1,2]),("s",[1]),("tt",[])], trsRules = [U11(tt,N,X,XS) -> U12(splitAt(N,XS),X),U12(pair(YS,ZS),X) -> pair(cons(X,YS),ZS),afterNth(N,XS) -> snd(splitAt(N,XS)),and(tt,X) -> X,fst(pair(X,Y)) -> X,head(cons(N,XS)) -> N,natsFrom(N) -> cons(N,natsFrom(s(N))),sel(N,XS) -> head(afterNth(N,XS)),snd(pair(X,Y)) -> Y,splitAt(0,XS) -> pair(nil,XS),splitAt(s(N),cons(X,XS)) -> U11(tt,N,X,XS),tail(cons(N,XS)) -> XS,take(N,XS) -> fst(splitAt(N,XS))], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1215.trs" :
TRS {trsSignature = fromList [("0",0),("U11",2),("U12",2),("U13",1),("U21",2),("U22",2),("U23",1),("U31",2),("U32",2),("U33",1),("U41",3),("U42",3),("U43",3),("U44",3),("U45",2),("U46",1),("U51",2),("U52",1),("U61",1),("U71",1),("U81",3),("U82",3),("U83",3),("U84",3),("U85",2),("U86",1),("U91",3),("U92",3),("U93",3),("U94",2),("cons",2),("isNat",1),("isNatIList",1),("isNatIListKind",1),("isNatKind",1),("isNatList",1),("length",1),("nil",0),("s",1),("tt",0),("zeros",0)], trsVariables = fromList ["L","N","V","V1","V2"], trsRMap = [("U11",[1]),("U12",[1]),("U13",[1]),("U21",[1]),("U22",[1]),("U23",[1]),("U31",[1]),("U32",[1]),("U33",[1]),("U41",[1]),("U42",[1]),("U43",[1]),("U44",[1]),("U45",[1]),("U46",[1]),("U51",[1]),("U52",[1]),("U61",[1]),("U71",[1]),("U81",[1]),("U82",[1]),("U83",[1]),("U84",[1]),("U85",[1]),("U86",[1]),("U91",[1]),("U92",[1]),("U93",[1]),("U94",[1]),("isNat",[]),("isNatIList",[]),("isNatIListKind",[]),("isNatKind",[]),("isNatList",[]),("length",[1]),("zeros",[]),("0",[]),("cons",[1]),("nil",[]),("s",[1]),("tt",[])], trsRules = [U11(tt,V1) -> U12(isNatIListKind(V1),V1),U12(tt,V1) -> U13(isNatList(V1)),U13(tt) -> tt,U21(tt,V1) -> U22(isNatKind(V1),V1),U22(tt,V1) -> U23(isNat(V1)),U23(tt) -> tt,U31(tt,V) -> U32(isNatIListKind(V),V),U32(tt,V) -> U33(isNatList(V)),U33(tt) -> tt,U41(tt,V1,V2) -> U42(isNatKind(V1),V1,V2),U42(tt,V1,V2) -> U43(isNatIListKind(V2),V1,V2),U43(tt,V1,V2) -> U44(isNatIListKind(V2),V1,V2),U44(tt,V1,V2) -> U45(isNat(V1),V2),U45(tt,V2) -> U46(isNatIList(V2)),U46(tt) -> tt,U51(tt,V2) -> U52(isNatIListKind(V2)),U52(tt) -> tt,U61(tt) -> tt,U71(tt) -> tt,U81(tt,V1,V2) -> U82(isNatKind(V1),V1,V2),U82(tt,V1,V2) -> U83(isNatIListKind(V2),V1,V2),U83(tt,V1,V2) -> U84(isNatIListKind(V2),V1,V2),U84(tt,V1,V2) -> U85(isNat(V1),V2),U85(tt,V2) -> U86(isNatList(V2)),U86(tt) -> tt,U91(tt,L,N) -> U92(isNatIListKind(L),L,N),U92(tt,L,N) -> U93(isNat(N),L,N),U93(tt,L,N) -> U94(isNatKind(N),L),U94(tt,L) -> s(length(L)),isNat(length(V1)) -> U11(isNatIListKind(V1),V1),isNat(0) -> tt,isNat(s(V1)) -> U21(isNatKind(V1),V1),isNatIList(zeros) -> tt,isNatIList(cons(V1,V2)) -> U41(isNatKind(V1),V1,V2),isNatIList(V) -> U31(isNatIListKind(V),V),isNatIListKind(zeros) -> tt,isNatIListKind(cons(V1,V2)) -> U51(isNatKind(V1),V2),isNatIListKind(nil) -> tt,isNatKind(length(V1)) -> U61(isNatIListKind(V1)),isNatKind(0) -> tt,isNatKind(s(V1)) -> U71(isNatKind(V1)),isNatList(cons(V1,V2)) -> U81(isNatKind(V1),V1,V2),isNatList(nil) -> tt,length(cons(N,L)) -> U91(isNatList(L),L,N),length(nil) -> 0,zeros -> cons(0,zeros)], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1214.trs" :
TRS {trsSignature = fromList [("0",0),("U11",2),("U12",1),("U21",2),("U22",1),("U31",2),("U32",1),("U41",3),("U42",2),("U43",1),("U51",3),("U52",2),("U53",1),("U61",2),("and",2),("cons",2),("isNat",1),("isNatIList",1),("isNatIListKind",1),("isNatKind",1),("isNatList",1),("length",1),("nil",0),("s",1),("tt",0),("zeros",0)], trsVariables = fromList ["L","N","V","V1","V2","X"], trsRMap = [("U11",[1]),("U12",[1]),("U21",[1]),("U22",[1]),("U31",[1]),("U32",[1]),("U41",[1]),("U42",[1]),("U43",[1]),("U51",[1]),("U52",[1]),("U53",[1]),("U61",[1]),("and",[1]),("isNat",[]),("isNatIList",[]),("isNatIListKind",[]),("isNatKind",[]),("isNatList",[]),("length",[1]),("zeros",[]),("0",[]),("cons",[1]),("nil",[]),("s",[1]),("tt",[])], trsRules = [U11(tt,V1) -> U12(isNatList(V1)),U12(tt) -> tt,U21(tt,V1) -> U22(isNat(V1)),U22(tt) -> tt,U31(tt,V) -> U32(isNatList(V)),U32(tt) -> tt,U41(tt,V1,V2) -> U42(isNat(V1),V2),U42(tt,V2) -> U43(isNatIList(V2)),U43(tt) -> tt,U51(tt,V1,V2) -> U52(isNat(V1),V2),U52(tt,V2) -> U53(isNatList(V2)),U53(tt) -> tt,U61(tt,L) -> s(length(L)),and(tt,X) -> X,isNat(length(V1)) -> U11(isNatIListKind(V1),V1),isNat(0) -> tt,isNat(s(V1)) -> U21(isNatKind(V1),V1),isNatIList(zeros) -> tt,isNatIList(cons(V1,V2)) -> U41(and(isNatKind(V1),isNatIListKind(V2)),V1,V2),isNatIList(V) -> U31(isNatIListKind(V),V),isNatIListKind(zeros) -> tt,isNatIListKind(cons(V1,V2)) -> and(isNatKind(V1),isNatIListKind(V2)),isNatIListKind(nil) -> tt,isNatKind(length(V1)) -> isNatIListKind(V1),isNatKind(0) -> tt,isNatKind(s(V1)) -> isNatKind(V1),isNatList(cons(V1,V2)) -> U51(and(isNatKind(V1),isNatIListKind(V2)),V1,V2),isNatList(nil) -> tt,length(cons(N,L)) -> U61(and(and(isNatList(L),isNatIListKind(L)),and(isNat(N),isNatKind(N))),L),length(nil) -> 0,zeros -> cons(0,zeros)], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1213.trs" :
TRS {trsSignature = fromList [("0",0),("U11",1),("U21",1),("U31",1),("U41",2),("U42",1),("U51",2),("U52",1),("U61",3),("U62",2),("cons",2),("isNat",1),("isNatIList",1),("isNatList",1),("length",1),("nil",0),("s",1),("tt",0),("zeros",0)], trsVariables = fromList ["L","N","V","V1","V2"], trsRMap = [("U11",[1]),("U21",[1]),("U31",[1]),("U41",[1]),("U42",[1]),("U51",[1]),("U52",[1]),("U61",[1]),("U62",[1]),("isNat",[]),("isNatIList",[]),("isNatList",[]),("length",[1]),("zeros",[]),("0",[]),("cons",[1]),("nil",[]),("s",[1]),("tt",[])], trsRules = [U11(tt) -> tt,U21(tt) -> tt,U31(tt) -> tt,U41(tt,V2) -> U42(isNatIList(V2)),U42(tt) -> tt,U51(tt,V2) -> U52(isNatList(V2)),U52(tt) -> tt,U61(tt,L,N) -> U62(isNat(N),L),U62(tt,L) -> s(length(L)),isNat(length(V1)) -> U11(isNatList(V1)),isNat(0) -> tt,isNat(s(V1)) -> U21(isNat(V1)),isNatIList(zeros) -> tt,isNatIList(cons(V1,V2)) -> U41(isNat(V1),V2),isNatIList(V) -> U31(isNatList(V)),isNatList(cons(V1,V2)) -> U51(isNat(V1),V2),isNatList(nil) -> tt,length(cons(N,L)) -> U61(isNatList(L),L,N),length(nil) -> 0,zeros -> cons(0,zeros)], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1212.trs" :
TRS {trsSignature = fromList [("0",0),("U11",2),("and",2),("cons",2),("isNat",1),("isNatIList",1),("isNatList",1),("length",1),("nil",0),("s",1),("tt",0),("zeros",0)], trsVariables = fromList ["L","N","V","V1","V2","X"], trsRMap = [("U11",[1]),("and",[1]),("isNat",[]),("isNatIList",[]),("isNatList",[]),("length",[1]),("zeros",[]),("0",[]),("cons",[1]),("nil",[]),("s",[1]),("tt",[])], trsRules = [U11(tt,L) -> s(length(L)),and(tt,X) -> X,isNat(length(V1)) -> isNatList(V1),isNat(0) -> tt,isNat(s(V1)) -> isNat(V1),isNatIList(zeros) -> tt,isNatIList(cons(V1,V2)) -> and(isNat(V1),isNatIList(V2)),isNatIList(V) -> isNatList(V),isNatList(cons(V1,V2)) -> and(isNat(V1),isNatList(V2)),isNatList(nil) -> tt,length(cons(N,L)) -> U11(and(isNatList(L),isNat(N)),L),length(nil) -> 0,zeros -> cons(0,zeros)], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1211.trs" :
TRS {trsSignature = fromList [("0",0),("U11",2),("U12",2),("cons",2),("length",1),("nil",0),("s",1),("tt",0),("zeros",0)], trsVariables = fromList ["L","N"], trsRMap = [("U11",[1]),("U12",[1]),("length",[1]),("zeros",[]),("0",[]),("cons",[1]),("nil",[]),("s",[1]),("tt",[])], trsRules = [U11(tt,L) -> U12(tt,L),U12(tt,L) -> s(length(L)),length(cons(N,L)) -> U11(tt,L),length(nil) -> 0,zeros -> cons(0,zeros)], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1210.trs" :
TRS {trsSignature = fromList [("0",0),("and",2),("cons",2),("length",1),("nil",0),("s",1),("tt",0),("zeros",0)], trsVariables = fromList ["L","N","X"], trsRMap = [("and",[1]),("length",[1]),("zeros",[]),("0",[]),("cons",[1]),("nil",[]),("s",[1]),("tt",[])], trsRules = [and(tt,X) -> X,length(cons(N,L)) -> s(length(L)),length(nil) -> 0,zeros -> cons(0,zeros)], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1209.trs" :
TRS {trsSignature = fromList [("0",0),("U11",3),("U12",3),("U13",3),("U14",3),("U15",2),("U16",1),("U21",2),("U22",2),("U23",1),("U31",2),("U32",1),("U41",1),("U51",2),("U52",2),("U61",3),("U62",3),("U63",3),("U64",3),("isNat",1),("isNatKind",1),("plus",2),("s",1),("tt",0)], trsVariables = fromList ["M","N","V1","V2"], trsRMap = [("U11",[1]),("U12",[1]),("U13",[1]),("U14",[1]),("U15",[1]),("U16",[1]),("U21",[1]),("U22",[1]),("U23",[1]),("U31",[1]),("U32",[1]),("U41",[1]),("U51",[1]),("U52",[1]),("U61",[1]),("U62",[1]),("U63",[1]),("U64",[1]),("isNat",[]),("isNatKind",[]),("plus",[1,2]),("0",[]),("s",[1]),("tt",[])], trsRules = [U11(tt,V1,V2) -> U12(isNatKind(V1),V1,V2),U12(tt,V1,V2) -> U13(isNatKind(V2),V1,V2),U13(tt,V1,V2) -> U14(isNatKind(V2),V1,V2),U14(tt,V1,V2) -> U15(isNat(V1),V2),U15(tt,V2) -> U16(isNat(V2)),U16(tt) -> tt,U21(tt,V1) -> U22(isNatKind(V1),V1),U22(tt,V1) -> U23(isNat(V1)),U23(tt) -> tt,U31(tt,V2) -> U32(isNatKind(V2)),U32(tt) -> tt,U41(tt) -> tt,U51(tt,N) -> U52(isNatKind(N),N),U52(tt,N) -> N,U61(tt,M,N) -> U62(isNatKind(M),M,N),U62(tt,M,N) -> U63(isNat(N),M,N),U63(tt,M,N) -> U64(isNatKind(N),M,N),U64(tt,M,N) -> s(plus(N,M)),isNat(plus(V1,V2)) -> U11(isNatKind(V1),V1,V2),isNat(0) -> tt,isNat(s(V1)) -> U21(isNatKind(V1),V1),isNatKind(plus(V1,V2)) -> U31(isNatKind(V1),V2),isNatKind(0) -> tt,isNatKind(s(V1)) -> U41(isNatKind(V1)),plus(N,0) -> U51(isNat(N),N),plus(N,s(M)) -> U61(isNat(M),M,N)], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1208.trs" :
TRS {trsSignature = fromList [("0",0),("U101",3),("U102",3),("U103",3),("U104",3),("U11",3),("U12",3),("U13",3),("U14",3),("U15",2),("U16",1),("U21",2),("U22",2),("U23",1),("U31",3),("U32",3),("U33",3),("U34",3),("U35",2),("U36",1),("U41",2),("U42",1),("U51",1),("U61",2),("U62",1),("U71",2),("U72",2),("U81",3),("U82",3),("U83",3),("U84",3),("U91",2),("U92",1),("isNat",1),("isNatKind",1),("plus",2),("s",1),("tt",0),("x",2)], trsVariables = fromList ["M","N","V1","V2"], trsRMap = [("U101",[1]),("U102",[1]),("U103",[1]),("U104",[1]),("U11",[1]),("U12",[1]),("U13",[1]),("U14",[1]),("U15",[1]),("U16",[1]),("U21",[1]),("U22",[1]),("U23",[1]),("U31",[1]),("U32",[1]),("U33",[1]),("U34",[1]),("U35",[1]),("U36",[1]),("U41",[1]),("U42",[1]),("U51",[1]),("U61",[1]),("U62",[1]),("U71",[1]),("U72",[1]),("U81",[1]),("U82",[1]),("U83",[1]),("U84",[1]),("U91",[1]),("U92",[1]),("isNat",[]),("isNatKind",[]),("plus",[1,2]),("x",[1,2]),("0",[]),("s",[1]),("tt",[])], trsRules = [U101(tt,M,N) -> U102(isNatKind(M),M,N),U102(tt,M,N) -> U103(isNat(N),M,N),U103(tt,M,N) -> U104(isNatKind(N),M,N),U104(tt,M,N) -> plus(x(N,M),N),U11(tt,V1,V2) -> U12(isNatKind(V1),V1,V2),U12(tt,V1,V2) -> U13(isNatKind(V2),V1,V2),U13(tt,V1,V2) -> U14(isNatKind(V2),V1,V2),U14(tt,V1,V2) -> U15(isNat(V1),V2),U15(tt,V2) -> U16(isNat(V2)),U16(tt) -> tt,U21(tt,V1) -> U22(isNatKind(V1),V1),U22(tt,V1) -> U23(isNat(V1)),U23(tt) -> tt,U31(tt,V1,V2) -> U32(isNatKind(V1),V1,V2),U32(tt,V1,V2) -> U33(isNatKind(V2),V1,V2),U33(tt,V1,V2) -> U34(isNatKind(V2),V1,V2),U34(tt,V1,V2) -> U35(isNat(V1),V2),U35(tt,V2) -> U36(isNat(V2)),U36(tt) -> tt,U41(tt,V2) -> U42(isNatKind(V2)),U42(tt) -> tt,U51(tt) -> tt,U61(tt,V2) -> U62(isNatKind(V2)),U62(tt) -> tt,U71(tt,N) -> U72(isNatKind(N),N),U72(tt,N) -> N,U81(tt,M,N) -> U82(isNatKind(M),M,N),U82(tt,M,N) -> U83(isNat(N),M,N),U83(tt,M,N) -> U84(isNatKind(N),M,N),U84(tt,M,N) -> s(plus(N,M)),U91(tt,N) -> U92(isNatKind(N)),U92(tt) -> 0,isNat(plus(V1,V2)) -> U11(isNatKind(V1),V1,V2),isNat(x(V1,V2)) -> U31(isNatKind(V1),V1,V2),isNat(0) -> tt,isNat(s(V1)) -> U21(isNatKind(V1),V1),isNatKind(plus(V1,V2)) -> U41(isNatKind(V1),V2),isNatKind(x(V1,V2)) -> U61(isNatKind(V1),V2),isNatKind(0) -> tt,isNatKind(s(V1)) -> U51(isNatKind(V1)),plus(N,0) -> U71(isNat(N),N),plus(N,s(M)) -> U81(isNat(M),M,N),x(N,0) -> U91(isNat(N),N),x(N,s(M)) -> U101(isNat(M),M,N)], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1207.trs" :
TRS {trsSignature = fromList [("0",0),("U11",3),("U12",2),("U13",1),("U21",2),("U22",1),("U31",2),("U41",3),("and",2),("isNat",1),("isNatKind",1),("plus",2),("s",1),("tt",0)], trsVariables = fromList ["M","N","V1","V2","X"], trsRMap = [("U11",[1]),("U12",[1]),("U13",[1]),("U21",[1]),("U22",[1]),("U31",[1]),("U41",[1]),("and",[1]),("isNat",[]),("isNatKind",[]),("plus",[1,2]),("0",[]),("s",[1]),("tt",[])], trsRules = [U11(tt,V1,V2) -> U12(isNat(V1),V2),U12(tt,V2) -> U13(isNat(V2)),U13(tt) -> tt,U21(tt,V1) -> U22(isNat(V1)),U22(tt) -> tt,U31(tt,N) -> N,U41(tt,M,N) -> s(plus(N,M)),and(tt,X) -> X,isNat(plus(V1,V2)) -> U11(and(isNatKind(V1),isNatKind(V2)),V1,V2),isNat(0) -> tt,isNat(s(V1)) -> U21(isNatKind(V1),V1),isNatKind(plus(V1,V2)) -> and(isNatKind(V1),isNatKind(V2)),isNatKind(0) -> tt,isNatKind(s(V1)) -> isNatKind(V1),plus(N,0) -> U31(and(isNat(N),isNatKind(N)),N),plus(N,s(M)) -> U41(and(and(isNat(M),isNatKind(M)),and(isNat(N),isNatKind(N))),M,N)], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1206.trs" :
TRS {trsSignature = fromList [("0",0),("U11",3),("U12",2),("U13",1),("U21",2),("U22",1),("U31",3),("U32",2),("U33",1),("U41",2),("U51",3),("U61",1),("U71",3),("and",2),("isNat",1),("isNatKind",1),("plus",2),("s",1),("tt",0),("x",2)], trsVariables = fromList ["M","N","V1","V2","X"], trsRMap = [("U11",[1]),("U12",[1]),("U13",[1]),("U21",[1]),("U22",[1]),("U31",[1]),("U32",[1]),("U33",[1]),("U41",[1]),("U51",[1]),("U61",[1]),("U71",[1]),("and",[1]),("isNat",[]),("isNatKind",[]),("plus",[1,2]),("x",[1,2]),("0",[]),("s",[1]),("tt",[])], trsRules = [U11(tt,V1,V2) -> U12(isNat(V1),V2),U12(tt,V2) -> U13(isNat(V2)),U13(tt) -> tt,U21(tt,V1) -> U22(isNat(V1)),U22(tt) -> tt,U31(tt,V1,V2) -> U32(isNat(V1),V2),U32(tt,V2) -> U33(isNat(V2)),U33(tt) -> tt,U41(tt,N) -> N,U51(tt,M,N) -> s(plus(N,M)),U61(tt) -> 0,U71(tt,M,N) -> plus(x(N,M),N),and(tt,X) -> X,isNat(plus(V1,V2)) -> U11(and(isNatKind(V1),isNatKind(V2)),V1,V2),isNat(x(V1,V2)) -> U31(and(isNatKind(V1),isNatKind(V2)),V1,V2),isNat(0) -> tt,isNat(s(V1)) -> U21(isNatKind(V1),V1),isNatKind(plus(V1,V2)) -> and(isNatKind(V1),isNatKind(V2)),isNatKind(x(V1,V2)) -> and(isNatKind(V1),isNatKind(V2)),isNatKind(0) -> tt,isNatKind(s(V1)) -> isNatKind(V1),plus(N,0) -> U41(and(isNat(N),isNatKind(N)),N),plus(N,s(M)) -> U51(and(and(isNat(M),isNatKind(M)),and(isNat(N),isNatKind(N))),M,N),x(N,0) -> U61(and(isNat(N),isNatKind(N))),x(N,s(M)) -> U71(and(and(isNat(M),isNatKind(M)),and(isNat(N),isNatKind(N))),M,N)], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1205.trs" :
TRS {trsSignature = fromList [("0",0),("U11",2),("U12",1),("U21",1),("U31",2),("U41",3),("U42",3),("isNat",1),("plus",2),("s",1),("tt",0)], trsVariables = fromList ["M","N","V1","V2"], trsRMap = [("U11",[1]),("U12",[1]),("U21",[1]),("U31",[1]),("U41",[1]),("U42",[1]),("isNat",[]),("plus",[1,2]),("0",[]),("s",[1]),("tt",[])], trsRules = [U11(tt,V2) -> U12(isNat(V2)),U12(tt) -> tt,U21(tt) -> tt,U31(tt,N) -> N,U41(tt,M,N) -> U42(isNat(N),M,N),U42(tt,M,N) -> s(plus(N,M)),isNat(plus(V1,V2)) -> U11(isNat(V1),V2),isNat(0) -> tt,isNat(s(V1)) -> U21(isNat(V1)),plus(N,0) -> U31(isNat(N),N),plus(N,s(M)) -> U41(isNat(M),M,N)], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1204.trs" :
TRS {trsSignature = fromList [("0",0),("U11",2),("U12",1),("U21",1),("U31",2),("U32",1),("U41",2),("U51",3),("U52",3),("U61",1),("U71",3),("U72",3),("isNat",1),("plus",2),("s",1),("tt",0),("x",2)], trsVariables = fromList ["M","N","V1","V2"], trsRMap = [("U11",[1]),("U12",[1]),("U21",[1]),("U31",[1]),("U32",[1]),("U41",[1]),("U51",[1]),("U52",[1]),("U61",[1]),("U71",[1]),("U72",[1]),("isNat",[]),("plus",[1,2]),("x",[1,2]),("0",[]),("s",[1]),("tt",[])], trsRules = [U11(tt,V2) -> U12(isNat(V2)),U12(tt) -> tt,U21(tt) -> tt,U31(tt,V2) -> U32(isNat(V2)),U32(tt) -> tt,U41(tt,N) -> N,U51(tt,M,N) -> U52(isNat(N),M,N),U52(tt,M,N) -> s(plus(N,M)),U61(tt) -> 0,U71(tt,M,N) -> U72(isNat(N),M,N),U72(tt,M,N) -> plus(x(N,M),N),isNat(plus(V1,V2)) -> U11(isNat(V1),V2),isNat(x(V1,V2)) -> U31(isNat(V1),V2),isNat(0) -> tt,isNat(s(V1)) -> U21(isNat(V1)),plus(N,0) -> U41(isNat(N),N),plus(N,s(M)) -> U51(isNat(M),M,N),x(N,0) -> U61(isNat(N)),x(N,s(M)) -> U71(isNat(M),M,N)], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1203.trs" :
TRS {trsSignature = fromList [("0",0),("U11",2),("U21",3),("and",2),("isNat",1),("plus",2),("s",1),("tt",0)], trsVariables = fromList ["M","N","V1","V2","X"], trsRMap = [("U11",[1]),("U21",[1]),("and",[1]),("isNat",[]),("plus",[1,2]),("0",[]),("s",[1]),("tt",[])], trsRules = [U11(tt,N) -> N,U21(tt,M,N) -> s(plus(N,M)),and(tt,X) -> X,isNat(plus(V1,V2)) -> and(isNat(V1),isNat(V2)),isNat(0) -> tt,isNat(s(V1)) -> isNat(V1),plus(N,0) -> U11(isNat(N),N),plus(N,s(M)) -> U21(and(isNat(M),isNat(N)),M,N)], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1202.trs" :
TRS {trsSignature = fromList [("0",0),("U11",2),("U21",3),("U31",1),("U41",3),("and",2),("isNat",1),("plus",2),("s",1),("tt",0),("x",2)], trsVariables = fromList ["M","N","V1","V2","X"], trsRMap = [("U11",[1]),("U21",[1]),("U31",[1]),("U41",[1]),("and",[1]),("isNat",[]),("plus",[1,2]),("x",[1,2]),("0",[]),("s",[1]),("tt",[])], trsRules = [U11(tt,N) -> N,U21(tt,M,N) -> s(plus(N,M)),U31(tt) -> 0,U41(tt,M,N) -> plus(x(N,M),N),and(tt,X) -> X,isNat(plus(V1,V2)) -> and(isNat(V1),isNat(V2)),isNat(x(V1,V2)) -> and(isNat(V1),isNat(V2)),isNat(0) -> tt,isNat(s(V1)) -> isNat(V1),plus(N,0) -> U11(isNat(N),N),plus(N,s(M)) -> U21(and(isNat(M),isNat(N)),M,N),x(N,0) -> U31(isNat(N)),x(N,s(M)) -> U41(and(isNat(M),isNat(N)),M,N)], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1201.trs" :
TRS {trsSignature = fromList [("0",0),("U11",3),("U12",3),("plus",2),("s",1),("tt",0)], trsVariables = fromList ["M","N"], trsRMap = [("U11",[1]),("U12",[1]),("plus",[1,2]),("0",[]),("s",[1]),("tt",[])], trsRules = [U11(tt,M,N) -> U12(tt,M,N),U12(tt,M,N) -> s(plus(N,M)),plus(N,0) -> N,plus(N,s(M)) -> U11(tt,M,N)], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1200.trs" :
TRS {trsSignature = fromList [("0",0),("U11",3),("U12",3),("U21",3),("U22",3),("plus",2),("s",1),("tt",0),("x",2)], trsVariables = fromList ["M","N"], trsRMap = [("U11",[1]),("U12",[1]),("U21",[1]),("U22",[1]),("plus",[1,2]),("x",[1,2]),("0",[]),("s",[1]),("tt",[])], trsRules = [U11(tt,M,N) -> U12(tt,M,N),U12(tt,M,N) -> s(plus(N,M)),U21(tt,M,N) -> U22(tt,M,N),U22(tt,M,N) -> plus(x(N,M),N),plus(N,0) -> N,plus(N,s(M)) -> U11(tt,M,N),x(N,0) -> 0,x(N,s(M)) -> U21(tt,M,N)], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1199.trs" :
TRS {trsSignature = fromList [("0",0),("and",2),("plus",2),("s",1),("tt",0)], trsVariables = fromList ["M","N","X"], trsRMap = [("and",[1]),("plus",[1,2]),("0",[]),("s",[1]),("tt",[])], trsRules = [and(tt,X) -> X,plus(N,0) -> N,plus(N,s(M)) -> s(plus(N,M))], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1198.trs" :
TRS {trsSignature = fromList [("0",0),("and",2),("plus",2),("s",1),("tt",0),("x",2)], trsVariables = fromList ["M","N","X"], trsRMap = [("and",[1]),("plus",[1,2]),("x",[1,2]),("0",[]),("s",[1]),("tt",[])], trsRules = [and(tt,X) -> X,plus(N,0) -> N,plus(N,s(M)) -> s(plus(N,M)),x(N,0) -> 0,x(N,s(M)) -> plus(x(N,M),N)], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1197.trs" :
TRS {trsSignature = fromList [("0",0),("U101",3),("U102",3),("U103",3),("U104",3),("U105",2),("U106",1),("U11",2),("U111",3),("U112",3),("U113",3),("U114",2),("U12",2),("U121",2),("U122",1),("U13",1),("U131",4),("U132",4),("U133",4),("U134",4),("U135",4),("U136",4),("U21",2),("U22",2),("U23",1),("U31",2),("U32",2),("U33",1),("U41",3),("U42",3),("U43",3),("U44",3),("U45",2),("U46",1),("U51",2),("U52",1),("U61",2),("U62",1),("U71",1),("U81",1),("U91",3),("U92",3),("U93",3),("U94",3),("U95",2),("U96",1),("cons",2),("isNat",1),("isNatIList",1),("isNatIListKind",1),("isNatKind",1),("isNatList",1),("length",1),("nil",0),("s",1),("take",2),("tt",0),("zeros",0)], trsVariables = fromList ["IL","L","M","N","V","V1","V2"], trsRMap = [("U101",[1]),("U102",[1]),("U103",[1]),("U104",[1]),("U105",[1]),("U106",[1]),("U11",[1]),("U111",[1]),("U112",[1]),("U113",[1]),("U114",[1]),("U12",[1]),("U121",[1]),("U122",[1]),("U13",[1]),("U131",[1]),("U132",[1]),("U133",[1]),("U134",[1]),("U135",[1]),("U136",[1]),("U21",[1]),("U22",[1]),("U23",[1]),("U31",[1]),("U32",[1]),("U33",[1]),("U41",[1]),("U42",[1]),("U43",[1]),("U44",[1]),("U45",[1]),("U46",[1]),("U51",[1]),("U52",[1]),("U61",[1]),("U62",[1]),("U71",[1]),("U81",[1]),("U91",[1]),("U92",[1]),("U93",[1]),("U94",[1]),("U95",[1]),("U96",[1]),("isNat",[]),("isNatIList",[]),("isNatIListKind",[]),("isNatKind",[]),("isNatList",[]),("length",[1]),("take",[1,2]),("zeros",[]),("0",[]),("cons",[1]),("nil",[]),("s",[1]),("tt",[])], trsRules = [U101(tt,V1,V2) -> U102(isNatKind(V1),V1,V2),U102(tt,V1,V2) -> U103(isNatIListKind(V2),V1,V2),U103(tt,V1,V2) -> U104(isNatIListKind(V2),V1,V2),U104(tt,V1,V2) -> U105(isNat(V1),V2),U105(tt,V2) -> U106(isNatIList(V2)),U106(tt) -> tt,U11(tt,V1) -> U12(isNatIListKind(V1),V1),U111(tt,L,N) -> U112(isNatIListKind(L),L,N),U112(tt,L,N) -> U113(isNat(N),L,N),U113(tt,L,N) -> U114(isNatKind(N),L),U114(tt,L) -> s(length(L)),U12(tt,V1) -> U13(isNatList(V1)),U121(tt,IL) -> U122(isNatIListKind(IL)),U122(tt) -> nil,U13(tt) -> tt,U131(tt,IL,M,N) -> U132(isNatIListKind(IL),IL,M,N),U132(tt,IL,M,N) -> U133(isNat(M),IL,M,N),U133(tt,IL,M,N) -> U134(isNatKind(M),IL,M,N),U134(tt,IL,M,N) -> U135(isNat(N),IL,M,N),U135(tt,IL,M,N) -> U136(isNatKind(N),IL,M,N),U136(tt,IL,M,N) -> cons(N,take(M,IL)),U21(tt,V1) -> U22(isNatKind(V1),V1),U22(tt,V1) -> U23(isNat(V1)),U23(tt) -> tt,U31(tt,V) -> U32(isNatIListKind(V),V),U32(tt,V) -> U33(isNatList(V)),U33(tt) -> tt,U41(tt,V1,V2) -> U42(isNatKind(V1),V1,V2),U42(tt,V1,V2) -> U43(isNatIListKind(V2),V1,V2),U43(tt,V1,V2) -> U44(isNatIListKind(V2),V1,V2),U44(tt,V1,V2) -> U45(isNat(V1),V2),U45(tt,V2) -> U46(isNatIList(V2)),U46(tt) -> tt,U51(tt,V2) -> U52(isNatIListKind(V2)),U52(tt) -> tt,U61(tt,V2) -> U62(isNatIListKind(V2)),U62(tt) -> tt,U71(tt) -> tt,U81(tt) -> tt,U91(tt,V1,V2) -> U92(isNatKind(V1),V1,V2),U92(tt,V1,V2) -> U93(isNatIListKind(V2),V1,V2),U93(tt,V1,V2) -> U94(isNatIListKind(V2),V1,V2),U94(tt,V1,V2) -> U95(isNat(V1),V2),U95(tt,V2) -> U96(isNatList(V2)),U96(tt) -> tt,isNat(length(V1)) -> U11(isNatIListKind(V1),V1),isNat(0) -> tt,isNat(s(V1)) -> U21(isNatKind(V1),V1),isNatIList(zeros) -> tt,isNatIList(cons(V1,V2)) -> U41(isNatKind(V1),V1,V2),isNatIList(V) -> U31(isNatIListKind(V),V),isNatIListKind(take(V1,V2)) -> U61(isNatKind(V1),V2),isNatIListKind(zeros) -> tt,isNatIListKind(cons(V1,V2)) -> U51(isNatKind(V1),V2),isNatIListKind(nil) -> tt,isNatKind(length(V1)) -> U71(isNatIListKind(V1)),isNatKind(0) -> tt,isNatKind(s(V1)) -> U81(isNatKind(V1)),isNatList(take(V1,V2)) -> U101(isNatKind(V1),V1,V2),isNatList(cons(V1,V2)) -> U91(isNatKind(V1),V1,V2),isNatList(nil) -> tt,length(cons(N,L)) -> U111(isNatList(L),L,N),length(nil) -> 0,take(0,IL) -> U121(isNatIList(IL),IL),take(s(M),cons(N,IL)) -> U131(isNatIList(IL),IL,M,N),zeros -> cons(0,zeros)], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1196.trs" :
TRS {trsSignature = fromList [("0",0),("U11",2),("U12",1),("U21",2),("U22",1),("U31",2),("U32",1),("U41",3),("U42",2),("U43",1),("U51",3),("U52",2),("U53",1),("U61",3),("U62",2),("U63",1),("U71",2),("U81",1),("U91",4),("and",2),("cons",2),("isNat",1),("isNatIList",1),("isNatIListKind",1),("isNatKind",1),("isNatList",1),("length",1),("nil",0),("s",1),("take",2),("tt",0),("zeros",0)], trsVariables = fromList ["IL","L","M","N","V","V1","V2","X"], trsRMap = [("U11",[1]),("U12",[1]),("U21",[1]),("U22",[1]),("U31",[1]),("U32",[1]),("U41",[1]),("U42",[1]),("U43",[1]),("U51",[1]),("U52",[1]),("U53",[1]),("U61",[1]),("U62",[1]),("U63",[1]),("U71",[1]),("U81",[1]),("U91",[1]),("and",[1]),("isNat",[]),("isNatIList",[]),("isNatIListKind",[]),("isNatKind",[]),("isNatList",[]),("length",[1]),("take",[1,2]),("zeros",[]),("0",[]),("cons",[1]),("nil",[]),("s",[1]),("tt",[])], trsRules = [U11(tt,V1) -> U12(isNatList(V1)),U12(tt) -> tt,U21(tt,V1) -> U22(isNat(V1)),U22(tt) -> tt,U31(tt,V) -> U32(isNatList(V)),U32(tt) -> tt,U41(tt,V1,V2) -> U42(isNat(V1),V2),U42(tt,V2) -> U43(isNatIList(V2)),U43(tt) -> tt,U51(tt,V1,V2) -> U52(isNat(V1),V2),U52(tt,V2) -> U53(isNatList(V2)),U53(tt) -> tt,U61(tt,V1,V2) -> U62(isNat(V1),V2),U62(tt,V2) -> U63(isNatIList(V2)),U63(tt) -> tt,U71(tt,L) -> s(length(L)),U81(tt) -> nil,U91(tt,IL,M,N) -> cons(N,take(M,IL)),and(tt,X) -> X,isNat(length(V1)) -> U11(isNatIListKind(V1),V1),isNat(0) -> tt,isNat(s(V1)) -> U21(isNatKind(V1),V1),isNatIList(zeros) -> tt,isNatIList(cons(V1,V2)) -> U41(and(isNatKind(V1),isNatIListKind(V2)),V1,V2),isNatIList(V) -> U31(isNatIListKind(V),V),isNatIListKind(take(V1,V2)) -> and(isNatKind(V1),isNatIListKind(V2)),isNatIListKind(zeros) -> tt,isNatIListKind(cons(V1,V2)) -> and(isNatKind(V1),isNatIListKind(V2)),isNatIListKind(nil) -> tt,isNatKind(length(V1)) -> isNatIListKind(V1),isNatKind(0) -> tt,isNatKind(s(V1)) -> isNatKind(V1),isNatList(take(V1,V2)) -> U61(and(isNatKind(V1),isNatIListKind(V2)),V1,V2),isNatList(cons(V1,V2)) -> U51(and(isNatKind(V1),isNatIListKind(V2)),V1,V2),isNatList(nil) -> tt,length(cons(N,L)) -> U71(and(and(isNatList(L),isNatIListKind(L)),and(isNat(N),isNatKind(N))),L),length(nil) -> 0,take(0,IL) -> U81(and(isNatIList(IL),isNatIListKind(IL))),take(s(M),cons(N,IL)) -> U91(and(and(isNatIList(IL),isNatIListKind(IL)),and(and(isNat(M),isNatKind(M)),and(isNat(N),isNatKind(N)))),IL,M,N),zeros -> cons(0,zeros)], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1195.trs" :
TRS {trsSignature = fromList [("0",0),("U11",1),("U21",1),("U31",1),("U41",2),("U42",1),("U51",2),("U52",1),("U61",2),("U62",1),("U71",3),("U72",2),("U81",1),("U91",4),("U92",4),("U93",4),("cons",2),("isNat",1),("isNatIList",1),("isNatList",1),("length",1),("nil",0),("s",1),("take",2),("tt",0),("zeros",0)], trsVariables = fromList ["IL","L","M","N","V","V1","V2"], trsRMap = [("U11",[1]),("U21",[1]),("U31",[1]),("U41",[1]),("U42",[1]),("U51",[1]),("U52",[1]),("U61",[1]),("U62",[1]),("U71",[1]),("U72",[1]),("U81",[1]),("U91",[1]),("U92",[1]),("U93",[1]),("isNat",[]),("isNatIList",[]),("isNatList",[]),("length",[1]),("take",[1,2]),("zeros",[]),("0",[]),("cons",[1]),("nil",[]),("s",[1]),("tt",[])], trsRules = [U11(tt) -> tt,U21(tt) -> tt,U31(tt) -> tt,U41(tt,V2) -> U42(isNatIList(V2)),U42(tt) -> tt,U51(tt,V2) -> U52(isNatList(V2)),U52(tt) -> tt,U61(tt,V2) -> U62(isNatIList(V2)),U62(tt) -> tt,U71(tt,L,N) -> U72(isNat(N),L),U72(tt,L) -> s(length(L)),U81(tt) -> nil,U91(tt,IL,M,N) -> U92(isNat(M),IL,M,N),U92(tt,IL,M,N) -> U93(isNat(N),IL,M,N),U93(tt,IL,M,N) -> cons(N,take(M,IL)),isNat(length(V1)) -> U11(isNatList(V1)),isNat(0) -> tt,isNat(s(V1)) -> U21(isNat(V1)),isNatIList(zeros) -> tt,isNatIList(cons(V1,V2)) -> U41(isNat(V1),V2),isNatIList(V) -> U31(isNatList(V)),isNatList(take(V1,V2)) -> U61(isNat(V1),V2),isNatList(cons(V1,V2)) -> U51(isNat(V1),V2),isNatList(nil) -> tt,length(cons(N,L)) -> U71(isNatList(L),L,N),length(nil) -> 0,take(0,IL) -> U81(isNatIList(IL)),take(s(M),cons(N,IL)) -> U91(isNatIList(IL),IL,M,N),zeros -> cons(0,zeros)], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1194.trs" :
TRS {trsSignature = fromList [("0",0),("U11",2),("U21",1),("U31",4),("and",2),("cons",2),("isNat",1),("isNatIList",1),("isNatList",1),("length",1),("nil",0),("s",1),("take",2),("tt",0),("zeros",0)], trsVariables = fromList ["IL","L","M","N","V","V1","V2","X"], trsRMap = [("U11",[1]),("U21",[1]),("U31",[1]),("and",[1]),("isNat",[]),("isNatIList",[]),("isNatList",[]),("length",[1]),("take",[1,2]),("zeros",[]),("0",[]),("cons",[1]),("nil",[]),("s",[1]),("tt",[])], trsRules = [U11(tt,L) -> s(length(L)),U21(tt) -> nil,U31(tt,IL,M,N) -> cons(N,take(M,IL)),and(tt,X) -> X,isNat(length(V1)) -> isNatList(V1),isNat(0) -> tt,isNat(s(V1)) -> isNat(V1),isNatIList(zeros) -> tt,isNatIList(cons(V1,V2)) -> and(isNat(V1),isNatIList(V2)),isNatIList(V) -> isNatList(V),isNatList(take(V1,V2)) -> and(isNat(V1),isNatIList(V2)),isNatList(cons(V1,V2)) -> and(isNat(V1),isNatList(V2)),isNatList(nil) -> tt,length(cons(N,L)) -> U11(and(isNatList(L),isNat(N)),L),length(nil) -> 0,take(0,IL) -> U21(isNatIList(IL)),take(s(M),cons(N,IL)) -> U31(and(isNatIList(IL),and(isNat(M),isNat(N))),IL,M,N),zeros -> cons(0,zeros)], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1193.trs" :
TRS {trsSignature = fromList [("0",0),("U11",2),("U12",2),("U21",4),("U22",4),("U23",4),("cons",2),("length",1),("nil",0),("s",1),("take",2),("tt",0),("zeros",0)], trsVariables = fromList ["IL","L","M","N"], trsRMap = [("U11",[1]),("U12",[1]),("U21",[1]),("U22",[1]),("U23",[1]),("length",[1]),("take",[1,2]),("zeros",[]),("0",[]),("cons",[1]),("nil",[]),("s",[1]),("tt",[])], trsRules = [U11(tt,L) -> U12(tt,L),U12(tt,L) -> s(length(L)),U21(tt,IL,M,N) -> U22(tt,IL,M,N),U22(tt,IL,M,N) -> U23(tt,IL,M,N),U23(tt,IL,M,N) -> cons(N,take(M,IL)),length(cons(N,L)) -> U11(tt,L),length(nil) -> 0,take(0,IL) -> nil,take(s(M),cons(N,IL)) -> U21(tt,IL,M,N),zeros -> cons(0,zeros)], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1192.trs" :
TRS {trsSignature = fromList [("0",0),("and",2),("cons",2),("length",1),("nil",0),("s",1),("take",2),("tt",0),("zeros",0)], trsVariables = fromList ["IL","L","M","N","X"], trsRMap = [("and",[1]),("length",[1]),("take",[1,2]),("zeros",[]),("0",[]),("cons",[1]),("nil",[]),("s",[1]),("tt",[])], trsRules = [and(tt,X) -> X,length(cons(N,L)) -> s(length(L)),length(nil) -> 0,take(0,IL) -> nil,take(s(M),cons(N,IL)) -> cons(N,take(M,IL)),zeros -> cons(0,zeros)], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1191.trs" :
TRS {trsSignature = fromList [("U11",2),("U12",2),("U13",1),("U21",3),("U22",3),("U23",3),("U24",3),("U25",2),("U26",1),("U31",2),("U32",2),("U33",1),("U41",3),("U42",3),("U43",3),("U44",3),("U45",2),("U46",1),("U51",3),("U52",3),("U53",3),("U54",3),("U55",2),("U56",1),("U61",2),("U62",2),("U63",1),("U71",3),("U72",2),("U73",2),("U74",1),("U81",2),("U82",2),("U83",1),("U91",2),("U92",1),("__",2),("a",0),("e",0),("i",0),("isList",1),("isNeList",1),("isNePal",1),("isPal",1),("isPalListKind",1),("isQid",1),("nil",0),("o",0),("tt",0),("u",0)], trsVariables = fromList ["I","P","V","V1","V2","X","Y","Z"], trsRMap = [("U11",[1]),("U12",[1]),("U13",[1]),("U21",[1]),("U22",[1]),("U23",[1]),("U24",[1]),("U25",[1]),("U26",[1]),("U31",[1]),("U32",[1]),("U33",[1]),("U41",[1]),("U42",[1]),("U43",[1]),("U44",[1]),("U45",[1]),("U46",[1]),("U51",[1]),("U52",[1]),("U53",[1]),("U54",[1]),("U55",[1]),("U56",[1]),("U61",[1]),("U62",[1]),("U63",[1]),("U71",[1]),("U72",[1]),("U73",[1]),("U74",[1]),("U81",[1]),("U82",[1]),("U83",[1]),("U91",[1]),("U92",[1]),("__",[1,2]),("isList",[]),("isNeList",[]),("isNePal",[]),("isPal",[]),("isPalListKind",[]),("isQid",[]),("a",[]),("e",[]),("i",[]),("nil",[]),("o",[]),("tt",[]),("u",[])], trsRules = [U11(tt,V) -> U12(isPalListKind(V),V),U12(tt,V) -> U13(isNeList(V)),U13(tt) -> tt,U21(tt,V1,V2) -> U22(isPalListKind(V1),V1,V2),U22(tt,V1,V2) -> U23(isPalListKind(V2),V1,V2),U23(tt,V1,V2) -> U24(isPalListKind(V2),V1,V2),U24(tt,V1,V2) -> U25(isList(V1),V2),U25(tt,V2) -> U26(isList(V2)),U26(tt) -> tt,U31(tt,V) -> U32(isPalListKind(V),V),U32(tt,V) -> U33(isQid(V)),U33(tt) -> tt,U41(tt,V1,V2) -> U42(isPalListKind(V1),V1,V2),U42(tt,V1,V2) -> U43(isPalListKind(V2),V1,V2),U43(tt,V1,V2) -> U44(isPalListKind(V2),V1,V2),U44(tt,V1,V2) -> U45(isList(V1),V2),U45(tt,V2) -> U46(isNeList(V2)),U46(tt) -> tt,U51(tt,V1,V2) -> U52(isPalListKind(V1),V1,V2),U52(tt,V1,V2) -> U53(isPalListKind(V2),V1,V2),U53(tt,V1,V2) -> U54(isPalListKind(V2),V1,V2),U54(tt,V1,V2) -> U55(isNeList(V1),V2),U55(tt,V2) -> U56(isList(V2)),U56(tt) -> tt,U61(tt,V) -> U62(isPalListKind(V),V),U62(tt,V) -> U63(isQid(V)),U63(tt) -> tt,U71(tt,I,P) -> U72(isPalListKind(I),P),U72(tt,P) -> U73(isPal(P),P),U73(tt,P) -> U74(isPalListKind(P)),U74(tt) -> tt,U81(tt,V) -> U82(isPalListKind(V),V),U82(tt,V) -> U83(isNePal(V)),U83(tt) -> tt,U91(tt,V2) -> U92(isPalListKind(V2)),U92(tt) -> tt,__(__(X,Y),Z) -> __(X,__(Y,Z)),__(nil,X) -> X,__(X,nil) -> X,isList(__(V1,V2)) -> U21(isPalListKind(V1),V1,V2),isList(nil) -> tt,isList(V) -> U11(isPalListKind(V),V),isNeList(__(V1,V2)) -> U41(isPalListKind(V1),V1,V2),isNeList(__(V1,V2)) -> U51(isPalListKind(V1),V1,V2),isNeList(V) -> U31(isPalListKind(V),V),isNePal(__(I,__(P,I))) -> U71(isQid(I),I,P),isNePal(V) -> U61(isPalListKind(V),V),isPal(nil) -> tt,isPal(V) -> U81(isPalListKind(V),V),isPalListKind(__(V1,V2)) -> U91(isPalListKind(V1),V2),isPalListKind(a) -> tt,isPalListKind(e) -> tt,isPalListKind(i) -> tt,isPalListKind(nil) -> tt,isPalListKind(o) -> tt,isPalListKind(u) -> tt,isQid(a) -> tt,isQid(e) -> tt,isQid(i) -> tt,isQid(o) -> tt,isQid(u) -> tt], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1190.trs" :
TRS {trsSignature = fromList [("U11",2),("U12",1),("U21",3),("U22",2),("U23",1),("U31",2),("U32",1),("U41",3),("U42",2),("U43",1),("U51",3),("U52",2),("U53",1),("U61",2),("U62",1),("U71",2),("U72",1),("__",2),("a",0),("and",2),("e",0),("i",0),("isList",1),("isNeList",1),("isNePal",1),("isPal",1),("isPalListKind",1),("isQid",1),("nil",0),("o",0),("tt",0),("u",0)], trsVariables = fromList ["I","P","V","V1","V2","X","Y","Z"], trsRMap = [("U11",[1]),("U12",[1]),("U21",[1]),("U22",[1]),("U23",[1]),("U31",[1]),("U32",[1]),("U41",[1]),("U42",[1]),("U43",[1]),("U51",[1]),("U52",[1]),("U53",[1]),("U61",[1]),("U62",[1]),("U71",[1]),("U72",[1]),("__",[1,2]),("and",[1]),("isList",[]),("isNeList",[]),("isNePal",[]),("isPal",[]),("isPalListKind",[]),("isQid",[]),("a",[]),("e",[]),("i",[]),("nil",[]),("o",[]),("tt",[]),("u",[])], trsRules = [U11(tt,V) -> U12(isNeList(V)),U12(tt) -> tt,U21(tt,V1,V2) -> U22(isList(V1),V2),U22(tt,V2) -> U23(isList(V2)),U23(tt) -> tt,U31(tt,V) -> U32(isQid(V)),U32(tt) -> tt,U41(tt,V1,V2) -> U42(isList(V1),V2),U42(tt,V2) -> U43(isNeList(V2)),U43(tt) -> tt,U51(tt,V1,V2) -> U52(isNeList(V1),V2),U52(tt,V2) -> U53(isList(V2)),U53(tt) -> tt,U61(tt,V) -> U62(isQid(V)),U62(tt) -> tt,U71(tt,V) -> U72(isNePal(V)),U72(tt) -> tt,__(__(X,Y),Z) -> __(X,__(Y,Z)),__(nil,X) -> X,__(X,nil) -> X,and(tt,X) -> X,isList(__(V1,V2)) -> U21(and(isPalListKind(V1),isPalListKind(V2)),V1,V2),isList(nil) -> tt,isList(V) -> U11(isPalListKind(V),V),isNeList(__(V1,V2)) -> U41(and(isPalListKind(V1),isPalListKind(V2)),V1,V2),isNeList(__(V1,V2)) -> U51(and(isPalListKind(V1),isPalListKind(V2)),V1,V2),isNeList(V) -> U31(isPalListKind(V),V),isNePal(__(I,__(P,I))) -> and(and(isQid(I),isPalListKind(I)),and(isPal(P),isPalListKind(P))),isNePal(V) -> U61(isPalListKind(V),V),isPal(nil) -> tt,isPal(V) -> U71(isPalListKind(V),V),isPalListKind(__(V1,V2)) -> and(isPalListKind(V1),isPalListKind(V2)),isPalListKind(a) -> tt,isPalListKind(e) -> tt,isPalListKind(i) -> tt,isPalListKind(nil) -> tt,isPalListKind(o) -> tt,isPalListKind(u) -> tt,isQid(a) -> tt,isQid(e) -> tt,isQid(i) -> tt,isQid(o) -> tt,isQid(u) -> tt], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1189.trs" :
TRS {trsSignature = fromList [("U11",1),("U21",2),("U22",1),("U31",1),("U41",2),("U42",1),("U51",2),("U52",1),("U61",1),("U71",2),("U72",1),("U81",1),("__",2),("a",0),("e",0),("i",0),("isList",1),("isNeList",1),("isNePal",1),("isPal",1),("isQid",1),("nil",0),("o",0),("tt",0),("u",0)], trsVariables = fromList ["I","P","V","V1","V2","X","Y","Z"], trsRMap = [("U11",[1]),("U21",[1]),("U22",[1]),("U31",[1]),("U41",[1]),("U42",[1]),("U51",[1]),("U52",[1]),("U61",[1]),("U71",[1]),("U72",[1]),("U81",[1]),("__",[1,2]),("isList",[]),("isNeList",[]),("isNePal",[]),("isPal",[]),("isQid",[]),("a",[]),("e",[]),("i",[]),("nil",[]),("o",[]),("tt",[]),("u",[])], trsRules = [U11(tt) -> tt,U21(tt,V2) -> U22(isList(V2)),U22(tt) -> tt,U31(tt) -> tt,U41(tt,V2) -> U42(isNeList(V2)),U42(tt) -> tt,U51(tt,V2) -> U52(isList(V2)),U52(tt) -> tt,U61(tt) -> tt,U71(tt,P) -> U72(isPal(P)),U72(tt) -> tt,U81(tt) -> tt,__(__(X,Y),Z) -> __(X,__(Y,Z)),__(nil,X) -> X,__(X,nil) -> X,isList(__(V1,V2)) -> U21(isList(V1),V2),isList(nil) -> tt,isList(V) -> U11(isNeList(V)),isNeList(__(V1,V2)) -> U41(isList(V1),V2),isNeList(__(V1,V2)) -> U51(isNeList(V1),V2),isNeList(V) -> U31(isQid(V)),isNePal(__(I,__(P,I))) -> U71(isQid(I),P),isNePal(V) -> U61(isQid(V)),isPal(nil) -> tt,isPal(V) -> U81(isNePal(V)),isQid(a) -> tt,isQid(e) -> tt,isQid(i) -> tt,isQid(o) -> tt,isQid(u) -> tt], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1188.trs" :
TRS {trsSignature = fromList [("__",2),("a",0),("and",2),("e",0),("i",0),("isList",1),("isNeList",1),("isNePal",1),("isPal",1),("isQid",1),("nil",0),("o",0),("tt",0),("u",0)], trsVariables = fromList ["I","P","V","V1","V2","X","Y","Z"], trsRMap = [("__",[1,2]),("and",[1]),("isList",[]),("isNeList",[]),("isNePal",[]),("isPal",[]),("isQid",[]),("a",[]),("e",[]),("i",[]),("nil",[]),("o",[]),("tt",[]),("u",[])], trsRules = [__(__(X,Y),Z) -> __(X,__(Y,Z)),__(nil,X) -> X,__(X,nil) -> X,and(tt,X) -> X,isList(__(V1,V2)) -> and(isList(V1),isList(V2)),isList(nil) -> tt,isList(V) -> isNeList(V),isNeList(__(V1,V2)) -> and(isList(V1),isNeList(V2)),isNeList(__(V1,V2)) -> and(isNeList(V1),isList(V2)),isNeList(V) -> isQid(V),isNePal(__(I,__(P,I))) -> and(isQid(I),isPal(P)),isNePal(V) -> isQid(V),isPal(nil) -> tt,isPal(V) -> isNePal(V),isQid(a) -> tt,isQid(e) -> tt,isQid(i) -> tt,isQid(o) -> tt,isQid(u) -> tt], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1187.trs" :
TRS {trsSignature = fromList [("U11",1),("U12",1),("__",2),("isNePal",1),("nil",0),("tt",0)], trsVariables = fromList ["I","P","X","Y","Z"], trsRMap = [("U11",[1]),("U12",[1]),("__",[1,2]),("isNePal",[1]),("nil",[]),("tt",[])], trsRules = [U11(tt) -> U12(tt),U12(tt) -> tt,__(__(X,Y),Z) -> __(X,__(Y,Z)),__(nil,X) -> X,__(X,nil) -> X,isNePal(__(I,__(P,I))) -> U11(tt)], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1186.trs" :
TRS {trsSignature = fromList [("__",2),("and",2),("isNePal",1),("nil",0),("tt",0)], trsVariables = fromList ["I","P","X","Y","Z"], trsRMap = [("__",[1,2]),("and",[1]),("isNePal",[1]),("nil",[]),("tt",[])], trsRules = [__(__(X,Y),Z) -> __(X,__(Y,Z)),__(nil,X) -> X,__(X,nil) -> X,and(tt,X) -> X,isNePal(__(I,__(P,I))) -> tt], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1185.trs" :
TRS {trsSignature = fromList [("0",0),("div",2),("false",0),("gt",2),("if",3),("minus",2),("p",1),("s",1),("true",0)], trsVariables = fromList ["X","Y"], trsRMap = [("div",[1,2]),("gt",[1,2]),("if",[1]),("minus",[1,2]),("p",[1]),("0",[]),("false",[]),("s",[1]),("true",[])], trsRules = [div(0,s(Y)) -> 0,div(s(X),s(Y)) -> s(div(minus(X,Y),s(Y))),gt(0,Y) -> false,gt(s(X),0) -> true,gt(s(X),s(Y)) -> gt(X,Y),if(false,X,Y) -> Y,if(true,X,Y) -> X,minus(X,Y) -> if(gt(Y,0),minus(p(X),p(Y)),X),p(0) -> 0,p(s(X)) -> X], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1184.trs" :
TRS {trsSignature = fromList [("0",0),("false",0),("if",3),("isZero",1),("p",1),("plus",2),("s",1),("true",0)], trsVariables = fromList ["x","y"], trsRMap = [("if",[1]),("isZero",[1]),("p",[1]),("plus",[1,2]),("0",[]),("false",[]),("s",[1]),("true",[])], trsRules = [if(false,x,y) -> y,if(true,x,y) -> x,isZero(0) -> true,isZero(s(x)) -> false,p(s(x)) -> x,plus(x,y) -> if(isZero(x),y,s(plus(p(x),y)))], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1183.trs" :
TRS {trsSignature = fromList [("*top*_0",1),("a_0",0),("b_0",0),("f_0",1),("f_1",1),("g_1",1)], trsVariables = fromList ["x"], trsRMap = [("*top*_0",[1]),("f_0",[1]),("f_1",[]),("g_1",[]),("a_0",[]),("b_0",[])], trsRules = [*top*_0(g_1(x)) -> *top*_0(f_0(g_1(x))),f_0(g_1(x)) -> f_1(f_0(g_1(x))),f_1(f_0(x)) -> b_0,f_1(f_1(x)) -> b_0,f_1(g_1(a_0)) -> a_0,g_1(x) -> f_1(g_1(x))], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1182.trs" :
TRS {trsSignature = fromList [("*top*_0",1),("big_0",0),("cons_0",2),("cons_1",2),("inf_1",1),("s_0",1)], trsVariables = fromList ["x","x0","y","z"], trsRMap = [("*top*_0",[1]),("cons_0",[1,2]),("cons_1",[]),("s_0",[1]),("big_0",[]),("inf_1",[])], trsRules = [*top*_0(inf_1(x)) -> *top*_0(cons_0(x,inf_1(s_0(x)))),cons_0(inf_1(x),x0) -> cons_0(cons_0(x,inf_1(s_0(x))),x0),cons_0(x0,inf_1(x)) -> cons_1(x0,cons_0(x,inf_1(s_0(x)))),cons_1(x,cons_0(y,z)) -> big_0,cons_1(x,cons_1(y,z)) -> big_0,s_0(inf_1(x)) -> s_0(cons_0(x,inf_1(s_0(x))))], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1181.trs" :
TRS {trsSignature = fromList [("*top*_0",1),("a_0",0),("b_0",0),("f_0",1),("f_1",1),("g_1",1),("s_0",1)], trsVariables = fromList ["x"], trsRMap = [("*top*_0",[1]),("f_0",[1]),("f_1",[]),("g_1",[]),("s_0",[1]),("a_0",[]),("b_0",[])], trsRules = [*top*_0(g_1(x)) -> *top*_0(f_0(g_1(x))),f_0(g_1(x)) -> f_1(f_0(g_1(x))),f_1(f_0(x)) -> b_0,f_1(f_1(x)) -> b_0,f_1(g_1(a_0)) -> f_0(s_0(g_1(b_0))),g_1(x) -> f_1(g_1(x)),s_0(g_1(x)) -> s_0(f_0(g_1(x)))], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1180.trs" :
TRS {trsSignature = fromList [("a_0",0),("f_1",1),("h_0",1),("i_1",1)], trsVariables = fromList ["x"], trsRMap = [("f_1",[]),("i_1",[]),("a_0",[]),("h_0",[1])], trsRules = [f_1(i_1(x)) -> a_0,f_1(h_0(x)) -> f_1(i_1(x)),i_1(x) -> h_0(x)], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1179.trs" :
TRS {trsSignature = fromList [("a_0",0),("f_1",1),("g_1",1)], trsVariables = fromList ["x"], trsRMap = [("f_1",[]),("g_1",[]),("a_0",[])], trsRules = [f_1(x) -> g_1(f_1(x)),g_1(f_1(x)) -> x,g_1(x) -> a_0], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1178.trs" :
TRS {trsSignature = fromList [("a_0",0),("f_1",2),("g_1",1),("i_0",1)], trsVariables = fromList ["x","y"], trsRMap = [("f_1",[]),("g_1",[]),("a_0",[]),("i_0",[1])], trsRules = [f_1(i_0(x),i_0(g_1(x))) -> a_0,f_1(x,i_0(x)) -> f_1(x,x),f_1(x,x) -> f_1(i_0(x),g_1(g_1(x))),f_1(x,y) -> x,g_1(x) -> i_0(x)], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1177.trs" :
TRS {trsSignature = fromList [("cons_0",2),("cons_1",2),("from_1",1),("from_2",1),("from_3",1),("overflow_0",0),("s_0",1)], trsVariables = fromList ["x","xs"], trsRMap = [("cons_1",[]),("from_1",[]),("from_2",[]),("from_3",[]),("cons_0",[1,2]),("overflow_0",[]),("s_0",[1])], trsRules = [cons_1(s_0(x),xs) -> overflow_0,from_1(x) -> cons_0(x,from_3(s_0(x))),from_2(x) -> cons_0(x,from_3(s_0(x))),from_3(x) -> cons_1(x,from_3(s_0(x)))], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1176.trs" :
TRS {trsSignature = fromList [("*top*_0",1),("b_0",0),("f_0",1),("f_1",1),("g_0",1),("g_1",1)], trsVariables = fromList ["x"], trsRMap = [("*top*_0",[1]),("f_0",[1]),("f_1",[]),("g_0",[1]),("b_0",[]),("g_1",[])], trsRules = [*top*_0(f_0(f_1(f_0(g_0(x))))) -> *top*_0(f_0(x)),*top*_0(f_1(f_0(g_0(x)))) -> *top*_0(x),*top*_0(f_1(f_0(g_1(x)))) -> *top*_0(x),*top*_0(g_1(b_0)) -> *top*_0(f_0(g_1(b_0))),f_0(f_0(f_1(f_0(g_0(x))))) -> f_1(f_0(x)),f_0(f_1(f_0(g_0(x)))) -> f_1(x),f_0(f_1(f_0(g_1(x)))) -> f_0(x),f_0(g_1(b_0)) -> f_1(f_0(g_1(b_0))),f_1(f_0(g_0(x))) -> x,g_0(f_0(f_1(f_0(g_0(x))))) -> g_0(f_0(x)),g_0(f_1(f_0(g_0(x)))) -> g_0(x),g_0(f_1(f_0(g_1(x)))) -> g_1(x),g_0(g_1(b_0)) -> g_0(f_0(g_1(b_0)))], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1175.trs" :
TRS {trsSignature = fromList [("*top*_0",1),("a_1",0),("c_0",0),("f_0",2),("f_1",2)], trsVariables = fromList ["x","x0","y","z"], trsRMap = [("*top*_0",[1]),("f_0",[1,2]),("f_1",[]),("a_1",[]),("c_0",[])], trsRules = [*top*_0(a_1) -> *top*_0(f_0(a_1,a_1)),f_0(a_1,x0) -> f_1(f_0(a_1,a_1),x0),f_0(x0,a_1) -> f_1(x0,f_0(a_1,a_1)),f_1(f_0(x,y),z) -> c_0,f_1(f_1(x,y),z) -> c_0,f_1(x,f_0(y,z)) -> f_1(f_0(x,y),z),f_1(x,f_0(y,z)) -> f_1(f_1(x,y),z),f_1(x,f_1(y,z)) -> f_1(f_0(x,y),z),f_1(x,f_1(y,z)) -> f_1(f_1(x,y),z)], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1174.trs" :
TRS {trsSignature = fromList [("a_0",0),("f_1",2),("g_1",1),("i_0",1)], trsVariables = fromList ["x","y"], trsRMap = [("f_1",[]),("g_1",[]),("a_0",[]),("i_0",[1])], trsRules = [f_1(x,i_0(g_1(x))) -> a_0,f_1(x,i_0(x)) -> f_1(x,x),f_1(x,x) -> f_1(i_0(x),g_1(g_1(x))),f_1(x,y) -> x,g_1(x) -> i_0(x)], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1173.trs" :
TRS {trsSignature = fromList [("*top*_0",1),("f_0",1),("f_1",1),("h_1",1),("i_1",1)], trsVariables = fromList ["x"], trsRMap = [("*top*_0",[1]),("f_0",[1]),("f_1",[]),("h_1",[]),("i_1",[])], trsRules = [*top*_0(f_1(i_1(x))) -> *top*_0(x),f_0(f_1(i_1(x))) -> f_1(x),f_1(h_1(x)) -> f_1(i_1(x)),f_1(i_1(x)) -> x,h_1(x) -> f_1(h_1(x)),i_1(x) -> h_1(x)], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1172.trs" :
TRS {trsSignature = fromList [("cons_0",2),("cons_1",2),("from_1",1),("from_2",1),("from_3",1),("from_4",1),("nil_0",0),("s_0",1)], trsVariables = fromList ["x","xs"], trsRMap = [("cons_1",[]),("from_1",[]),("from_2",[]),("from_3",[]),("from_4",[]),("cons_0",[1,2]),("nil_0",[]),("s_0",[1])], trsRules = [cons_1(s_0(s_0(x)),xs) -> nil_0,from_1(x) -> cons_1(x,from_1(s_0(x))),from_2(x) -> cons_0(x,from_1(s_0(x))),from_3(x) -> cons_0(x,from_2(s_0(x))),from_4(x) -> cons_0(x,from_2(s_0(x)))], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1171.trs" :
TRS {trsSignature = fromList [("*top*_0",1),("a_1",0),("c_0",0),("f_0",1),("f_1",1)], trsVariables = fromList ["x"], trsRMap = [("*top*_0",[1]),("f_0",[1]),("f_1",[]),("a_1",[]),("c_0",[])], trsRules = [*top*_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(a_1))))))))))))))))))) -> *top*_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(a_1)))))))))))))))))))),*top*_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(a_1)))))))))))))))))) -> *top*_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(a_1))))))))))))))))))),*top*_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(a_1))))))))))))))))) -> *top*_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(a_1)))))))))))))))))),*top*_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(a_1)))))))))))))))) -> *top*_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(a_1))))))))))))))))),*top*_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(a_1))))))))))))))) -> *top*_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(a_1)))))))))))))))),*top*_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(a_1)))))))))))))) -> *top*_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(a_1))))))))))))))),*top*_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(a_1))))))))))))) -> *top*_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(a_1)))))))))))))),*top*_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(a_1)))))))))))) -> *top*_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(a_1))))))))))))),*top*_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(a_1))))))))))) -> *top*_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(a_1)))))))))))),*top*_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(a_1)))))))))) -> *top*_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(a_1))))))))))),*top*_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(a_1))))))))) -> *top*_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(a_1)))))))))),*top*_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(a_1)))))))) -> *top*_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(a_1))))))))),*top*_0(f_0(f_0(f_0(f_0(f_0(f_0(a_1))))))) -> *top*_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(a_1)))))))),*top*_0(f_0(f_0(f_0(f_0(f_0(a_1)))))) -> *top*_0(f_0(f_0(f_0(f_0(f_0(f_0(a_1))))))),*top*_0(f_0(f_0(f_0(f_0(a_1))))) -> *top*_0(f_0(f_0(f_0(f_0(f_0(a_1)))))),*top*_0(f_0(f_0(f_0(a_1)))) -> *top*_0(f_0(f_0(f_0(f_0(a_1))))),*top*_0(f_0(f_0(a_1))) -> *top*_0(f_0(f_0(f_0(a_1)))),*top*_0(f_0(a_1)) -> *top*_0(f_0(f_0(a_1))),*top*_0(a_1) -> *top*_0(f_0(a_1)),f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(a_1))))))))))))))))))) -> f_1(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(a_1)))))))))))))))))))),f_1(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(x)))))))))))))))))))) -> c_0,f_1(f_1(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(x)))))))))))))))))))) -> c_0,f_1(f_1(f_1(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(x)))))))))))))))))))) -> c_0,f_1(f_1(f_1(f_1(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(x)))))))))))))))))))) -> c_0,f_1(f_1(f_1(f_1(f_1(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(x)))))))))))))))))))) -> c_0,f_1(f_1(f_1(f_1(f_1(f_1(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(x)))))))))))))))))))) -> c_0,f_1(f_1(f_1(f_1(f_1(f_1(f_1(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(x)))))))))))))))))))) -> c_0,f_1(f_1(f_1(f_1(f_1(f_1(f_1(f_1(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(x)))))))))))))))))))) -> c_0,f_1(f_1(f_1(f_1(f_1(f_1(f_1(f_1(f_1(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(x)))))))))))))))))))) -> c_0,f_1(f_1(f_1(f_1(f_1(f_1(f_1(f_1(f_1(f_1(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(x)))))))))))))))))))) -> c_0,f_1(f_1(f_1(f_1(f_1(f_1(f_1(f_1(f_1(f_1(f_1(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(x)))))))))))))))))))) -> c_0,f_1(f_1(f_1(f_1(f_1(f_1(f_1(f_1(f_1(f_1(f_1(f_1(f_0(f_0(f_0(f_0(f_0(f_0(f_0(f_0(x)))))))))))))))))))) -> c_0,f_1(f_1(f_1(f_1(f_1(f_1(f_1(f_1(f_1(f_1(f_1(f_1(f_1(f_0(f_0(f_0(f_0(f_0(f_0(f_0(x)))))))))))))))))))) -> c_0,f_1(f_1(f_1(f_1(f_1(f_1(f_1(f_1(f_1(f_1(f_1(f_1(f_1(f_1(f_0(f_0(f_0(f_0(f_0(f_0(x)))))))))))))))))))) -> c_0,f_1(f_1(f_1(f_1(f_1(f_1(f_1(f_1(f_1(f_1(f_1(f_1(f_1(f_1(f_1(f_0(f_0(f_0(f_0(f_0(x)))))))))))))))))))) -> c_0,f_1(f_1(f_1(f_1(f_1(f_1(f_1(f_1(f_1(f_1(f_1(f_1(f_1(f_1(f_1(f_1(f_0(f_0(f_0(f_0(x)))))))))))))))))))) -> c_0,f_1(f_1(f_1(f_1(f_1(f_1(f_1(f_1(f_1(f_1(f_1(f_1(f_1(f_1(f_1(f_1(f_1(f_0(f_0(f_0(x)))))))))))))))))))) -> c_0,f_1(f_1(f_1(f_1(f_1(f_1(f_1(f_1(f_1(f_1(f_1(f_1(f_1(f_1(f_1(f_1(f_1(f_1(f_0(f_0(x)))))))))))))))))))) -> c_0,f_1(f_1(f_1(f_1(f_1(f_1(f_1(f_1(f_1(f_1(f_1(f_1(f_1(f_1(f_1(f_1(f_1(f_1(f_1(f_0(x)))))))))))))))))))) -> c_0,f_1(f_1(f_1(f_1(f_1(f_1(f_1(f_1(f_1(f_1(f_1(f_1(f_1(f_1(f_1(f_1(f_1(f_1(f_1(f_1(x)))))))))))))))))))) -> c_0], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1170.trs" :
TRS {trsSignature = fromList [("*top*_1",1),("*top*_10",1),("*top*_11",1),("*top*_12",1),("*top*_13",1),("*top*_14",1),("*top*_15",1),("*top*_16",1),("*top*_17",1),("*top*_18",1),("*top*_19",1),("*top*_2",1),("*top*_20",1),("*top*_21",1),("*top*_22",1),("*top*_23",1),("*top*_24",1),("*top*_25",1),("*top*_26",1),("*top*_27",1),("*top*_28",1),("*top*_29",1),("*top*_3",1),("*top*_30",1),("*top*_4",1),("*top*_5",1),("*top*_6",1),("*top*_7",1),("*top*_8",1),("*top*_9",1),("a_31",0),("c_32",0),("f_33",1),("f_34",1),("f_35",1),("f_36",1),("f_37",1),("f_38",1),("f_39",1),("f_40",1),("f_41",1),("f_42",1),("f_43",1),("f_44",1),("f_45",1),("f_46",1),("f_47",1),("f_48",1),("f_49",1),("f_50",1),("f_51",1),("f_52",1),("f_53",1),("f_54",1),("f_55",1),("f_56",1),("f_57",1),("f_58",1),("f_59",1),("f_60",1),("f_61",1),("f_62",1)], trsVariables = fromList ["x"], trsRMap = [("*top*_1",[1]),("*top*_10",[1]),("*top*_11",[1]),("*top*_12",[1]),("*top*_13",[1]),("*top*_14",[1]),("*top*_15",[1]),("*top*_16",[1]),("*top*_17",[1]),("*top*_18",[1]),("*top*_19",[1]),("*top*_2",[1]),("*top*_20",[1]),("*top*_21",[1]),("*top*_22",[1]),("*top*_23",[1]),("*top*_24",[1]),("*top*_25",[1]),("*top*_26",[1]),("*top*_27",[1]),("*top*_28",[1]),("*top*_29",[1]),("*top*_3",[1]),("*top*_30",[1]),("*top*_4",[1]),("*top*_5",[1]),("*top*_6",[1]),("*top*_7",[1]),("*top*_8",[1]),("*top*_9",[1]),("f_61",[1]),("a_31",[]),("c_32",[]),("f_33",[1]),("f_34",[1]),("f_35",[1]),("f_36",[1]),("f_37",[1]),("f_38",[1]),("f_39",[1]),("f_40",[1]),("f_41",[1]),("f_42",[1]),("f_43",[1]),("f_44",[1]),("f_45",[1]),("f_46",[1]),("f_47",[1]),("f_48",[1]),("f_49",[1]),("f_50",[1]),("f_51",[1]),("f_52",[1]),("f_53",[1]),("f_54",[1]),("f_55",[1]),("f_56",[1]),("f_57",[1]),("f_58",[1]),("f_59",[1]),("f_60",[1]),("f_62",[])], trsRules = [*top*_1(f_34(a_31)) -> *top*_3(f_33(f_34(a_31))),*top*_10(f_41(f_40(f_39(f_38(f_37(f_36(f_35(f_33(f_34(a_31)))))))))) -> *top*_11(f_42(f_41(f_40(f_39(f_38(f_37(f_36(f_35(f_33(f_34(a_31))))))))))),*top*_11(f_42(f_41(f_40(f_39(f_38(f_37(f_36(f_35(f_33(f_34(a_31))))))))))) -> *top*_12(f_43(f_42(f_41(f_40(f_39(f_38(f_37(f_36(f_35(f_33(f_34(a_31)))))))))))),*top*_12(f_43(f_42(f_41(f_40(f_39(f_38(f_37(f_36(f_35(f_33(f_34(a_31)))))))))))) -> *top*_13(f_44(f_43(f_42(f_41(f_40(f_39(f_38(f_37(f_36(f_35(f_33(f_34(a_31))))))))))))),*top*_13(f_44(f_43(f_42(f_41(f_40(f_39(f_38(f_37(f_36(f_35(f_33(f_34(a_31))))))))))))) -> *top*_14(f_45(f_44(f_43(f_42(f_41(f_40(f_39(f_38(f_37(f_36(f_35(f_33(f_34(a_31)))))))))))))),*top*_14(f_45(f_44(f_43(f_42(f_41(f_40(f_39(f_38(f_37(f_36(f_35(f_33(f_34(a_31)))))))))))))) -> *top*_15(f_46(f_45(f_44(f_43(f_42(f_41(f_40(f_39(f_38(f_37(f_36(f_35(f_33(f_34(a_31))))))))))))))),*top*_15(f_46(f_45(f_44(f_43(f_42(f_41(f_40(f_39(f_38(f_37(f_36(f_35(f_33(f_34(a_31))))))))))))))) -> *top*_16(f_47(f_46(f_45(f_44(f_43(f_42(f_41(f_40(f_39(f_38(f_37(f_36(f_35(f_33(f_34(a_31)))))))))))))))),*top*_16(f_47(f_46(f_45(f_44(f_43(f_42(f_41(f_40(f_39(f_38(f_37(f_36(f_35(f_33(f_34(a_31)))))))))))))))) -> *top*_17(f_48(f_47(f_46(f_45(f_44(f_43(f_42(f_41(f_40(f_39(f_38(f_37(f_36(f_35(f_33(f_34(a_31))))))))))))))))),*top*_17(f_48(f_47(f_46(f_45(f_44(f_43(f_42(f_41(f_40(f_39(f_38(f_37(f_36(f_35(f_33(f_34(a_31))))))))))))))))) -> *top*_18(f_49(f_48(f_47(f_46(f_45(f_44(f_43(f_42(f_41(f_40(f_39(f_38(f_37(f_36(f_35(f_33(f_34(a_31)))))))))))))))))),*top*_18(f_49(f_48(f_47(f_46(f_45(f_44(f_43(f_42(f_41(f_40(f_39(f_38(f_37(f_36(f_35(f_33(f_34(a_31)))))))))))))))))) -> *top*_19(f_50(f_49(f_48(f_47(f_46(f_45(f_44(f_43(f_42(f_41(f_40(f_39(f_38(f_37(f_36(f_35(f_33(f_34(a_31))))))))))))))))))),*top*_19(f_50(f_49(f_48(f_47(f_46(f_45(f_44(f_43(f_42(f_41(f_40(f_39(f_38(f_37(f_36(f_35(f_33(f_34(a_31))))))))))))))))))) -> *top*_20(f_51(f_50(f_49(f_48(f_47(f_46(f_45(f_44(f_43(f_42(f_41(f_40(f_39(f_38(f_37(f_36(f_35(f_33(f_34(a_31)))))))))))))))))))),*top*_2(a_31) -> *top*_1(f_34(a_31)),*top*_20(f_51(f_50(f_49(f_48(f_47(f_46(f_45(f_44(f_43(f_42(f_41(f_40(f_39(f_38(f_37(f_36(f_35(f_33(f_34(a_31)))))))))))))))))))) -> *top*_21(f_52(f_51(f_50(f_49(f_48(f_47(f_46(f_45(f_44(f_43(f_42(f_41(f_40(f_39(f_38(f_37(f_36(f_35(f_33(f_34(a_31))))))))))))))))))))),*top*_21(f_52(f_51(f_50(f_49(f_48(f_47(f_46(f_45(f_44(f_43(f_42(f_41(f_40(f_39(f_38(f_37(f_36(f_35(f_33(f_34(a_31))))))))))))))))))))) -> *top*_22(f_53(f_52(f_51(f_50(f_49(f_48(f_47(f_46(f_45(f_44(f_43(f_42(f_41(f_40(f_39(f_38(f_37(f_36(f_35(f_33(f_34(a_31)))))))))))))))))))))),*top*_22(f_53(f_52(f_51(f_50(f_49(f_48(f_47(f_46(f_45(f_44(f_43(f_42(f_41(f_40(f_39(f_38(f_37(f_36(f_35(f_33(f_34(a_31)))))))))))))))))))))) -> *top*_23(f_54(f_53(f_52(f_51(f_50(f_49(f_48(f_47(f_46(f_45(f_44(f_43(f_42(f_41(f_40(f_39(f_38(f_37(f_36(f_35(f_33(f_34(a_31))))))))))))))))))))))),*top*_23(f_54(f_53(f_52(f_51(f_50(f_49(f_48(f_47(f_46(f_45(f_44(f_43(f_42(f_41(f_40(f_39(f_38(f_37(f_36(f_35(f_33(f_34(a_31))))))))))))))))))))))) -> *top*_24(f_55(f_54(f_53(f_52(f_51(f_50(f_49(f_48(f_47(f_46(f_45(f_44(f_43(f_42(f_41(f_40(f_39(f_38(f_37(f_36(f_35(f_33(f_34(a_31)))))))))))))))))))))))),*top*_24(f_55(f_54(f_53(f_52(f_51(f_50(f_49(f_48(f_47(f_46(f_45(f_44(f_43(f_42(f_41(f_40(f_39(f_38(f_37(f_36(f_35(f_33(f_34(a_31)))))))))))))))))))))))) -> *top*_25(f_56(f_55(f_54(f_53(f_52(f_51(f_50(f_49(f_48(f_47(f_46(f_45(f_44(f_43(f_42(f_41(f_40(f_39(f_38(f_37(f_36(f_35(f_33(f_34(a_31))))))))))))))))))))))))),*top*_25(f_56(f_55(f_54(f_53(f_52(f_51(f_50(f_49(f_48(f_47(f_46(f_45(f_44(f_43(f_42(f_41(f_40(f_39(f_38(f_37(f_36(f_35(f_33(f_34(a_31))))))))))))))))))))))))) -> *top*_26(f_57(f_56(f_55(f_54(f_53(f_52(f_51(f_50(f_49(f_48(f_47(f_46(f_45(f_44(f_43(f_42(f_41(f_40(f_39(f_38(f_37(f_36(f_35(f_33(f_34(a_31)))))))))))))))))))))))))),*top*_26(f_57(f_56(f_55(f_54(f_53(f_52(f_51(f_50(f_49(f_48(f_47(f_46(f_45(f_44(f_43(f_42(f_41(f_40(f_39(f_38(f_37(f_36(f_35(f_33(f_34(a_31)))))))))))))))))))))))))) -> *top*_27(f_58(f_57(f_56(f_55(f_54(f_53(f_52(f_51(f_50(f_49(f_48(f_47(f_46(f_45(f_44(f_43(f_42(f_41(f_40(f_39(f_38(f_37(f_36(f_35(f_33(f_34(a_31))))))))))))))))))))))))))),*top*_27(f_58(f_57(f_56(f_55(f_54(f_53(f_52(f_51(f_50(f_49(f_48(f_47(f_46(f_45(f_44(f_43(f_42(f_41(f_40(f_39(f_38(f_37(f_36(f_35(f_33(f_34(a_31))))))))))))))))))))))))))) -> *top*_28(f_59(f_58(f_57(f_56(f_55(f_54(f_53(f_52(f_51(f_50(f_49(f_48(f_47(f_46(f_45(f_44(f_43(f_42(f_41(f_40(f_39(f_38(f_37(f_36(f_35(f_33(f_34(a_31)))))))))))))))))))))))))))),*top*_28(f_59(f_58(f_57(f_56(f_55(f_54(f_53(f_52(f_51(f_50(f_49(f_48(f_47(f_46(f_45(f_44(f_43(f_42(f_41(f_40(f_39(f_38(f_37(f_36(f_35(f_33(f_34(a_31)))))))))))))))))))))))))))) -> *top*_29(f_60(f_59(f_58(f_57(f_56(f_55(f_54(f_53(f_52(f_51(f_50(f_49(f_48(f_47(f_46(f_45(f_44(f_43(f_42(f_41(f_40(f_39(f_38(f_37(f_36(f_35(f_33(f_34(a_31))))))))))))))))))))))))))))),*top*_29(f_60(f_59(f_58(f_57(f_56(f_55(f_54(f_53(f_52(f_51(f_50(f_49(f_48(f_47(f_46(f_45(f_44(f_43(f_42(f_41(f_40(f_39(f_38(f_37(f_36(f_35(f_33(f_34(a_31))))))))))))))))))))))))))))) -> *top*_30(f_61(f_60(f_59(f_58(f_57(f_56(f_55(f_54(f_53(f_52(f_51(f_50(f_49(f_48(f_47(f_46(f_45(f_44(f_43(f_42(f_41(f_40(f_39(f_38(f_37(f_36(f_35(f_33(f_34(a_31)))))))))))))))))))))))))))))),*top*_3(f_33(f_34(a_31))) -> *top*_4(f_35(f_33(f_34(a_31)))),*top*_30(f_62(f_61(f_60(f_59(f_58(f_57(f_56(f_55(f_54(f_53(f_52(f_51(f_50(f_49(f_48(f_47(f_46(f_45(f_44(f_43(f_42(f_41(f_40(f_39(f_38(f_37(f_36(f_35(f_33(f_34(x))))))))))))))))))))))))))))))) -> *top*_2(c_32),*top*_30(f_62(f_62(f_61(f_60(f_59(f_58(f_57(f_56(f_55(f_54(f_53(f_52(f_51(f_50(f_49(f_48(f_47(f_46(f_45(f_44(f_43(f_42(f_41(f_40(f_39(f_38(f_37(f_36(f_35(f_33(x))))))))))))))))))))))))))))))) -> *top*_2(c_32),*top*_30(f_62(f_62(f_62(f_61(f_60(f_59(f_58(f_57(f_56(f_55(f_54(f_53(f_52(f_51(f_50(f_49(f_48(f_47(f_46(f_45(f_44(f_43(f_42(f_41(f_40(f_39(f_38(f_37(f_36(f_35(x))))))))))))))))))))))))))))))) -> *top*_2(c_32),*top*_30(f_62(f_62(f_62(f_62(f_61(f_60(f_59(f_58(f_57(f_56(f_55(f_54(f_53(f_52(f_51(f_50(f_49(f_48(f_47(f_46(f_45(f_44(f_43(f_42(f_41(f_40(f_39(f_38(f_37(f_36(x))))))))))))))))))))))))))))))) -> *top*_2(c_32),*top*_30(f_62(f_62(f_62(f_62(f_62(f_61(f_60(f_59(f_58(f_57(f_56(f_55(f_54(f_53(f_52(f_51(f_50(f_49(f_48(f_47(f_46(f_45(f_44(f_43(f_42(f_41(f_40(f_39(f_38(f_37(x))))))))))))))))))))))))))))))) -> *top*_2(c_32),*top*_30(f_62(f_62(f_62(f_62(f_62(f_62(f_61(f_60(f_59(f_58(f_57(f_56(f_55(f_54(f_53(f_52(f_51(f_50(f_49(f_48(f_47(f_46(f_45(f_44(f_43(f_42(f_41(f_40(f_39(f_38(x))))))))))))))))))))))))))))))) -> *top*_2(c_32),*top*_30(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_61(f_60(f_59(f_58(f_57(f_56(f_55(f_54(f_53(f_52(f_51(f_50(f_49(f_48(f_47(f_46(f_45(f_44(f_43(f_42(f_41(f_40(f_39(x))))))))))))))))))))))))))))))) -> *top*_2(c_32),*top*_30(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_61(f_60(f_59(f_58(f_57(f_56(f_55(f_54(f_53(f_52(f_51(f_50(f_49(f_48(f_47(f_46(f_45(f_44(f_43(f_42(f_41(f_40(x))))))))))))))))))))))))))))))) -> *top*_2(c_32),*top*_30(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_61(f_60(f_59(f_58(f_57(f_56(f_55(f_54(f_53(f_52(f_51(f_50(f_49(f_48(f_47(f_46(f_45(f_44(f_43(f_42(f_41(x))))))))))))))))))))))))))))))) -> *top*_2(c_32),*top*_30(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_61(f_60(f_59(f_58(f_57(f_56(f_55(f_54(f_53(f_52(f_51(f_50(f_49(f_48(f_47(f_46(f_45(f_44(f_43(f_42(x))))))))))))))))))))))))))))))) -> *top*_2(c_32),*top*_30(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_61(f_60(f_59(f_58(f_57(f_56(f_55(f_54(f_53(f_52(f_51(f_50(f_49(f_48(f_47(f_46(f_45(f_44(f_43(x))))))))))))))))))))))))))))))) -> *top*_2(c_32),*top*_30(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_61(f_60(f_59(f_58(f_57(f_56(f_55(f_54(f_53(f_52(f_51(f_50(f_49(f_48(f_47(f_46(f_45(f_44(x))))))))))))))))))))))))))))))) -> *top*_2(c_32),*top*_30(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_61(f_60(f_59(f_58(f_57(f_56(f_55(f_54(f_53(f_52(f_51(f_50(f_49(f_48(f_47(f_46(f_45(x))))))))))))))))))))))))))))))) -> *top*_2(c_32),*top*_30(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_61(f_60(f_59(f_58(f_57(f_56(f_55(f_54(f_53(f_52(f_51(f_50(f_49(f_48(f_47(f_46(x))))))))))))))))))))))))))))))) -> *top*_2(c_32),*top*_30(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_61(f_60(f_59(f_58(f_57(f_56(f_55(f_54(f_53(f_52(f_51(f_50(f_49(f_48(f_47(x))))))))))))))))))))))))))))))) -> *top*_2(c_32),*top*_30(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_61(f_60(f_59(f_58(f_57(f_56(f_55(f_54(f_53(f_52(f_51(f_50(f_49(f_48(x))))))))))))))))))))))))))))))) -> *top*_2(c_32),*top*_30(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_61(f_60(f_59(f_58(f_57(f_56(f_55(f_54(f_53(f_52(f_51(f_50(f_49(x))))))))))))))))))))))))))))))) -> *top*_2(c_32),*top*_30(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_61(f_60(f_59(f_58(f_57(f_56(f_55(f_54(f_53(f_52(f_51(f_50(x))))))))))))))))))))))))))))))) -> *top*_2(c_32),*top*_30(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_61(f_60(f_59(f_58(f_57(f_56(f_55(f_54(f_53(f_52(f_51(x))))))))))))))))))))))))))))))) -> *top*_2(c_32),*top*_30(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_61(f_60(f_59(f_58(f_57(f_56(f_55(f_54(f_53(f_52(x))))))))))))))))))))))))))))))) -> *top*_2(c_32),*top*_30(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_61(f_60(f_59(f_58(f_57(f_56(f_55(f_54(f_53(x))))))))))))))))))))))))))))))) -> *top*_2(c_32),*top*_30(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_61(f_60(f_59(f_58(f_57(f_56(f_55(f_54(x))))))))))))))))))))))))))))))) -> *top*_2(c_32),*top*_30(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_61(f_60(f_59(f_58(f_57(f_56(f_55(x))))))))))))))))))))))))))))))) -> *top*_2(c_32),*top*_30(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_61(f_60(f_59(f_58(f_57(f_56(x))))))))))))))))))))))))))))))) -> *top*_2(c_32),*top*_30(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_61(f_60(f_59(f_58(f_57(x))))))))))))))))))))))))))))))) -> *top*_2(c_32),*top*_30(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_61(f_60(f_59(f_58(x))))))))))))))))))))))))))))))) -> *top*_2(c_32),*top*_30(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_61(f_60(f_59(x))))))))))))))))))))))))))))))) -> *top*_2(c_32),*top*_30(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_61(f_60(x))))))))))))))))))))))))))))))) -> *top*_2(c_32),*top*_30(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_61(x))))))))))))))))))))))))))))))) -> *top*_2(c_32),*top*_30(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(f_62(x))))))))))))))))))))))))))))))) -> *top*_2(c_32),*top*_4(f_35(f_33(f_34(a_31)))) -> *top*_5(f_36(f_35(f_33(f_34(a_31))))),*top*_5(f_36(f_35(f_33(f_34(a_31))))) -> *top*_6(f_37(f_36(f_35(f_33(f_34(a_31)))))),*top*_6(f_37(f_36(f_35(f_33(f_34(a_31)))))) -> *top*_7(f_38(f_37(f_36(f_35(f_33(f_34(a_31))))))),*top*_7(f_38(f_37(f_36(f_35(f_33(f_34(a_31))))))) -> *top*_8(f_39(f_38(f_37(f_36(f_35(f_33(f_34(a_31)))))))),*top*_8(f_39(f_38(f_37(f_36(f_35(f_33(f_34(a_31)))))))) -> *top*_9(f_40(f_39(f_38(f_37(f_36(f_35(f_33(f_34(a_31))))))))),*top*_9(f_40(f_39(f_38(f_37(f_36(f_35(f_33(f_34(a_31))))))))) -> *top*_10(f_41(f_40(f_39(f_38(f_37(f_36(f_35(f_33(f_34(a_31)))))))))),f_61(f_60(f_59(f_58(f_57(f_56(f_55(f_54(f_53(f_52(f_51(f_50(f_49(f_48(f_47(f_46(f_45(f_44(f_43(f_42(f_41(f_40(f_39(f_38(f_37(f_36(f_35(f_33(f_34(a_31))))))))))))))))))))))))))))) -> f_62(f_61(f_60(f_59(f_58(f_57(f_56(f_55(f_54(f_53(f_52(f_51(f_50(f_49(f_48(f_47(f_46(f_45(f_44(f_43(f_42(f_41(f_40(f_39(f_38(f_37(f_36(f_35(f_33(f_34(a_31))))))))))))))))))))))))))))))], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1169.trs" :
TRS {trsSignature = fromList [("*top*_0",1),("a_1",0),("c_0",0),("f_0",1),("f_1",1)], trsVariables = fromList ["x"], trsRMap = [("*top*_0",[1]),("f_0",[1]),("f_1",[]),("a_1",[]),("c_0",[])], trsRules = [*top*_0(f_0(f_0(a_1))) -> *top*_0(f_0(f_0(f_0(a_1)))),*top*_0(f_0(a_1)) -> *top*_0(f_0(f_0(a_1))),*top*_0(a_1) -> *top*_0(f_0(a_1)),f_0(f_0(f_0(a_1))) -> f_1(f_0(f_0(f_0(a_1)))),f_1(f_0(f_0(f_0(x)))) -> c_0,f_1(f_1(f_0(f_0(x)))) -> c_0,f_1(f_1(f_1(f_0(x)))) -> c_0,f_1(f_1(f_1(f_1(x)))) -> c_0], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1168.trs" :
TRS {trsSignature = fromList [("*top*_1",1),("*top*_10",1),("*top*_11",1),("*top*_12",1),("*top*_13",1),("*top*_14",1),("*top*_15",1),("*top*_16",1),("*top*_17",1),("*top*_18",1),("*top*_19",1),("*top*_2",1),("*top*_20",1),("*top*_21",1),("*top*_22",1),("*top*_23",1),("*top*_24",1),("*top*_25",1),("*top*_26",1),("*top*_27",1),("*top*_28",1),("*top*_29",1),("*top*_3",1),("*top*_30",1),("*top*_31",1),("*top*_32",1),("*top*_33",1),("*top*_34",1),("*top*_35",1),("*top*_36",1),("*top*_37",1),("*top*_38",1),("*top*_39",1),("*top*_4",1),("*top*_40",1),("*top*_5",1),("*top*_6",1),("*top*_7",1),("*top*_8",1),("*top*_9",1),("a_41",0),("c_42",0),("f_43",1),("f_44",1),("f_45",1),("f_46",1),("f_47",1),("f_48",1),("f_49",1),("f_50",1),("f_51",1),("f_52",1),("f_53",1),("f_54",1),("f_55",1),("f_56",1),("f_57",1),("f_58",1),("f_59",1),("f_60",1),("f_61",1),("f_62",1),("f_63",1),("f_64",1),("f_65",1),("f_66",1),("f_67",1),("f_68",1),("f_69",1),("f_70",1),("f_71",1),("f_72",1),("f_73",1),("f_74",1),("f_75",1),("f_76",1),("f_77",1),("f_78",1),("f_79",1),("f_80",1),("f_81",1),("f_82",1)], trsVariables = fromList ["x"], trsRMap = [("*top*_1",[1]),("*top*_10",[1]),("*top*_11",[1]),("*top*_12",[1]),("*top*_13",[1]),("*top*_14",[1]),("*top*_15",[1]),("*top*_16",[1]),("*top*_17",[1]),("*top*_18",[1]),("*top*_19",[1]),("*top*_2",[1]),("*top*_20",[1]),("*top*_21",[1]),("*top*_22",[1]),("*top*_23",[1]),("*top*_24",[1]),("*top*_25",[1]),("*top*_26",[1]),("*top*_27",[1]),("*top*_28",[1]),("*top*_29",[1]),("*top*_3",[1]),("*top*_30",[1]),("*top*_31",[1]),("*top*_32",[1]),("*top*_33",[1]),("*top*_34",[1]),("*top*_35",[1]),("*top*_36",[1]),("*top*_37",[1]),("*top*_38",[1]),("*top*_39",[1]),("*top*_4",[1]),("*top*_40",[1]),("*top*_5",[1]),("*top*_6",[1]),("*top*_7",[1]),("*top*_8",[1]),("*top*_9",[1]),("f_81",[1]),("a_41",[]),("c_42",[]),("f_43",[1]),("f_44",[1]),("f_45",[1]),("f_46",[1]),("f_47",[1]),("f_48",[1]),("f_49",[1]),("f_50",[1]),("f_51",[1]),("f_52",[1]),("f_53",[1]),("f_54",[1]),("f_55",[1]),("f_56",[1]),("f_57",[1]),("f_58",[1]),("f_59",[1]),("f_60",[1]),("f_61",[1]),("f_62",[1]),("f_63",[1]),("f_64",[1]),("f_65",[1]),("f_66",[1]),("f_67",[1]),("f_68",[1]),("f_69",[1]),("f_70",[1]),("f_71",[1]),("f_72",[1]),("f_73",[1]),("f_74",[1]),("f_75",[1]),("f_76",[1]),("f_77",[1]),("f_78",[1]),("f_79",[1]),("f_80",[1]),("f_82",[])], trsRules = [*top*_1(f_44(a_41)) -> *top*_3(f_43(f_44(a_41))),*top*_10(f_51(f_50(f_49(f_48(f_47(f_46(f_45(f_43(f_44(a_41)))))))))) -> *top*_11(f_52(f_51(f_50(f_49(f_48(f_47(f_46(f_45(f_43(f_44(a_41))))))))))),*top*_11(f_52(f_51(f_50(f_49(f_48(f_47(f_46(f_45(f_43(f_44(a_41))))))))))) -> *top*_12(f_53(f_52(f_51(f_50(f_49(f_48(f_47(f_46(f_45(f_43(f_44(a_41)))))))))))),*top*_12(f_53(f_52(f_51(f_50(f_49(f_48(f_47(f_46(f_45(f_43(f_44(a_41)))))))))))) -> *top*_13(f_54(f_53(f_52(f_51(f_50(f_49(f_48(f_47(f_46(f_45(f_43(f_44(a_41))))))))))))),*top*_13(f_54(f_53(f_52(f_51(f_50(f_49(f_48(f_47(f_46(f_45(f_43(f_44(a_41))))))))))))) -> *top*_14(f_55(f_54(f_53(f_52(f_51(f_50(f_49(f_48(f_47(f_46(f_45(f_43(f_44(a_41)))))))))))))),*top*_14(f_55(f_54(f_53(f_52(f_51(f_50(f_49(f_48(f_47(f_46(f_45(f_43(f_44(a_41)))))))))))))) -> *top*_15(f_56(f_55(f_54(f_53(f_52(f_51(f_50(f_49(f_48(f_47(f_46(f_45(f_43(f_44(a_41))))))))))))))),*top*_15(f_56(f_55(f_54(f_53(f_52(f_51(f_50(f_49(f_48(f_47(f_46(f_45(f_43(f_44(a_41))))))))))))))) -> *top*_16(f_57(f_56(f_55(f_54(f_53(f_52(f_51(f_50(f_49(f_48(f_47(f_46(f_45(f_43(f_44(a_41)))))))))))))))),*top*_16(f_57(f_56(f_55(f_54(f_53(f_52(f_51(f_50(f_49(f_48(f_47(f_46(f_45(f_43(f_44(a_41)))))))))))))))) -> *top*_17(f_58(f_57(f_56(f_55(f_54(f_53(f_52(f_51(f_50(f_49(f_48(f_47(f_46(f_45(f_43(f_44(a_41))))))))))))))))),*top*_17(f_58(f_57(f_56(f_55(f_54(f_53(f_52(f_51(f_50(f_49(f_48(f_47(f_46(f_45(f_43(f_44(a_41))))))))))))))))) -> *top*_18(f_59(f_58(f_57(f_56(f_55(f_54(f_53(f_52(f_51(f_50(f_49(f_48(f_47(f_46(f_45(f_43(f_44(a_41)))))))))))))))))),*top*_18(f_59(f_58(f_57(f_56(f_55(f_54(f_53(f_52(f_51(f_50(f_49(f_48(f_47(f_46(f_45(f_43(f_44(a_41)))))))))))))))))) -> *top*_19(f_60(f_59(f_58(f_57(f_56(f_55(f_54(f_53(f_52(f_51(f_50(f_49(f_48(f_47(f_46(f_45(f_43(f_44(a_41))))))))))))))))))),*top*_19(f_60(f_59(f_58(f_57(f_56(f_55(f_54(f_53(f_52(f_51(f_50(f_49(f_48(f_47(f_46(f_45(f_43(f_44(a_41))))))))))))))))))) -> *top*_20(f_61(f_60(f_59(f_58(f_57(f_56(f_55(f_54(f_53(f_52(f_51(f_50(f_49(f_48(f_47(f_46(f_45(f_43(f_44(a_41)))))))))))))))))))),*top*_2(a_41) -> *top*_1(f_44(a_41)),*top*_20(f_61(f_60(f_59(f_58(f_57(f_56(f_55(f_54(f_53(f_52(f_51(f_50(f_49(f_48(f_47(f_46(f_45(f_43(f_44(a_41)))))))))))))))))))) -> *top*_21(f_62(f_61(f_60(f_59(f_58(f_57(f_56(f_55(f_54(f_53(f_52(f_51(f_50(f_49(f_48(f_47(f_46(f_45(f_43(f_44(a_41))))))))))))))))))))),*top*_21(f_62(f_61(f_60(f_59(f_58(f_57(f_56(f_55(f_54(f_53(f_52(f_51(f_50(f_49(f_48(f_47(f_46(f_45(f_43(f_44(a_41))))))))))))))))))))) -> *top*_22(f_63(f_62(f_61(f_60(f_59(f_58(f_57(f_56(f_55(f_54(f_53(f_52(f_51(f_50(f_49(f_48(f_47(f_46(f_45(f_43(f_44(a_41)))))))))))))))))))))),*top*_22(f_63(f_62(f_61(f_60(f_59(f_58(f_57(f_56(f_55(f_54(f_53(f_52(f_51(f_50(f_49(f_48(f_47(f_46(f_45(f_43(f_44(a_41)))))))))))))))))))))) -> *top*_23(f_64(f_63(f_62(f_61(f_60(f_59(f_58(f_57(f_56(f_55(f_54(f_53(f_52(f_51(f_50(f_49(f_48(f_47(f_46(f_45(f_43(f_44(a_41))))))))))))))))))))))),*top*_23(f_64(f_63(f_62(f_61(f_60(f_59(f_58(f_57(f_56(f_55(f_54(f_53(f_52(f_51(f_50(f_49(f_48(f_47(f_46(f_45(f_43(f_44(a_41))))))))))))))))))))))) -> *top*_24(f_65(f_64(f_63(f_62(f_61(f_60(f_59(f_58(f_57(f_56(f_55(f_54(f_53(f_52(f_51(f_50(f_49(f_48(f_47(f_46(f_45(f_43(f_44(a_41)))))))))))))))))))))))),*top*_24(f_65(f_64(f_63(f_62(f_61(f_60(f_59(f_58(f_57(f_56(f_55(f_54(f_53(f_52(f_51(f_50(f_49(f_48(f_47(f_46(f_45(f_43(f_44(a_41)))))))))))))))))))))))) -> *top*_25(f_66(f_65(f_64(f_63(f_62(f_61(f_60(f_59(f_58(f_57(f_56(f_55(f_54(f_53(f_52(f_51(f_50(f_49(f_48(f_47(f_46(f_45(f_43(f_44(a_41))))))))))))))))))))))))),*top*_25(f_66(f_65(f_64(f_63(f_62(f_61(f_60(f_59(f_58(f_57(f_56(f_55(f_54(f_53(f_52(f_51(f_50(f_49(f_48(f_47(f_46(f_45(f_43(f_44(a_41))))))))))))))))))))))))) -> *top*_26(f_67(f_66(f_65(f_64(f_63(f_62(f_61(f_60(f_59(f_58(f_57(f_56(f_55(f_54(f_53(f_52(f_51(f_50(f_49(f_48(f_47(f_46(f_45(f_43(f_44(a_41)))))))))))))))))))))))))),*top*_26(f_67(f_66(f_65(f_64(f_63(f_62(f_61(f_60(f_59(f_58(f_57(f_56(f_55(f_54(f_53(f_52(f_51(f_50(f_49(f_48(f_47(f_46(f_45(f_43(f_44(a_41)))))))))))))))))))))))))) -> *top*_27(f_68(f_67(f_66(f_65(f_64(f_63(f_62(f_61(f_60(f_59(f_58(f_57(f_56(f_55(f_54(f_53(f_52(f_51(f_50(f_49(f_48(f_47(f_46(f_45(f_43(f_44(a_41))))))))))))))))))))))))))),*top*_27(f_68(f_67(f_66(f_65(f_64(f_63(f_62(f_61(f_60(f_59(f_58(f_57(f_56(f_55(f_54(f_53(f_52(f_51(f_50(f_49(f_48(f_47(f_46(f_45(f_43(f_44(a_41))))))))))))))))))))))))))) -> *top*_28(f_69(f_68(f_67(f_66(f_65(f_64(f_63(f_62(f_61(f_60(f_59(f_58(f_57(f_56(f_55(f_54(f_53(f_52(f_51(f_50(f_49(f_48(f_47(f_46(f_45(f_43(f_44(a_41)))))))))))))))))))))))))))),*top*_28(f_69(f_68(f_67(f_66(f_65(f_64(f_63(f_62(f_61(f_60(f_59(f_58(f_57(f_56(f_55(f_54(f_53(f_52(f_51(f_50(f_49(f_48(f_47(f_46(f_45(f_43(f_44(a_41)))))))))))))))))))))))))))) -> *top*_29(f_70(f_69(f_68(f_67(f_66(f_65(f_64(f_63(f_62(f_61(f_60(f_59(f_58(f_57(f_56(f_55(f_54(f_53(f_52(f_51(f_50(f_49(f_48(f_47(f_46(f_45(f_43(f_44(a_41))))))))))))))))))))))))))))),*top*_29(f_70(f_69(f_68(f_67(f_66(f_65(f_64(f_63(f_62(f_61(f_60(f_59(f_58(f_57(f_56(f_55(f_54(f_53(f_52(f_51(f_50(f_49(f_48(f_47(f_46(f_45(f_43(f_44(a_41))))))))))))))))))))))))))))) -> *top*_30(f_71(f_70(f_69(f_68(f_67(f_66(f_65(f_64(f_63(f_62(f_61(f_60(f_59(f_58(f_57(f_56(f_55(f_54(f_53(f_52(f_51(f_50(f_49(f_48(f_47(f_46(f_45(f_43(f_44(a_41)))))))))))))))))))))))))))))),*top*_3(f_43(f_44(a_41))) -> *top*_4(f_45(f_43(f_44(a_41)))),*top*_30(f_71(f_70(f_69(f_68(f_67(f_66(f_65(f_64(f_63(f_62(f_61(f_60(f_59(f_58(f_57(f_56(f_55(f_54(f_53(f_52(f_51(f_50(f_49(f_48(f_47(f_46(f_45(f_43(f_44(a_41)))))))))))))))))))))))))))))) -> *top*_31(f_72(f_71(f_70(f_69(f_68(f_67(f_66(f_65(f_64(f_63(f_62(f_61(f_60(f_59(f_58(f_57(f_56(f_55(f_54(f_53(f_52(f_51(f_50(f_49(f_48(f_47(f_46(f_45(f_43(f_44(a_41))))))))))))))))))))))))))))))),*top*_31(f_72(f_71(f_70(f_69(f_68(f_67(f_66(f_65(f_64(f_63(f_62(f_61(f_60(f_59(f_58(f_57(f_56(f_55(f_54(f_53(f_52(f_51(f_50(f_49(f_48(f_47(f_46(f_45(f_43(f_44(a_41))))))))))))))))))))))))))))))) -> *top*_32(f_73(f_72(f_71(f_70(f_69(f_68(f_67(f_66(f_65(f_64(f_63(f_62(f_61(f_60(f_59(f_58(f_57(f_56(f_55(f_54(f_53(f_52(f_51(f_50(f_49(f_48(f_47(f_46(f_45(f_43(f_44(a_41)))))))))))))))))))))))))))))))),*top*_32(f_73(f_72(f_71(f_70(f_69(f_68(f_67(f_66(f_65(f_64(f_63(f_62(f_61(f_60(f_59(f_58(f_57(f_56(f_55(f_54(f_53(f_52(f_51(f_50(f_49(f_48(f_47(f_46(f_45(f_43(f_44(a_41)))))))))))))))))))))))))))))))) -> *top*_33(f_74(f_73(f_72(f_71(f_70(f_69(f_68(f_67(f_66(f_65(f_64(f_63(f_62(f_61(f_60(f_59(f_58(f_57(f_56(f_55(f_54(f_53(f_52(f_51(f_50(f_49(f_48(f_47(f_46(f_45(f_43(f_44(a_41))))))))))))))))))))))))))))))))),*top*_33(f_74(f_73(f_72(f_71(f_70(f_69(f_68(f_67(f_66(f_65(f_64(f_63(f_62(f_61(f_60(f_59(f_58(f_57(f_56(f_55(f_54(f_53(f_52(f_51(f_50(f_49(f_48(f_47(f_46(f_45(f_43(f_44(a_41))))))))))))))))))))))))))))))))) -> *top*_34(f_75(f_74(f_73(f_72(f_71(f_70(f_69(f_68(f_67(f_66(f_65(f_64(f_63(f_62(f_61(f_60(f_59(f_58(f_57(f_56(f_55(f_54(f_53(f_52(f_51(f_50(f_49(f_48(f_47(f_46(f_45(f_43(f_44(a_41)))))))))))))))))))))))))))))))))),*top*_34(f_75(f_74(f_73(f_72(f_71(f_70(f_69(f_68(f_67(f_66(f_65(f_64(f_63(f_62(f_61(f_60(f_59(f_58(f_57(f_56(f_55(f_54(f_53(f_52(f_51(f_50(f_49(f_48(f_47(f_46(f_45(f_43(f_44(a_41)))))))))))))))))))))))))))))))))) -> *top*_35(f_76(f_75(f_74(f_73(f_72(f_71(f_70(f_69(f_68(f_67(f_66(f_65(f_64(f_63(f_62(f_61(f_60(f_59(f_58(f_57(f_56(f_55(f_54(f_53(f_52(f_51(f_50(f_49(f_48(f_47(f_46(f_45(f_43(f_44(a_41))))))))))))))))))))))))))))))))))),*top*_35(f_76(f_75(f_74(f_73(f_72(f_71(f_70(f_69(f_68(f_67(f_66(f_65(f_64(f_63(f_62(f_61(f_60(f_59(f_58(f_57(f_56(f_55(f_54(f_53(f_52(f_51(f_50(f_49(f_48(f_47(f_46(f_45(f_43(f_44(a_41))))))))))))))))))))))))))))))))))) -> *top*_36(f_77(f_76(f_75(f_74(f_73(f_72(f_71(f_70(f_69(f_68(f_67(f_66(f_65(f_64(f_63(f_62(f_61(f_60(f_59(f_58(f_57(f_56(f_55(f_54(f_53(f_52(f_51(f_50(f_49(f_48(f_47(f_46(f_45(f_43(f_44(a_41)))))))))))))))))))))))))))))))))))),*top*_36(f_77(f_76(f_75(f_74(f_73(f_72(f_71(f_70(f_69(f_68(f_67(f_66(f_65(f_64(f_63(f_62(f_61(f_60(f_59(f_58(f_57(f_56(f_55(f_54(f_53(f_52(f_51(f_50(f_49(f_48(f_47(f_46(f_45(f_43(f_44(a_41)))))))))))))))))))))))))))))))))))) -> *top*_37(f_78(f_77(f_76(f_75(f_74(f_73(f_72(f_71(f_70(f_69(f_68(f_67(f_66(f_65(f_64(f_63(f_62(f_61(f_60(f_59(f_58(f_57(f_56(f_55(f_54(f_53(f_52(f_51(f_50(f_49(f_48(f_47(f_46(f_45(f_43(f_44(a_41))))))))))))))))))))))))))))))))))))),*top*_37(f_78(f_77(f_76(f_75(f_74(f_73(f_72(f_71(f_70(f_69(f_68(f_67(f_66(f_65(f_64(f_63(f_62(f_61(f_60(f_59(f_58(f_57(f_56(f_55(f_54(f_53(f_52(f_51(f_50(f_49(f_48(f_47(f_46(f_45(f_43(f_44(a_41))))))))))))))))))))))))))))))))))))) -> *top*_38(f_79(f_78(f_77(f_76(f_75(f_74(f_73(f_72(f_71(f_70(f_69(f_68(f_67(f_66(f_65(f_64(f_63(f_62(f_61(f_60(f_59(f_58(f_57(f_56(f_55(f_54(f_53(f_52(f_51(f_50(f_49(f_48(f_47(f_46(f_45(f_43(f_44(a_41)))))))))))))))))))))))))))))))))))))),*top*_38(f_79(f_78(f_77(f_76(f_75(f_74(f_73(f_72(f_71(f_70(f_69(f_68(f_67(f_66(f_65(f_64(f_63(f_62(f_61(f_60(f_59(f_58(f_57(f_56(f_55(f_54(f_53(f_52(f_51(f_50(f_49(f_48(f_47(f_46(f_45(f_43(f_44(a_41)))))))))))))))))))))))))))))))))))))) -> *top*_39(f_80(f_79(f_78(f_77(f_76(f_75(f_74(f_73(f_72(f_71(f_70(f_69(f_68(f_67(f_66(f_65(f_64(f_63(f_62(f_61(f_60(f_59(f_58(f_57(f_56(f_55(f_54(f_53(f_52(f_51(f_50(f_49(f_48(f_47(f_46(f_45(f_43(f_44(a_41))))))))))))))))))))))))))))))))))))))),*top*_39(f_80(f_79(f_78(f_77(f_76(f_75(f_74(f_73(f_72(f_71(f_70(f_69(f_68(f_67(f_66(f_65(f_64(f_63(f_62(f_61(f_60(f_59(f_58(f_57(f_56(f_55(f_54(f_53(f_52(f_51(f_50(f_49(f_48(f_47(f_46(f_45(f_43(f_44(a_41))))))))))))))))))))))))))))))))))))))) -> *top*_40(f_81(f_80(f_79(f_78(f_77(f_76(f_75(f_74(f_73(f_72(f_71(f_70(f_69(f_68(f_67(f_66(f_65(f_64(f_63(f_62(f_61(f_60(f_59(f_58(f_57(f_56(f_55(f_54(f_53(f_52(f_51(f_50(f_49(f_48(f_47(f_46(f_45(f_43(f_44(a_41)))))))))))))))))))))))))))))))))))))))),*top*_4(f_45(f_43(f_44(a_41)))) -> *top*_5(f_46(f_45(f_43(f_44(a_41))))),*top*_40(f_82(f_81(f_80(f_79(f_78(f_77(f_76(f_75(f_74(f_73(f_72(f_71(f_70(f_69(f_68(f_67(f_66(f_65(f_64(f_63(f_62(f_61(f_60(f_59(f_58(f_57(f_56(f_55(f_54(f_53(f_52(f_51(f_50(f_49(f_48(f_47(f_46(f_45(f_43(f_44(x))))))))))))))))))))))))))))))))))))))))) -> *top*_2(c_42),*top*_40(f_82(f_82(f_81(f_80(f_79(f_78(f_77(f_76(f_75(f_74(f_73(f_72(f_71(f_70(f_69(f_68(f_67(f_66(f_65(f_64(f_63(f_62(f_61(f_60(f_59(f_58(f_57(f_56(f_55(f_54(f_53(f_52(f_51(f_50(f_49(f_48(f_47(f_46(f_45(f_43(x))))))))))))))))))))))))))))))))))))))))) -> *top*_2(c_42),*top*_40(f_82(f_82(f_82(f_81(f_80(f_79(f_78(f_77(f_76(f_75(f_74(f_73(f_72(f_71(f_70(f_69(f_68(f_67(f_66(f_65(f_64(f_63(f_62(f_61(f_60(f_59(f_58(f_57(f_56(f_55(f_54(f_53(f_52(f_51(f_50(f_49(f_48(f_47(f_46(f_45(x))))))))))))))))))))))))))))))))))))))))) -> *top*_2(c_42),*top*_40(f_82(f_82(f_82(f_82(f_81(f_80(f_79(f_78(f_77(f_76(f_75(f_74(f_73(f_72(f_71(f_70(f_69(f_68(f_67(f_66(f_65(f_64(f_63(f_62(f_61(f_60(f_59(f_58(f_57(f_56(f_55(f_54(f_53(f_52(f_51(f_50(f_49(f_48(f_47(f_46(x))))))))))))))))))))))))))))))))))))))))) -> *top*_2(c_42),*top*_40(f_82(f_82(f_82(f_82(f_82(f_81(f_80(f_79(f_78(f_77(f_76(f_75(f_74(f_73(f_72(f_71(f_70(f_69(f_68(f_67(f_66(f_65(f_64(f_63(f_62(f_61(f_60(f_59(f_58(f_57(f_56(f_55(f_54(f_53(f_52(f_51(f_50(f_49(f_48(f_47(x))))))))))))))))))))))))))))))))))))))))) -> *top*_2(c_42),*top*_40(f_82(f_82(f_82(f_82(f_82(f_82(f_81(f_80(f_79(f_78(f_77(f_76(f_75(f_74(f_73(f_72(f_71(f_70(f_69(f_68(f_67(f_66(f_65(f_64(f_63(f_62(f_61(f_60(f_59(f_58(f_57(f_56(f_55(f_54(f_53(f_52(f_51(f_50(f_49(f_48(x))))))))))))))))))))))))))))))))))))))))) -> *top*_2(c_42),*top*_40(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_81(f_80(f_79(f_78(f_77(f_76(f_75(f_74(f_73(f_72(f_71(f_70(f_69(f_68(f_67(f_66(f_65(f_64(f_63(f_62(f_61(f_60(f_59(f_58(f_57(f_56(f_55(f_54(f_53(f_52(f_51(f_50(f_49(x))))))))))))))))))))))))))))))))))))))))) -> *top*_2(c_42),*top*_40(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_81(f_80(f_79(f_78(f_77(f_76(f_75(f_74(f_73(f_72(f_71(f_70(f_69(f_68(f_67(f_66(f_65(f_64(f_63(f_62(f_61(f_60(f_59(f_58(f_57(f_56(f_55(f_54(f_53(f_52(f_51(f_50(x))))))))))))))))))))))))))))))))))))))))) -> *top*_2(c_42),*top*_40(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_81(f_80(f_79(f_78(f_77(f_76(f_75(f_74(f_73(f_72(f_71(f_70(f_69(f_68(f_67(f_66(f_65(f_64(f_63(f_62(f_61(f_60(f_59(f_58(f_57(f_56(f_55(f_54(f_53(f_52(f_51(x))))))))))))))))))))))))))))))))))))))))) -> *top*_2(c_42),*top*_40(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_81(f_80(f_79(f_78(f_77(f_76(f_75(f_74(f_73(f_72(f_71(f_70(f_69(f_68(f_67(f_66(f_65(f_64(f_63(f_62(f_61(f_60(f_59(f_58(f_57(f_56(f_55(f_54(f_53(f_52(x))))))))))))))))))))))))))))))))))))))))) -> *top*_2(c_42),*top*_40(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_81(f_80(f_79(f_78(f_77(f_76(f_75(f_74(f_73(f_72(f_71(f_70(f_69(f_68(f_67(f_66(f_65(f_64(f_63(f_62(f_61(f_60(f_59(f_58(f_57(f_56(f_55(f_54(f_53(x))))))))))))))))))))))))))))))))))))))))) -> *top*_2(c_42),*top*_40(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_81(f_80(f_79(f_78(f_77(f_76(f_75(f_74(f_73(f_72(f_71(f_70(f_69(f_68(f_67(f_66(f_65(f_64(f_63(f_62(f_61(f_60(f_59(f_58(f_57(f_56(f_55(f_54(x))))))))))))))))))))))))))))))))))))))))) -> *top*_2(c_42),*top*_40(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_81(f_80(f_79(f_78(f_77(f_76(f_75(f_74(f_73(f_72(f_71(f_70(f_69(f_68(f_67(f_66(f_65(f_64(f_63(f_62(f_61(f_60(f_59(f_58(f_57(f_56(f_55(x))))))))))))))))))))))))))))))))))))))))) -> *top*_2(c_42),*top*_40(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_81(f_80(f_79(f_78(f_77(f_76(f_75(f_74(f_73(f_72(f_71(f_70(f_69(f_68(f_67(f_66(f_65(f_64(f_63(f_62(f_61(f_60(f_59(f_58(f_57(f_56(x))))))))))))))))))))))))))))))))))))))))) -> *top*_2(c_42),*top*_40(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_81(f_80(f_79(f_78(f_77(f_76(f_75(f_74(f_73(f_72(f_71(f_70(f_69(f_68(f_67(f_66(f_65(f_64(f_63(f_62(f_61(f_60(f_59(f_58(f_57(x))))))))))))))))))))))))))))))))))))))))) -> *top*_2(c_42),*top*_40(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_81(f_80(f_79(f_78(f_77(f_76(f_75(f_74(f_73(f_72(f_71(f_70(f_69(f_68(f_67(f_66(f_65(f_64(f_63(f_62(f_61(f_60(f_59(f_58(x))))))))))))))))))))))))))))))))))))))))) -> *top*_2(c_42),*top*_40(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_81(f_80(f_79(f_78(f_77(f_76(f_75(f_74(f_73(f_72(f_71(f_70(f_69(f_68(f_67(f_66(f_65(f_64(f_63(f_62(f_61(f_60(f_59(x))))))))))))))))))))))))))))))))))))))))) -> *top*_2(c_42),*top*_40(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_81(f_80(f_79(f_78(f_77(f_76(f_75(f_74(f_73(f_72(f_71(f_70(f_69(f_68(f_67(f_66(f_65(f_64(f_63(f_62(f_61(f_60(x))))))))))))))))))))))))))))))))))))))))) -> *top*_2(c_42),*top*_40(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_81(f_80(f_79(f_78(f_77(f_76(f_75(f_74(f_73(f_72(f_71(f_70(f_69(f_68(f_67(f_66(f_65(f_64(f_63(f_62(f_61(x))))))))))))))))))))))))))))))))))))))))) -> *top*_2(c_42),*top*_40(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_81(f_80(f_79(f_78(f_77(f_76(f_75(f_74(f_73(f_72(f_71(f_70(f_69(f_68(f_67(f_66(f_65(f_64(f_63(f_62(x))))))))))))))))))))))))))))))))))))))))) -> *top*_2(c_42),*top*_40(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_81(f_80(f_79(f_78(f_77(f_76(f_75(f_74(f_73(f_72(f_71(f_70(f_69(f_68(f_67(f_66(f_65(f_64(f_63(x))))))))))))))))))))))))))))))))))))))))) -> *top*_2(c_42),*top*_40(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_81(f_80(f_79(f_78(f_77(f_76(f_75(f_74(f_73(f_72(f_71(f_70(f_69(f_68(f_67(f_66(f_65(f_64(x))))))))))))))))))))))))))))))))))))))))) -> *top*_2(c_42),*top*_40(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_81(f_80(f_79(f_78(f_77(f_76(f_75(f_74(f_73(f_72(f_71(f_70(f_69(f_68(f_67(f_66(f_65(x))))))))))))))))))))))))))))))))))))))))) -> *top*_2(c_42),*top*_40(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_81(f_80(f_79(f_78(f_77(f_76(f_75(f_74(f_73(f_72(f_71(f_70(f_69(f_68(f_67(f_66(x))))))))))))))))))))))))))))))))))))))))) -> *top*_2(c_42),*top*_40(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_81(f_80(f_79(f_78(f_77(f_76(f_75(f_74(f_73(f_72(f_71(f_70(f_69(f_68(f_67(x))))))))))))))))))))))))))))))))))))))))) -> *top*_2(c_42),*top*_40(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_81(f_80(f_79(f_78(f_77(f_76(f_75(f_74(f_73(f_72(f_71(f_70(f_69(f_68(x))))))))))))))))))))))))))))))))))))))))) -> *top*_2(c_42),*top*_40(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_81(f_80(f_79(f_78(f_77(f_76(f_75(f_74(f_73(f_72(f_71(f_70(f_69(x))))))))))))))))))))))))))))))))))))))))) -> *top*_2(c_42),*top*_40(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_81(f_80(f_79(f_78(f_77(f_76(f_75(f_74(f_73(f_72(f_71(f_70(x))))))))))))))))))))))))))))))))))))))))) -> *top*_2(c_42),*top*_40(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_81(f_80(f_79(f_78(f_77(f_76(f_75(f_74(f_73(f_72(f_71(x))))))))))))))))))))))))))))))))))))))))) -> *top*_2(c_42),*top*_40(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_81(f_80(f_79(f_78(f_77(f_76(f_75(f_74(f_73(f_72(x))))))))))))))))))))))))))))))))))))))))) -> *top*_2(c_42),*top*_40(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_81(f_80(f_79(f_78(f_77(f_76(f_75(f_74(f_73(x))))))))))))))))))))))))))))))))))))))))) -> *top*_2(c_42),*top*_40(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_81(f_80(f_79(f_78(f_77(f_76(f_75(f_74(x))))))))))))))))))))))))))))))))))))))))) -> *top*_2(c_42),*top*_40(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_81(f_80(f_79(f_78(f_77(f_76(f_75(x))))))))))))))))))))))))))))))))))))))))) -> *top*_2(c_42),*top*_40(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_81(f_80(f_79(f_78(f_77(f_76(x))))))))))))))))))))))))))))))))))))))))) -> *top*_2(c_42),*top*_40(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_81(f_80(f_79(f_78(f_77(x))))))))))))))))))))))))))))))))))))))))) -> *top*_2(c_42),*top*_40(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_81(f_80(f_79(f_78(x))))))))))))))))))))))))))))))))))))))))) -> *top*_2(c_42),*top*_40(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_81(f_80(f_79(x))))))))))))))))))))))))))))))))))))))))) -> *top*_2(c_42),*top*_40(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_81(f_80(x))))))))))))))))))))))))))))))))))))))))) -> *top*_2(c_42),*top*_40(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_81(x))))))))))))))))))))))))))))))))))))))))) -> *top*_2(c_42),*top*_40(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(f_82(x))))))))))))))))))))))))))))))))))))))))) -> *top*_2(c_42),*top*_5(f_46(f_45(f_43(f_44(a_41))))) -> *top*_6(f_47(f_46(f_45(f_43(f_44(a_41)))))),*top*_6(f_47(f_46(f_45(f_43(f_44(a_41)))))) -> *top*_7(f_48(f_47(f_46(f_45(f_43(f_44(a_41))))))),*top*_7(f_48(f_47(f_46(f_45(f_43(f_44(a_41))))))) -> *top*_8(f_49(f_48(f_47(f_46(f_45(f_43(f_44(a_41)))))))),*top*_8(f_49(f_48(f_47(f_46(f_45(f_43(f_44(a_41)))))))) -> *top*_9(f_50(f_49(f_48(f_47(f_46(f_45(f_43(f_44(a_41))))))))),*top*_9(f_50(f_49(f_48(f_47(f_46(f_45(f_43(f_44(a_41))))))))) -> *top*_10(f_51(f_50(f_49(f_48(f_47(f_46(f_45(f_43(f_44(a_41)))))))))),f_81(f_80(f_79(f_78(f_77(f_76(f_75(f_74(f_73(f_72(f_71(f_70(f_69(f_68(f_67(f_66(f_65(f_64(f_63(f_62(f_61(f_60(f_59(f_58(f_57(f_56(f_55(f_54(f_53(f_52(f_51(f_50(f_49(f_48(f_47(f_46(f_45(f_43(f_44(a_41))))))))))))))))))))))))))))))))))))))) -> f_82(f_81(f_80(f_79(f_78(f_77(f_76(f_75(f_74(f_73(f_72(f_71(f_70(f_69(f_68(f_67(f_66(f_65(f_64(f_63(f_62(f_61(f_60(f_59(f_58(f_57(f_56(f_55(f_54(f_53(f_52(f_51(f_50(f_49(f_48(f_47(f_46(f_45(f_43(f_44(a_41))))))))))))))))))))))))))))))))))))))))], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1167.trs" :
TRS {trsSignature = fromList [("*top*_0",1),("0_0",0),("1_0",0),("M_1",0),("cons_1",2),("cons_10",2),("cons_11",2),("cons_2",2),("cons_3",2),("cons_4",2),("cons_5",2),("cons_6",2),("cons_7",2),("cons_8",2),("cons_9",2),("garbage_collection_0",0),("h_0",1),("h_1",1),("tail_0",1),("tail_1",1)], trsVariables = fromList ["s","x"], trsRMap = [("*top*_0",[1]),("M_1",[]),("cons_1",[]),("cons_10",[]),("cons_11",[]),("cons_2",[]),("cons_3",[]),("cons_4",[]),("cons_5",[]),("cons_6",[]),("cons_7",[]),("cons_8",[]),("cons_9",[]),("h_0",[1]),("tail_0",[1]),("tail_1",[]),("0_0",[]),("1_0",[]),("garbage_collection_0",[]),("h_1",[])], trsRules = [*top*_0(tail_1(cons_1(x,s))) -> *top*_0(s),*top*_0(tail_1(cons_10(x,s))) -> *top*_0(s),*top*_0(tail_1(cons_11(x,s))) -> *top*_0(s),*top*_0(tail_1(cons_5(x,s))) -> *top*_0(s),*top*_0(tail_1(cons_6(x,s))) -> *top*_0(s),*top*_0(h_1(cons_1(0_0,s))) -> *top*_0(cons_6(0_0,cons_1(1_0,h_0(s)))),*top*_0(h_1(cons_1(1_0,s))) -> *top*_0(cons_10(1_0,cons_1(0_0,h_0(s)))),*top*_0(h_1(cons_10(1_0,s))) -> *top*_0(cons_10(1_0,cons_2(0_0,h_1(s)))),*top*_0(h_1(cons_11(1_0,s))) -> *top*_0(cons_10(1_0,cons_3(0_0,h_1(s)))),*top*_0(h_1(cons_2(0_0,s))) -> *top*_0(cons_6(0_0,cons_1(1_0,h_0(s)))),*top*_0(h_1(cons_3(0_0,s))) -> *top*_0(cons_6(0_0,cons_1(1_0,h_0(s)))),*top*_0(h_1(cons_4(0_0,s))) -> *top*_0(cons_6(0_0,cons_1(1_0,h_0(s)))),*top*_0(h_1(cons_5(0_0,s))) -> *top*_0(cons_6(0_0,cons_7(1_0,h_1(s)))),*top*_0(h_1(cons_6(0_0,s))) -> *top*_0(cons_6(0_0,cons_8(1_0,h_1(s)))),*top*_0(h_1(cons_7(1_0,s))) -> *top*_0(cons_10(1_0,cons_1(0_0,h_0(s)))),*top*_0(h_1(cons_8(1_0,s))) -> *top*_0(cons_10(1_0,cons_1(0_0,h_0(s)))),*top*_0(h_1(cons_9(1_0,s))) -> *top*_0(cons_10(1_0,cons_1(0_0,h_0(s)))),M_1 -> h_1(cons_1(0_0,tail_0(M_1))),cons_1(x,s) -> garbage_collection_0,cons_10(x,s) -> garbage_collection_0,cons_11(x,s) -> garbage_collection_0,cons_2(x,s) -> garbage_collection_0,cons_3(x,s) -> garbage_collection_0,cons_4(x,s) -> garbage_collection_0,cons_5(x,s) -> garbage_collection_0,cons_6(x,s) -> garbage_collection_0,cons_7(x,s) -> garbage_collection_0,cons_8(x,s) -> garbage_collection_0,cons_9(x,s) -> garbage_collection_0,h_0(tail_1(cons_1(x,s))) -> h_0(s),h_0(tail_1(cons_1(x,s))) -> h_1(s),h_0(tail_1(cons_10(x,s))) -> h_1(s),h_0(tail_1(cons_11(x,s))) -> h_1(s),h_0(tail_1(cons_5(x,s))) -> h_1(s),h_0(tail_1(cons_6(x,s))) -> h_1(s),h_0(h_1(cons_1(0_0,s))) -> h_1(cons_6(0_0,cons_1(1_0,h_0(s)))),h_0(h_1(cons_1(1_0,s))) -> h_1(cons_10(1_0,cons_1(0_0,h_0(s)))),h_0(h_1(cons_10(1_0,s))) -> h_1(cons_10(1_0,cons_2(0_0,h_1(s)))),h_0(h_1(cons_11(1_0,s))) -> h_1(cons_10(1_0,cons_3(0_0,h_1(s)))),h_0(h_1(cons_2(0_0,s))) -> h_1(cons_6(0_0,cons_1(1_0,h_0(s)))),h_0(h_1(cons_3(0_0,s))) -> h_1(cons_6(0_0,cons_1(1_0,h_0(s)))),h_0(h_1(cons_4(0_0,s))) -> h_1(cons_6(0_0,cons_1(1_0,h_0(s)))),h_0(h_1(cons_5(0_0,s))) -> h_1(cons_6(0_0,cons_7(1_0,h_1(s)))),h_0(h_1(cons_6(0_0,s))) -> h_1(cons_6(0_0,cons_8(1_0,h_1(s)))),h_0(h_1(cons_7(1_0,s))) -> h_1(cons_10(1_0,cons_1(0_0,h_0(s)))),h_0(h_1(cons_8(1_0,s))) -> h_1(cons_10(1_0,cons_1(0_0,h_0(s)))),h_0(h_1(cons_9(1_0,s))) -> h_1(cons_10(1_0,cons_1(0_0,h_0(s)))),tail_0(tail_1(cons_1(x,s))) -> tail_1(s),tail_0(tail_1(cons_10(x,s))) -> tail_1(s),tail_0(tail_1(cons_11(x,s))) -> tail_1(s),tail_0(tail_1(cons_5(x,s))) -> tail_1(s),tail_0(tail_1(cons_6(x,s))) -> tail_1(s),tail_0(h_1(cons_1(0_0,s))) -> tail_1(cons_6(0_0,cons_1(1_0,h_0(s)))),tail_0(h_1(cons_1(1_0,s))) -> tail_1(cons_10(1_0,cons_1(0_0,h_0(s)))),tail_0(h_1(cons_10(1_0,s))) -> tail_1(cons_10(1_0,cons_2(0_0,h_1(s)))),tail_0(h_1(cons_11(1_0,s))) -> tail_1(cons_10(1_0,cons_3(0_0,h_1(s)))),tail_0(h_1(cons_2(0_0,s))) -> tail_1(cons_6(0_0,cons_1(1_0,h_0(s)))),tail_0(h_1(cons_3(0_0,s))) -> tail_1(cons_6(0_0,cons_1(1_0,h_0(s)))),tail_0(h_1(cons_4(0_0,s))) -> tail_1(cons_6(0_0,cons_1(1_0,h_0(s)))),tail_0(h_1(cons_5(0_0,s))) -> tail_1(cons_6(0_0,cons_7(1_0,h_1(s)))),tail_0(h_1(cons_6(0_0,s))) -> tail_1(cons_6(0_0,cons_8(1_0,h_1(s)))),tail_0(h_1(cons_7(1_0,s))) -> tail_1(cons_10(1_0,cons_1(0_0,h_0(s)))),tail_0(h_1(cons_8(1_0,s))) -> tail_1(cons_10(1_0,cons_1(0_0,h_0(s)))),tail_0(h_1(cons_9(1_0,s))) -> tail_1(cons_10(1_0,cons_1(0_0,h_0(s)))),tail_1(cons_1(x,s)) -> s,tail_1(cons_2(x,s)) -> s,tail_1(cons_3(x,s)) -> s,tail_1(cons_4(x,s)) -> s,tail_1(cons_7(x,s)) -> s,tail_1(cons_8(x,s)) -> s,tail_1(cons_9(x,s)) -> s], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1164.trs" :
TRS {trsSignature = fromList [("*",2),("*1",2),("*2",2),("*3",2),("+",2),("+1",2),("+2",2),("+3",2),("-",2),("-1",2),("-2",2),("-3",2),("0",0),("Div",0),("Exn1",0),("Exn2",0),("False",0),("Negative",0),("True",0),("div",2),("div1",2),("div2",2),("div3",2),("eq",2),("eq1",2),("eq2",2),("eq3",2),("fire",1),("ge",2),("ge1",2),("ge2",2),("ge3",2),("gt",2),("gt1",2),("gt2",2),("gt3",2),("guard",2),("handle",3),("if",3),("isData",1),("le",2),("le1",2),("le2",2),("le3",2),("lt",2),("lt1",2),("lt2",2),("lt3",2),("mod",2),("mod1",2),("mod2",2),("mod3",2),("mquot",4),("mquot1",4),("mquot2",4),("mquot3",4),("mquot4",4),("mquot5",4),("neq",2),("neq1",2),("neq2",2),("neq3",2),("not",1),("not1",1),("not2",1),("quot",3),("quot1",3),("quot2",3),("quot3",3),("quot4",3),("raise",1),("select",4),("succ",1),("tt",0)], trsVariables = fromList ["w","x","y","z"], trsRMap = [("handle",[1]),("select",[1]),("guard",[1]),("isData",[]),("raise",[]),("fire",[]),("if",[1]),("not",[]),("not1",[1]),("not2",[]),("succ",[1]),("+",[]),("+1",[1]),("+2",[2]),("+3",[]),("-",[]),("-1",[1]),("-2",[2]),("-3",[]),("*",[]),("*1",[1]),("*2",[2]),("*3",[]),("div",[]),("div1",[1]),("div2",[2]),("div3",[]),("quot",[]),("quot1",[1]),("quot2",[2]),("quot3",[3]),("quot4",[]),("mod",[]),("mod1",[1]),("mod2",[2]),("mod3",[]),("mquot",[]),("mquot1",[1]),("mquot2",[2]),("mquot3",[3]),("mquot4",[4]),("mquot5",[]),("le",[]),("le1",[1]),("le2",[2]),("le3",[]),("lt",[]),("lt1",[1]),("lt2",[2]),("lt3",[]),("ge",[]),("ge1",[1]),("ge2",[2]),("ge3",[]),("gt",[]),("gt1",[1]),("gt2",[2]),("gt3",[]),("eq",[]),("eq1",[1]),("eq2",[2]),("eq3",[]),("neq",[]),("neq1",[1]),("neq2",[2]),("neq3",[])], trsRules = [guard(tt,y) -> y,guard(fire(x),y) -> fire(x),isData(succ(x)) -> isData(x),isData(0) -> tt,isData(True) -> tt,isData(False) -> tt,isData(fire(x)) -> fire(x),handle(x,Negative,z) -> select(isData(x),x,Negative,z),handle(x,Div,z) -> select(isData(x),x,Div,z),handle(x,Exn1,z) -> select(isData(x),x,Exn1,z),handle(x,Exn2,z) -> select(isData(x),x,Exn2,z),select(tt,x,y,z) -> x,select(fire(Negative),x,Negative,z) -> z,select(fire(Div),x,Div,z) -> z,select(fire(Exn1),x,Exn1,z) -> z,select(fire(Exn2),x,Exn2,z) -> z,select(fire(Negative),x,Div,z) -> fire(Negative),select(fire(Negative),x,Exn1,z) -> fire(Negative),select(fire(Negative),x,Exn2,z) -> fire(Negative),select(fire(Div),x,Div,z) -> fire(Div),select(fire(Div),x,Exn1,z) -> fire(Div),select(fire(Div),x,Exn2,z) -> fire(Div),select(fire(Exn1),x,Negative,z) -> fire(Exn1),select(fire(Exn1),x,Div,z) -> fire(Exn1),select(fire(Exn1),x,Exn2,z) -> fire(Exn1),select(fire(Exn2),x,Negative,z) -> fire(Exn2),select(fire(Exn2),x,Div,z) -> fire(Exn2),select(fire(Exn2),x,Exn1,z) -> fire(Exn2),raise(Negative) -> fire(Negative),raise(Div) -> fire(Div),raise(Exn1) -> fire(Exn1),raise(Exn2) -> fire(Exn2),if(True,y,z) -> y,if(False,y,z) -> z,if(fire(x),y,z) -> fire(x),not(x) -> not1(x),not1(x) -> guard(isData(x),not2(x)),not2(True) -> False,not2(False) -> True,succ(fire(x)) -> fire(x),+(x,y) -> +1(x,y),+1(x,y) -> guard(isData(x),+2(x,y)),+2(x,y) -> guard(isData(y),+3(x,y)),+3(0,y) -> y,+3(succ(x),y) -> succ(+(x,y)),-(x,y) -> -1(x,y),-1(x,y) -> guard(isData(x),-2(x,y)),-2(x,y) -> guard(isData(y),-3(x,y)),-3(x,0) -> x,-3(0,succ(y)) -> raise(Negative),-3(succ(x),succ(y)) -> -(x,y),*(x,y) -> *1(x,y),*1(x,y) -> guard(isData(x),*2(x,y)),*2(x,y) -> guard(isData(y),*3(x,y)),*3(0,y) -> 0,*3(succ(x),y) -> +(x,*(x,y)),div(x,y) -> div1(x,y),div1(x,y) -> guard(isData(x),div2(x,y)),div2(x,y) -> guard(isData(y),div3(x,y)),div3(x,y) -> quot(x,y,y),quot(x,y,z) -> quot1(x,y,z),quot1(x,y,z) -> guard(isData(x),quot2(x,y,z)),quot2(x,y,z) -> guard(isData(y),quot3(x,y,z)),quot3(x,y,z) -> guard(isData(z),quot4(x,y,z)),quot4(0,succ(y),succ(z)) -> 0,quot4(succ(x),succ(y),z) -> quot(x,y,z),quot4(x,0,succ(z)) -> succ(quot(x,succ(z),succ(z))),quot4(x,y,0) -> raise(Div),mod(x,y) -> mod1(x,y),mod1(x,y) -> guard(isData(x),mod2(x,y)),mod2(x,y) -> guard(isData(y),mod3(x,y)),mod3(x,y) -> mquot(x,y,y,x),mquot(x,y,z,w) -> mquot1(x,y,z,w),mquot1(x,y,z,w) -> guard(isData(x),mquot2(x,y,z,w)),mquot2(x,y,z,w) -> guard(isData(y),mquot3(x,y,z,w)),mquot3(x,y,z,w) -> guard(isData(z),mquot4(x,y,z,w)),mquot4(x,y,z,w) -> guard(isData(w),mquot5(x,y,z,w)),mquot5(0,succ(y),succ(z),w) -> w,mquot5(succ(x),succ(y),z,w) -> mquot(x,y,z,w),mquot5(x,0,succ(z),w) -> mquot(x,succ(z),succ(z),x),mquot5(x,y,0,w) -> raise(Div),le(x,y) -> le1(x,y),le1(x,y) -> guard(isData(x),le2(x,y)),le2(x,y) -> guard(isData(y),le3(x,y)),le3(0,y) -> True,le3(succ(x),0) -> False,le3(succ(x),succ(y)) -> le(x,y),gt(x,y) -> gt1(x,y),gt1(x,y) -> guard(isData(x),gt2(x,y)),gt2(x,y) -> guard(isData(y),gt3(x,y)),gt3(x,y) -> not(le(x,y)),ge(x,y) -> ge1(x,y),ge1(x,y) -> guard(isData(x),ge2(x,y)),ge2(x,y) -> guard(isData(y),ge3(x,y)),ge3(x,0) -> True,ge3(0,succ(y)) -> False,ge3(succ(x),succ(y)) -> ge(x,y),lt(x,y) -> lt1(x,y),lt1(x,y) -> guard(isData(x),lt2(x,y)),lt2(x,y) -> guard(isData(y),lt3(x,y)),lt3(x,y) -> not(ge(x,y)),eq(x,y) -> eq1(x,y),eq1(x,y) -> guard(isData(x),eq2(x,y)),eq2(x,y) -> guard(isData(y),eq3(x,y)),eq3(0,0) -> True,eq3(0,succ(y)) -> False,eq3(succ(x),0) -> False,eq3(succ(x),succ(y)) -> eq(x,y),neq(x,y) -> neq1(x,y),neq1(x,y) -> guard(isData(x),neq2(x,y)),neq2(x,y) -> guard(isData(y),neq3(x,y)),neq3(x,y) -> not(eq(x,y))], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1163.trs" :
TRS {trsSignature = fromList [("*",2),("*1",2),("*2",2),("*3",2),("+",2),("+1",2),("+2",2),("+3",2),("-",2),("-1",2),("-2",2),("-3",2),("0",0),("Div",0),("Exn1",0),("Exn2",0),("False",0),("Negative",0),("True",0),("div",2),("div1",2),("div2",2),("div3",2),("eq",2),("eq1",2),("eq2",2),("eq3",2),("f",2),("f1",2),("f2",2),("f3",2),("fire",1),("ge",2),("ge1",2),("ge2",2),("ge3",2),("gt",2),("gt1",2),("gt2",2),("gt3",2),("guard",2),("handle",3),("if",3),("isData",1),("le",2),("le1",2),("le2",2),("le3",2),("lt",2),("lt1",2),("lt2",2),("lt3",2),("mod",2),("mod1",2),("mod2",2),("mod3",2),("mquot",4),("mquot1",4),("mquot2",4),("mquot3",4),("mquot4",4),("mquot5",4),("neq",2),("neq1",2),("neq2",2),("neq3",2),("not",1),("not1",1),("not2",1),("quot",3),("quot1",3),("quot2",3),("quot3",3),("quot4",3),("raise",1),("select",4),("succ",1),("tt",0)], trsVariables = fromList ["w","x","y","z"], trsRMap = [("handle",[1]),("select",[1]),("guard",[1]),("isData",[]),("raise",[]),("fire",[]),("if",[1]),("not",[]),("not1",[1]),("not2",[]),("succ",[1]),("+",[]),("+1",[1]),("+2",[2]),("+3",[]),("-",[]),("-1",[1]),("-2",[2]),("-3",[]),("*",[]),("*1",[1]),("*2",[2]),("*3",[]),("div",[]),("div1",[1]),("div2",[2]),("div3",[]),("quot",[]),("quot1",[1]),("quot2",[2]),("quot3",[3]),("quot4",[]),("mod",[]),("mod1",[1]),("mod2",[2]),("mod3",[]),("mquot",[]),("mquot1",[1]),("mquot2",[2]),("mquot3",[3]),("mquot4",[4]),("mquot5",[]),("le",[]),("le1",[1]),("le2",[2]),("le3",[]),("lt",[]),("lt1",[1]),("lt2",[2]),("lt3",[]),("ge",[]),("ge1",[1]),("ge2",[2]),("ge3",[]),("gt",[]),("gt1",[1]),("gt2",[2]),("gt3",[]),("eq",[]),("eq1",[1]),("eq2",[2]),("eq3",[]),("neq",[]),("neq1",[1]),("neq2",[2]),("neq3",[]),("f",[]),("f1",[1]),("f2",[2]),("f3",[])], trsRules = [guard(tt,y) -> y,guard(fire(x),y) -> fire(x),isData(succ(x)) -> isData(x),isData(0) -> tt,isData(True) -> tt,isData(False) -> tt,isData(fire(x)) -> fire(x),handle(x,Negative,z) -> select(isData(x),x,Negative,z),handle(x,Div,z) -> select(isData(x),x,Div,z),handle(x,Exn1,z) -> select(isData(x),x,Exn1,z),handle(x,Exn2,z) -> select(isData(x),x,Exn2,z),select(tt,x,y,z) -> x,select(fire(Negative),x,Negative,z) -> z,select(fire(Div),x,Div,z) -> z,select(fire(Exn1),x,Exn1,z) -> z,select(fire(Exn2),x,Exn2,z) -> z,select(fire(Negative),x,Div,z) -> fire(Negative),select(fire(Negative),x,Exn1,z) -> fire(Negative),select(fire(Negative),x,Exn2,z) -> fire(Negative),select(fire(Div),x,Div,z) -> fire(Div),select(fire(Div),x,Exn1,z) -> fire(Div),select(fire(Div),x,Exn2,z) -> fire(Div),select(fire(Exn1),x,Negative,z) -> fire(Exn1),select(fire(Exn1),x,Div,z) -> fire(Exn1),select(fire(Exn1),x,Exn2,z) -> fire(Exn1),select(fire(Exn2),x,Negative,z) -> fire(Exn2),select(fire(Exn2),x,Div,z) -> fire(Exn2),select(fire(Exn2),x,Exn1,z) -> fire(Exn2),raise(Negative) -> fire(Negative),raise(Div) -> fire(Div),raise(Exn1) -> fire(Exn1),raise(Exn2) -> fire(Exn2),if(True,y,z) -> y,if(False,y,z) -> z,if(fire(x),y,z) -> fire(x),not(x) -> not1(x),not1(x) -> guard(isData(x),not2(x)),not2(True) -> False,not2(False) -> True,succ(fire(x)) -> fire(x),+(x,y) -> +1(x,y),+1(x,y) -> guard(isData(x),+2(x,y)),+2(x,y) -> guard(isData(y),+3(x,y)),+3(0,y) -> y,+3(succ(x),y) -> succ(+(x,y)),-(x,y) -> -1(x,y),-1(x,y) -> guard(isData(x),-2(x,y)),-2(x,y) -> guard(isData(y),-3(x,y)),-3(x,0) -> x,-3(0,succ(y)) -> raise(Negative),-3(succ(x),succ(y)) -> -(x,y),*(x,y) -> *1(x,y),*1(x,y) -> guard(isData(x),*2(x,y)),*2(x,y) -> guard(isData(y),*3(x,y)),*3(0,y) -> 0,*3(succ(x),y) -> +(x,*(x,y)),div(x,y) -> div1(x,y),div1(x,y) -> guard(isData(x),div2(x,y)),div2(x,y) -> guard(isData(y),div3(x,y)),div3(x,y) -> quot(x,y,y),quot(x,y,z) -> quot1(x,y,z),quot1(x,y,z) -> guard(isData(x),quot2(x,y,z)),quot2(x,y,z) -> guard(isData(y),quot3(x,y,z)),quot3(x,y,z) -> guard(isData(z),quot4(x,y,z)),quot4(0,succ(y),succ(z)) -> 0,quot4(succ(x),succ(y),z) -> quot(x,y,z),quot4(x,0,succ(z)) -> succ(quot(x,succ(z),succ(z))),quot4(x,y,0) -> raise(Div),mod(x,y) -> mod1(x,y),mod1(x,y) -> guard(isData(x),mod2(x,y)),mod2(x,y) -> guard(isData(y),mod3(x,y)),mod3(x,y) -> mquot(x,y,y,x),mquot(x,y,z,w) -> mquot1(x,y,z,w),mquot1(x,y,z,w) -> guard(isData(x),mquot2(x,y,z,w)),mquot2(x,y,z,w) -> guard(isData(y),mquot3(x,y,z,w)),mquot3(x,y,z,w) -> guard(isData(z),mquot4(x,y,z,w)),mquot4(x,y,z,w) -> guard(isData(w),mquot5(x,y,z,w)),mquot5(0,succ(y),succ(z),w) -> w,mquot5(succ(x),succ(y),z,w) -> mquot(x,y,z,w),mquot5(x,0,succ(z),w) -> mquot(x,succ(z),succ(z),x),mquot5(x,y,0,w) -> raise(Div),le(x,y) -> le1(x,y),le1(x,y) -> guard(isData(x),le2(x,y)),le2(x,y) -> guard(isData(y),le3(x,y)),le3(0,y) -> True,le3(succ(x),0) -> False,le3(succ(x),succ(y)) -> le(x,y),gt(x,y) -> gt1(x,y),gt1(x,y) -> guard(isData(x),gt2(x,y)),gt2(x,y) -> guard(isData(y),gt3(x,y)),gt3(x,y) -> not(le(x,y)),ge(x,y) -> ge1(x,y),ge1(x,y) -> guard(isData(x),ge2(x,y)),ge2(x,y) -> guard(isData(y),ge3(x,y)),ge3(x,0) -> True,ge3(0,succ(y)) -> False,ge3(succ(x),succ(y)) -> ge(x,y),lt(x,y) -> lt1(x,y),lt1(x,y) -> guard(isData(x),lt2(x,y)),lt2(x,y) -> guard(isData(y),lt3(x,y)),lt3(x,y) -> not(ge(x,y)),eq(x,y) -> eq1(x,y),eq1(x,y) -> guard(isData(x),eq2(x,y)),eq2(x,y) -> guard(isData(y),eq3(x,y)),eq3(0,0) -> True,eq3(0,succ(y)) -> False,eq3(succ(x),0) -> False,eq3(succ(x),succ(y)) -> eq(x,y),neq(x,y) -> neq1(x,y),neq1(x,y) -> guard(isData(x),neq2(x,y)),neq2(x,y) -> guard(isData(y),neq3(x,y)),neq3(x,y) -> not(eq(x,y)),f(x,y) -> f1(x,y),f1(x,y) -> guard(isData(x),f2(x,y)),f2(x,y) -> guard(isData(y),f3(x,y)),f3(x,y) -> handle(if(le(x,y),raise(Exn1),f(y,x)),Exn1,0)], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1162.trs" :
TRS {trsSignature = fromList [("*",2),("*1",2),("*2",2),("*3",2),("+",2),("+1",2),("+2",2),("+3",2),("-",2),("-1",2),("-2",2),("-3",2),("0",0),("Div",0),("Exn1",0),("Exn2",0),("False",0),("Negative",0),("True",0),("div",2),("div1",2),("div2",2),("div3",2),("eq",2),("eq1",2),("eq2",2),("eq3",2),("f",1),("f1",1),("f2",1),("fire",1),("ge",2),("ge1",2),("ge2",2),("ge3",2),("gt",2),("gt1",2),("gt2",2),("gt3",2),("guard",2),("handle",3),("if",3),("isData",1),("le",2),("le1",2),("le2",2),("le3",2),("lt",2),("lt1",2),("lt2",2),("lt3",2),("mod",2),("mod1",2),("mod2",2),("mod3",2),("mquot",4),("mquot1",4),("mquot2",4),("mquot3",4),("mquot4",4),("mquot5",4),("neq",2),("neq1",2),("neq2",2),("neq3",2),("not",1),("not1",1),("not2",1),("quot",3),("quot1",3),("quot2",3),("quot3",3),("quot4",3),("raise",1),("select",4),("succ",1),("tt",0)], trsVariables = fromList ["w","x","y","z"], trsRMap = [("handle",[1]),("select",[1]),("guard",[1]),("isData",[]),("raise",[]),("fire",[]),("if",[1]),("not",[]),("not1",[1]),("not2",[]),("succ",[1]),("+",[]),("+1",[1]),("+2",[2]),("+3",[]),("-",[]),("-1",[1]),("-2",[2]),("-3",[]),("*",[]),("*1",[1]),("*2",[2]),("*3",[]),("div",[]),("div1",[1]),("div2",[2]),("div3",[]),("quot",[]),("quot1",[1]),("quot2",[2]),("quot3",[3]),("quot4",[]),("mod",[]),("mod1",[1]),("mod2",[2]),("mod3",[]),("mquot",[]),("mquot1",[1]),("mquot2",[2]),("mquot3",[3]),("mquot4",[4]),("mquot5",[]),("le",[]),("le1",[1]),("le2",[2]),("le3",[]),("lt",[]),("lt1",[1]),("lt2",[2]),("lt3",[]),("ge",[]),("ge1",[1]),("ge2",[2]),("ge3",[]),("gt",[]),("gt1",[1]),("gt2",[2]),("gt3",[]),("eq",[]),("eq1",[1]),("eq2",[2]),("eq3",[]),("neq",[]),("neq1",[1]),("neq2",[2]),("neq3",[]),("f",[]),("f1",[1]),("f2",[])], trsRules = [guard(tt,y) -> y,guard(fire(x),y) -> fire(x),isData(succ(x)) -> isData(x),isData(0) -> tt,isData(True) -> tt,isData(False) -> tt,isData(fire(x)) -> fire(x),handle(x,Negative,z) -> select(isData(x),x,Negative,z),handle(x,Div,z) -> select(isData(x),x,Div,z),handle(x,Exn1,z) -> select(isData(x),x,Exn1,z),handle(x,Exn2,z) -> select(isData(x),x,Exn2,z),select(tt,x,y,z) -> x,select(fire(Negative),x,Negative,z) -> z,select(fire(Div),x,Div,z) -> z,select(fire(Exn1),x,Exn1,z) -> z,select(fire(Exn2),x,Exn2,z) -> z,select(fire(Negative),x,Div,z) -> fire(Negative),select(fire(Negative),x,Exn1,z) -> fire(Negative),select(fire(Negative),x,Exn2,z) -> fire(Negative),select(fire(Div),x,Div,z) -> fire(Div),select(fire(Div),x,Exn1,z) -> fire(Div),select(fire(Div),x,Exn2,z) -> fire(Div),select(fire(Exn1),x,Negative,z) -> fire(Exn1),select(fire(Exn1),x,Div,z) -> fire(Exn1),select(fire(Exn1),x,Exn2,z) -> fire(Exn1),select(fire(Exn2),x,Negative,z) -> fire(Exn2),select(fire(Exn2),x,Div,z) -> fire(Exn2),select(fire(Exn2),x,Exn1,z) -> fire(Exn2),raise(Negative) -> fire(Negative),raise(Div) -> fire(Div),raise(Exn1) -> fire(Exn1),raise(Exn2) -> fire(Exn2),if(True,y,z) -> y,if(False,y,z) -> z,if(fire(x),y,z) -> fire(x),not(x) -> not1(x),not1(x) -> guard(isData(x),not2(x)),not2(True) -> False,not2(False) -> True,succ(fire(x)) -> fire(x),+(x,y) -> +1(x,y),+1(x,y) -> guard(isData(x),+2(x,y)),+2(x,y) -> guard(isData(y),+3(x,y)),+3(0,y) -> y,+3(succ(x),y) -> succ(+(x,y)),-(x,y) -> -1(x,y),-1(x,y) -> guard(isData(x),-2(x,y)),-2(x,y) -> guard(isData(y),-3(x,y)),-3(x,0) -> x,-3(0,succ(y)) -> raise(Negative),-3(succ(x),succ(y)) -> -(x,y),*(x,y) -> *1(x,y),*1(x,y) -> guard(isData(x),*2(x,y)),*2(x,y) -> guard(isData(y),*3(x,y)),*3(0,y) -> 0,*3(succ(x),y) -> +(x,*(x,y)),div(x,y) -> div1(x,y),div1(x,y) -> guard(isData(x),div2(x,y)),div2(x,y) -> guard(isData(y),div3(x,y)),div3(x,y) -> quot(x,y,y),quot(x,y,z) -> quot1(x,y,z),quot1(x,y,z) -> guard(isData(x),quot2(x,y,z)),quot2(x,y,z) -> guard(isData(y),quot3(x,y,z)),quot3(x,y,z) -> guard(isData(z),quot4(x,y,z)),quot4(0,succ(y),succ(z)) -> 0,quot4(succ(x),succ(y),z) -> quot(x,y,z),quot4(x,0,succ(z)) -> succ(quot(x,succ(z),succ(z))),quot4(x,y,0) -> raise(Div),mod(x,y) -> mod1(x,y),mod1(x,y) -> guard(isData(x),mod2(x,y)),mod2(x,y) -> guard(isData(y),mod3(x,y)),mod3(x,y) -> mquot(x,y,y,x),mquot(x,y,z,w) -> mquot1(x,y,z,w),mquot1(x,y,z,w) -> guard(isData(x),mquot2(x,y,z,w)),mquot2(x,y,z,w) -> guard(isData(y),mquot3(x,y,z,w)),mquot3(x,y,z,w) -> guard(isData(z),mquot4(x,y,z,w)),mquot4(x,y,z,w) -> guard(isData(w),mquot5(x,y,z,w)),mquot5(0,succ(y),succ(z),w) -> w,mquot5(succ(x),succ(y),z,w) -> mquot(x,y,z,w),mquot5(x,0,succ(z),w) -> mquot(x,succ(z),succ(z),x),mquot5(x,y,0,w) -> raise(Div),le(x,y) -> le1(x,y),le1(x,y) -> guard(isData(x),le2(x,y)),le2(x,y) -> guard(isData(y),le3(x,y)),le3(0,y) -> True,le3(succ(x),0) -> False,le3(succ(x),succ(y)) -> le(x,y),gt(x,y) -> gt1(x,y),gt1(x,y) -> guard(isData(x),gt2(x,y)),gt2(x,y) -> guard(isData(y),gt3(x,y)),gt3(x,y) -> not(le(x,y)),ge(x,y) -> ge1(x,y),ge1(x,y) -> guard(isData(x),ge2(x,y)),ge2(x,y) -> guard(isData(y),ge3(x,y)),ge3(x,0) -> True,ge3(0,succ(y)) -> False,ge3(succ(x),succ(y)) -> ge(x,y),lt(x,y) -> lt1(x,y),lt1(x,y) -> guard(isData(x),lt2(x,y)),lt2(x,y) -> guard(isData(y),lt3(x,y)),lt3(x,y) -> not(ge(x,y)),eq(x,y) -> eq1(x,y),eq1(x,y) -> guard(isData(x),eq2(x,y)),eq2(x,y) -> guard(isData(y),eq3(x,y)),eq3(0,0) -> True,eq3(0,succ(y)) -> False,eq3(succ(x),0) -> False,eq3(succ(x),succ(y)) -> eq(x,y),neq(x,y) -> neq1(x,y),neq1(x,y) -> guard(isData(x),neq2(x,y)),neq2(x,y) -> guard(isData(y),neq3(x,y)),neq3(x,y) -> not(eq(x,y)),f(x) -> f1(x),f1(x) -> guard(isData(x),f2(x)),f2(x) -> handle(if(False,raise(Exn1),f(x)),Exn1,succ(0))], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\COPS\\CSTRS\\1161.trs" :
TRS {trsSignature = fromList [("*",2),("*1",2),("*2",2),("*3",2),("+",2),("+1",2),("+2",2),("+3",2),("-",2),("-1",2),("-2",2),("-3",2),("0",0),("Div",0),("Exn1",0),("Exn2",0),("False",0),("Negative",0),("True",0),("div",2),("div1",2),("div2",2),("div3",2),("eq",2),("eq1",2),("eq2",2),("eq3",2),("f",1),("f1",1),("f2",1),("fire",1),("ge",2),("ge1",2),("ge2",2),("ge3",2),("gt",2),("gt1",2),("gt2",2),("gt3",2),("guard",2),("handle",3),("if",3),("isData",1),("le",2),("le1",2),("le2",2),("le3",2),("lt",2),("lt1",2),("lt2",2),("lt3",2),("mod",2),("mod1",2),("mod2",2),("mod3",2),("mquot",4),("mquot1",4),("mquot2",4),("mquot3",4),("mquot4",4),("mquot5",4),("neq",2),("neq1",2),("neq2",2),("neq3",2),("not",1),("not1",1),("not2",1),("quot",3),("quot1",3),("quot2",3),("quot3",3),("quot4",3),("raise",1),("select",4),("succ",1),("tt",0)], trsVariables = fromList ["w","x","y","z"], trsRMap = [("handle",[1]),("select",[1]),("guard",[1]),("isData",[]),("raise",[]),("fire",[]),("if",[1]),("not",[]),("not1",[1]),("not2",[]),("succ",[1]),("+",[]),("+1",[1]),("+2",[2]),("+3",[]),("-",[]),("-1",[1]),("-2",[2]),("-3",[]),("*",[]),("*1",[1]),("*2",[2]),("*3",[]),("div",[]),("div1",[1]),("div2",[2]),("div3",[]),("quot",[]),("quot1",[1]),("quot2",[2]),("quot3",[3]),("quot4",[]),("mod",[]),("mod1",[1]),("mod2",[2]),("mod3",[]),("mquot",[]),("mquot1",[1]),("mquot2",[2]),("mquot3",[3]),("mquot4",[4]),("mquot5",[]),("le",[]),("le1",[1]),("le2",[2]),("le3",[]),("lt",[]),("lt1",[1]),("lt2",[2]),("lt3",[]),("ge",[]),("ge1",[1]),("ge2",[2]),("ge3",[]),("gt",[]),("gt1",[1]),("gt2",[2]),("gt3",[]),("eq",[]),("eq1",[1]),("eq2",[2]),("eq3",[]),("neq",[]),("neq1",[1]),("neq2",[2]),("neq3",[]),("f",[]),("f1",[1]),("f2",[])], trsRules = [guard(tt,y) -> y,guard(fire(x),y) -> fire(x),isData(succ(x)) -> isData(x),isData(0) -> tt,isData(True) -> tt,isData(False) -> tt,isData(fire(x)) -> fire(x),handle(x,Negative,z) -> select(isData(x),x,Negative,z),handle(x,Div,z) -> select(isData(x),x,Div,z),handle(x,Exn1,z) -> select(isData(x),x,Exn1,z),handle(x,Exn2,z) -> select(isData(x),x,Exn2,z),select(tt,x,y,z) -> x,select(fire(Negative),x,Negative,z) -> z,select(fire(Div),x,Div,z) -> z,select(fire(Exn1),x,Exn1,z) -> z,select(fire(Exn2),x,Exn2,z) -> z,select(fire(Negative),x,Div,z) -> fire(Negative),select(fire(Negative),x,Exn1,z) -> fire(Negative),select(fire(Negative),x,Exn2,z) -> fire(Negative),select(fire(Div),x,Div,z) -> fire(Div),select(fire(Div),x,Exn1,z) -> fire(Div),select(fire(Div),x,Exn2,z) -> fire(Div),select(fire(Exn1),x,Negative,z) -> fire(Exn1),select(fire(Exn1),x,Div,z) -> fire(Exn1),select(fire(Exn1),x,Exn2,z) -> fire(Exn1),select(fire(Exn2),x,Negative,z) -> fire(Exn2),select(fire(Exn2),x,Div,z) -> fire(Exn2),select(fire(Exn2),x,Exn1,z) -> fire(Exn2),raise(Negative) -> fire(Negative),raise(Div) -> fire(Div),raise(Exn1) -> fire(Exn1),raise(Exn2) -> fire(Exn2),if(True,y,z) -> y,if(False,y,z) -> z,if(fire(x),y,z) -> fire(x),not(x) -> not1(x),not1(x) -> guard(isData(x),not2(x)),not2(True) -> False,not2(False) -> True,succ(fire(x)) -> fire(x),+(x,y) -> +1(x,y),+1(x,y) -> guard(isData(x),+2(x,y)),+2(x,y) -> guard(isData(y),+3(x,y)),+3(0,y) -> y,+3(succ(x),y) -> succ(+(x,y)),-(x,y) -> -1(x,y),-1(x,y) -> guard(isData(x),-2(x,y)),-2(x,y) -> guard(isData(y),-3(x,y)),-3(x,0) -> x,-3(0,succ(y)) -> raise(Negative),-3(succ(x),succ(y)) -> -(x,y),*(x,y) -> *1(x,y),*1(x,y) -> guard(isData(x),*2(x,y)),*2(x,y) -> guard(isData(y),*3(x,y)),*3(0,y) -> 0,*3(succ(x),y) -> +(x,*(x,y)),div(x,y) -> div1(x,y),div1(x,y) -> guard(isData(x),div2(x,y)),div2(x,y) -> guard(isData(y),div3(x,y)),div3(x,y) -> quot(x,y,y),quot(x,y,z) -> quot1(x,y,z),quot1(x,y,z) -> guard(isData(x),quot2(x,y,z)),quot2(x,y,z) -> guard(isData(y),quot3(x,y,z)),quot3(x,y,z) -> guard(isData(z),quot4(x,y,z)),quot4(0,succ(y),succ(z)) -> 0,quot4(succ(x),succ(y),z) -> quot(x,y,z),quot4(x,0,succ(z)) -> succ(quot(x,succ(z),succ(z))),quot4(x,y,0) -> raise(Div),mod(x,y) -> mod1(x,y),mod1(x,y) -> guard(isData(x),mod2(x,y)),mod2(x,y) -> guard(isData(y),mod3(x,y)),mod3(x,y) -> mquot(x,y,y,x),mquot(x,y,z,w) -> mquot1(x,y,z,w),mquot1(x,y,z,w) -> guard(isData(x),mquot2(x,y,z,w)),mquot2(x,y,z,w) -> guard(isData(y),mquot3(x,y,z,w)),mquot3(x,y,z,w) -> guard(isData(z),mquot4(x,y,z,w)),mquot4(x,y,z,w) -> guard(isData(w),mquot5(x,y,z,w)),mquot5(0,succ(y),succ(z),w) -> w,mquot5(succ(x),succ(y),z,w) -> mquot(x,y,z,w),mquot5(x,0,succ(z),w) -> mquot(x,succ(z),succ(z),x),mquot5(x,y,0,w) -> raise(Div),le(x,y) -> le1(x,y),le1(x,y) -> guard(isData(x),le2(x,y)),le2(x,y) -> guard(isData(y),le3(x,y)),le3(0,y) -> True,le3(succ(x),0) -> False,le3(succ(x),succ(y)) -> le(x,y),gt(x,y) -> gt1(x,y),gt1(x,y) -> guard(isData(x),gt2(x,y)),gt2(x,y) -> guard(isData(y),gt3(x,y)),gt3(x,y) -> not(le(x,y)),ge(x,y) -> ge1(x,y),ge1(x,y) -> guard(isData(x),ge2(x,y)),ge2(x,y) -> guard(isData(y),ge3(x,y)),ge3(x,0) -> True,ge3(0,succ(y)) -> False,ge3(succ(x),succ(y)) -> ge(x,y),lt(x,y) -> lt1(x,y),lt1(x,y) -> guard(isData(x),lt2(x,y)),lt2(x,y) -> guard(isData(y),lt3(x,y)),lt3(x,y) -> not(ge(x,y)),eq(x,y) -> eq1(x,y),eq1(x,y) -> guard(isData(x),eq2(x,y)),eq2(x,y) -> guard(isData(y),eq3(x,y)),eq3(0,0) -> True,eq3(0,succ(y)) -> False,eq3(succ(x),0) -> False,eq3(succ(x),succ(y)) -> eq(x,y),neq(x,y) -> neq1(x,y),neq1(x,y) -> guard(isData(x),neq2(x,y)),neq2(x,y) -> guard(isData(y),neq3(x,y)),neq3(x,y) -> not(eq(x,y)),f(x) -> f1(x),f1(x) -> guard(isData(x),f2(x)),f2(x) -> handle(if(le(0,succ(0)),raise(Exn1),f(x)),Exn1,succ(0))], trsType = TRSContextSensitive, trsStrategy = Nothing, signatureBlock = False}


++ File:".\\tests\\TPDB\\traditional\\passed\\higher-order\\Bird\\TreeSize.trs" :
TRS {trsSignature = fromList [("0",0),("app",2),("cons",0),("map",0),("nil",0),("node",0),("plus",0),("s",0),("size",0),("sum",0)], trsVariables = fromList ["f","x","xs","y"], trsRMap = [], trsRules = [app(app(map,f),nil) -> nil,app(app(map,f),app(app(cons,x),xs)) -> app(app(cons,app(f,x)),app(app(map,f),xs)),app(sum,app(app(cons,x),xs)) -> app(app(plus,x),app(sum,xs)),app(size,app(app(node,x),xs)) -> app(s,app(sum,app(app(map,size),xs))),app(app(plus,0),x) -> 0,app(app(plus,app(s,x)),y) -> app(s,app(app(plus,x),y))], trsType = TRSStandard, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\TPDB\\traditional\\passed\\higher-order\\Bird\\TreeMap.trs" :
TRS {trsSignature = fromList [("app",2),("cons",0),("map",0),("nil",0),("node",0),("treemap",0)], trsVariables = fromList ["f","x","xs"], trsRMap = [], trsRules = [app(app(map,f),nil) -> nil,app(app(map,f),app(app(cons,x),xs)) -> app(app(cons,app(f,x)),app(app(map,f),xs)),app(app(treemap,f),app(app(node,x),xs)) -> app(app(node,app(f,x)),app(app(map,app(treemap,f)),xs))], trsType = TRSStandard, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\TPDB\\traditional\\passed\\higher-order\\Bird\\TreeLevels.trs" :
TRS {trsSignature = fromList [("app",2),("append",0),("combine",0),("cons",0),("levels",0),("map",0),("nil",0),("node",0),("zip",0)], trsVariables = fromList ["f","x","xs","xss","ys","yss"], trsRMap = [], trsRules = [app(app(map,f),nil) -> nil,app(app(map,f),app(app(cons,x),xs)) -> app(app(cons,app(f,x)),app(app(map,f),xs)),app(app(append,xs),nil) -> xs,app(app(append,nil),ys) -> ys,app(app(append,app(app(cons,x),xs)),ys) -> app(app(cons,x),app(app(append,xs),ys)),app(app(zip,nil),yss) -> yss,app(app(zip,xss),nil) -> xss,app(app(zip,app(app(cons,xs),xss)),app(app(cons,ys),yss)) -> app(app(cons,app(app(append,xs),ys)),app(app(zip,xss),yss)),app(app(combine,xs),nil) -> xs,app(app(combine,xs),app(app(cons,ys),yss)) -> app(app(combine,app(app(zip,xs),ys)),yss),app(levels,app(app(node,x),xs)) -> app(app(cons,app(app(cons,x),nil)),app(app(combine,nil),app(app(map,levels),xs)))], trsType = TRSStandard, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\TPDB\\traditional\\passed\\higher-order\\Bird\\TreeHeight.trs" :
TRS {trsSignature = fromList [("0",0),("app",2),("cons",0),("false",0),("height",0),("if",0),("le",0),("map",0),("maxlist",0),("nil",0),("node",0),("s",0),("true",0)], trsVariables = fromList ["f","x","xs","y","ys"], trsRMap = [], trsRules = [app(app(map,f),nil) -> nil,app(app(map,f),app(app(cons,x),xs)) -> app(app(cons,app(f,x)),app(app(map,f),xs)),app(app(le,0),y) -> true,app(app(le,app(s,x)),0) -> false,app(app(le,app(s,x)),app(s,y)) -> app(app(le,x),y),app(app(maxlist,x),app(app(cons,y),ys)) -> app(app(if,app(app(le,x),y)),app(app(maxlist,y),ys)),app(app(maxlist,x),nil) -> x,app(height,app(app(node,x),xs)) -> app(s,app(app(maxlist,0),app(app(map,height),xs)))], trsType = TRSStandard, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\TPDB\\traditional\\passed\\higher-order\\Bird\\TreeFlatten.trs" :
TRS {trsSignature = fromList [("app",2),("append",0),("concat",0),("cons",0),("flatten",0),("map",0),("nil",0),("node",0)], trsVariables = fromList ["f","x","xs","ys"], trsRMap = [], trsRules = [app(app(map,f),nil) -> nil,app(app(map,f),app(app(cons,x),xs)) -> app(app(cons,app(f,x)),app(app(map,f),xs)),app(flatten,app(app(node,x),xs)) -> app(app(cons,x),app(concat,app(app(map,flatten),xs))),app(concat,nil) -> nil,app(concat,app(app(cons,x),xs)) -> app(app(append,x),app(concat,xs)),app(app(append,nil),xs) -> xs,app(app(append,app(app(cons,x),xs)),ys) -> app(app(cons,x),app(app(append,xs),ys))], trsType = TRSStandard, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\TPDB\\traditional\\passed\\higher-order\\Bird\\Hamming.trs" :
TRS {trsSignature = fromList [("0",0),("app",2),("cons",0),("eq",0),("false",0),("hamming",0),("if",0),("list1",0),("list2",0),("list3",0),("lt",0),("map",0),("merge",0),("mult",0),("nil",0),("plus",0),("s",0),("true",0)], trsVariables = fromList ["f","x","xs","y","ys"], trsRMap = [], trsRules = [app(app(app(if,true),xs),ys) -> xs,app(app(app(if,false),xs),ys) -> ys,app(app(lt,app(s,x)),app(s,y)) -> app(app(lt,x),y),app(app(lt,0),app(s,y)) -> true,app(app(lt,y),0) -> false,app(app(eq,x),x) -> true,app(app(eq,app(s,x)),0) -> false,app(app(eq,0),app(s,x)) -> false,app(app(merge,xs),nil) -> xs,app(app(merge,nil),ys) -> ys,app(app(merge,app(app(cons,x),xs)),app(app(cons,y),ys)) -> app(app(app(if,app(app(lt,x),y)),app(app(cons,x),app(app(merge,xs),app(app(cons,y),ys)))),app(app(app(if,app(app(eq,x),y)),app(app(cons,x),app(app(merge,xs),ys))),app(app(cons,y),app(app(merge,app(app(cons,x),xs)),ys)))),app(app(map,f),nil) -> nil,app(app(map,f),app(app(cons,x),xs)) -> app(app(cons,app(f,x)),app(app(map,f),xs)),app(app(mult,0),x) -> 0,app(app(mult,app(s,x)),y) -> app(app(plus,y),app(app(mult,x),y)),app(app(plus,0),x) -> 0,app(app(plus,app(s,x)),y) -> app(s,app(app(plus,x),y)),list1 -> app(app(map,app(mult,app(s,app(s,0)))),hamming),list2 -> app(app(map,app(mult,app(s,app(s,app(s,0))))),hamming),list3 -> app(app(map,app(mult,app(s,app(s,app(s,app(s,app(s,0))))))),hamming),hamming -> app(app(cons,app(s,0)),app(app(merge,list1),app(app(merge,list2),list3)))], trsType = TRSStandard, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\TPDB\\traditional\\passed\\higher-order\\Bird\\Ex2_8_1ConstSubstFix.trs" :
TRS {trsSignature = fromList [("app",2),("const",0),("fix",0),("subst",0)], trsVariables = fromList ["f","g","x","y"], trsRMap = [], trsRules = [app(app(const,x),y) -> x,app(app(app(subst,f),g),x) -> app(app(f,x),app(g,x)),app(app(fix,f),x) -> app(app(f,app(fix,f)),x)], trsType = TRSStandard, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\TPDB\\traditional\\passed\\higher-order\\Bird\\Ex2_6_1Composition.trs" :
TRS {trsSignature = fromList [("app",2),("compose",0)], trsVariables = fromList ["f","g","x"], trsRMap = [], trsRules = [app(app(app(compose,f),g),x) -> app(f,app(g,x))], trsType = TRSStandard, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\TPDB\\traditional\\passed\\higher-order\\Bird\\BTreeMember.trs" :
TRS {trsSignature = fromList [("0",0),("app",2),("eq",0),("false",0),("fork",0),("if",0),("lt",0),("member",0),("null",0),("s",0),("true",0)], trsVariables = fromList ["w","x","y","z"], trsRMap = [], trsRules = [app(app(lt,app(s,x)),app(s,y)) -> app(app(lt,x),y),app(app(lt,0),app(s,y)) -> true,app(app(lt,y),0) -> false,app(app(eq,x),x) -> true,app(app(eq,app(s,x)),0) -> false,app(app(eq,0),app(s,x)) -> false,app(app(member,w),null) -> false,app(app(member,w),app(app(app(fork,x),y),z)) -> app(app(app(if,app(app(lt,w),y)),app(app(member,w),x)),app(app(app(if,app(app(eq,w),y)),true),app(app(member,w),z)))], trsType = TRSStandard, trsStrategy = Nothing, signatureBlock = False}

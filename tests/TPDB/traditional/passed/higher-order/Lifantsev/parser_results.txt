
++ File:".\\tests\\TPDB\\traditional\\passed\\higher-order\\Lifantsev\\Ex9Maps.trs" :
TRS {trsSignature = fromList [("app",2),("cons",0),("g",0),("map_1",0),("map_2",0),("map_3",0)], trsVariables = fromList ["c","f","g_1","g_2","g_3","g_4","h","l","t","y"], trsRMap = [], trsRules = [app(app(map_1,f),app(app(cons,h),t)) -> app(app(cons,app(f,h)),app(app(map_1,f),t)),app(app(app(map_2,f),c),app(app(cons,h),t)) -> app(app(cons,app(app(f,h),c)),app(app(app(map_2,f),c),t)),app(app(app(app(map_3,f),g),c),app(app(cons,h),t)) -> app(app(cons,app(app(app(f,g),h),c)),app(app(app(app(map_3,f),g),c),t))], trsType = TRSStandard, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\TPDB\\traditional\\passed\\higher-order\\Lifantsev\\Ex8Polymorphic.trs" :
TRS {trsSignature = fromList [("app",2),("cons",0),("fmap",0),("map",0),("nil",0),("t_f",0),("twice",0)], trsVariables = fromList ["f","h","t","x"], trsRMap = [], trsRules = [app(app(twice,f),x) -> app(f,app(f,x)),app(app(map,f),nil) -> nil,app(app(map,f),app(app(cons,h),t)) -> app(app(cons,app(f,h)),app(app(map,f),t)),app(app(fmap,nil),x) -> nil,app(app(fmap,app(app(cons,f),t_f)),x) -> app(app(cons,app(f,x)),app(app(fmap,t_f),x))], trsType = TRSStandard, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\TPDB\\traditional\\passed\\higher-order\\Lifantsev\\Ex7OrdinalRec.trs" :
TRS {trsSignature = fromList [("0",0),("app",2),("lim",0),("n",0),("rec",0),("rectuv",0),("s",0)], trsVariables = fromList ["f","t","u","v","x"], trsRMap = [], trsRules = [app(app(app(app(rec,t),u),v),0) -> t,app(app(app(app(rec,t),u),v),app(s,x)) -> app(app(u,x),app(app(app(app(rec,t),u),v),x)),app(app(app(app(rec,t),u),v),app(lim,f)) -> app(app(v,f),app(app(app(app(rectuv,t),u),v),app(f,n))),app(app(app(app(rectuv,t),u),v),n) -> app(app(app(app(rec,t),u),v),n)], trsType = TRSStandard, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\TPDB\\traditional\\passed\\higher-order\\Lifantsev\\Ex6Folding.trs" :
TRS {trsSignature = fromList [("0",0),("1",0),("add",0),("app",2),("cons",0),("fold",0),("mul",0),("nil",0),("prod",0),("sum",0)], trsVariables = fromList ["f","h","l","t","x"], trsRMap = [], trsRules = [app(app(app(fold,f),nil),x) -> x,app(app(app(fold,f),app(app(cons,h),t)),x) -> app(app(app(fold,f),t),app(app(f,x),h)),app(sum,l) -> app(app(app(fold,add),l),0),app(app(app(fold,mul),l),1) -> app(prod,l)], trsType = TRSStandard, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\TPDB\\traditional\\passed\\higher-order\\Lifantsev\\Ex5Sorting.trs" :
TRS {trsSignature = fromList [("0",0),("app",2),("ascending_sort",0),("cons",0),("descending_sort",0),("insert",0),("max",0),("min",0),("nil",0),("s",0),("sort",0)], trsVariables = fromList ["f","g","h","l","t","x","y"], trsRMap = [], trsRules = [app(app(max,0),x) -> x,app(app(max,x),0) -> x,app(app(max,app(s,x)),app(s,y)) -> app(app(max,x),y),app(app(min,0),x) -> 0,app(app(min,x),0) -> 0,app(app(min,app(s,x)),app(s,y)) -> app(app(min,x),y),app(app(app(app(insert,f),g),nil),x) -> app(app(cons,x),nil),app(app(app(app(insert,f),g),app(app(cons,h),t)),x) -> app(app(cons,app(app(f,x),h)),app(app(app(app(insert,f),g),t),app(app(g,x),h))),app(app(app(sort,f),g),nil) -> nil,app(app(app(sort,f),g),app(app(cons,h),t)) -> app(app(app(app(insert,f),g),app(app(app(sort,f),g),t)),h),app(ascending_sort,l) -> app(app(app(sort,min),max),l),app(descending_sort,l) -> app(app(app(sort,max),min),l)], trsType = TRSStandard, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\TPDB\\traditional\\passed\\higher-order\\Lifantsev\\Ex4MapList.trs" :
TRS {trsSignature = fromList [("app",2),("cons",0),("fcons",0),("fmap",0),("fnil",0),("nil",0)], trsVariables = fromList ["f","t","x"], trsRMap = [], trsRules = [app(app(fmap,fnil),x) -> nil,app(app(fmap,app(app(fcons,f),t)),x) -> app(app(cons,app(f,x)),app(app(fmap,t),x))], trsType = TRSStandard, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\TPDB\\traditional\\passed\\higher-order\\Lifantsev\\Ex3Lists.trs" :
TRS {trsSignature = fromList [("app",2),("append",0),("cons",0),("map",0),("nil",0)], trsVariables = fromList ["f","h","l","l1","l2","l3","t"], trsRMap = [], trsRules = [app(app(append,nil),l) -> l,app(app(append,app(app(cons,h),t)),l) -> app(app(cons,h),app(app(append,t),l)),app(app(map,f),nil) -> nil,app(app(map,f),app(app(cons,h),t)) -> app(app(cons,app(f,h)),app(app(map,f),t)),app(app(append,app(app(append,l1),l2)),l3) -> app(app(append,l1),app(app(append,l2),l3)),app(app(map,f),app(app(append,l1),l2)) -> app(app(append,app(app(map,f),l1)),app(app(map,f),l2))], trsType = TRSStandard, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\TPDB\\traditional\\passed\\higher-order\\Lifantsev\\Ex2PrimRec.trs" :
TRS {trsSignature = fromList [("0",0),("app",2),("rec",0),("s",0)], trsVariables = fromList ["g","h","x"], trsRMap = [], trsRules = [app(app(rec,h),app(g,0)) -> g,app(app(rec,h),app(g,app(s,x))) -> app(app(h,x),app(app(rec,h),app(g,x)))], trsType = TRSStandard, trsStrategy = Nothing, signatureBlock = False}

++ File:".\\tests\\TPDB\\traditional\\passed\\higher-order\\Lifantsev\\Ex10Functional.trs" :
TRS {trsSignature = fromList [("0",0),("1",0),("add",0),("app",2),("append",0),("apply",0),("compose",0),("cons",0),("const",0),("fold",0),("id",0),("length",0),("listify",0),("nil",0),("reverse",0),("sum",0),("swap",0),("uncurry",0)], trsVariables = fromList ["f_1","f_2","f_3","g_1","g_2","l","t","x","y","z"], trsRMap = [], trsRules = [app(app(apply,f_1),x) -> app(f_1,x),app(id,x) -> x,app(app(app(uncurry,f_2),x),y) -> app(app(f_2,x),y),app(app(app(swap,f_2),y),x) -> app(app(f_2,x),y),app(app(app(compose,g_1),f_1),x) -> app(g_1,app(f_1,x)),app(app(const,x),y) -> x,app(listify,x) -> app(app(cons,x),nil),app(app(app(app(fold,f_3),g_2),x),nil) -> x,app(app(app(app(fold,f_3),g_2),x),app(app(cons,z),t)) -> app(app(f_3,app(g_2,z)),app(app(app(app(fold,f_3),g_2),x),t)),app(sum,l) -> app(app(app(app(fold,add),id),0),l),app(app(uncurry,app(app(fold,cons),id)),nil) -> id,append -> app(app(compose,app(app(swap,fold),cons)),id),reverse -> app(app(uncurry,app(app(fold,app(swap,append)),listify)),nil),length -> app(app(uncurry,app(app(fold,add),app(cons,1))),0)], trsType = TRSStandard, trsStrategy = Nothing, signatureBlock = False}

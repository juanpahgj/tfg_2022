
++ File:".\\tests\\TPDB\\XML_version\\TRS_Innermost\\raML\\subtrees.raml.xml" :
TRS {trsSignature = fromList [("::",2),("append",2),("append#1",2),("leaf",0),("nil",0),("node",3),("subtrees",1),("subtrees#1",1),("subtrees#2",4),("subtrees#3",5)], trsVariables = fromList ["@l1","@l2","@t","@t1","@t2","@x","@xs"], trsRMap = [], trsRules = [append(@l1,@l2) -> append#1(@l1,@l2),append#1(::(@x,@xs),@l2) -> ::(@x,append(@xs,@l2)),append#1(nil,@l2) -> @l2,subtrees(@t) -> subtrees#1(@t),subtrees#1(leaf) -> nil,subtrees#1(node(@x,@t1,@t2)) -> subtrees#2(subtrees(@t1),@t1,@t2,@x),subtrees#2(@l1,@t1,@t2,@x) -> subtrees#3(subtrees(@t2),@l1,@t1,@t2,@x),subtrees#3(@l2,@l1,@t1,@t2,@x) -> ::(node(@x,@t1,@t2),append(@l1,@l2))], trsType = TRSStandard, trsStrategy = Just INNERMOST, signatureBlock = True}

++ File:".\\tests\\TPDB\\XML_version\\TRS_Innermost\\raML\\rationalPotential.raml.xml" :
TRS {trsSignature = fromList [("::",2),("group3",1),("group3#1",1),("group3#2",2),("group3#3",3),("nil",0),("tuple#3",3),("zip3",3),("zip3#1",3),("zip3#2",4),("zip3#3",5)], trsVariables = fromList ["@l","@l1","@l2","@l3","@x","@xs","@y","@ys","@z","@zs"], trsRMap = [], trsRules = [group3(@l) -> group3#1(@l),group3#1(::(@x,@xs)) -> group3#2(@xs,@x),group3#1(nil) -> nil,group3#2(::(@y,@ys),@x) -> group3#3(@ys,@x,@y),group3#2(nil,@x) -> nil,group3#3(::(@z,@zs),@x,@y) -> ::(tuple#3(@x,@y,@z),group3(@zs)),group3#3(nil,@x,@y) -> nil,zip3(@l1,@l2,@l3) -> zip3#1(@l1,@l2,@l3),zip3#1(::(@x,@xs),@l2,@l3) -> zip3#2(@l2,@l3,@x,@xs),zip3#1(nil,@l2,@l3) -> nil,zip3#2(::(@y,@ys),@l3,@x,@xs) -> zip3#3(@l3,@x,@xs,@y,@ys),zip3#2(nil,@l3,@x,@xs) -> nil,zip3#3(::(@z,@zs),@x,@xs,@y,@ys) -> ::(tuple#3(@x,@y,@z),zip3(@xs,@ys,@zs)),zip3#3(nil,@x,@xs,@y,@ys) -> nil], trsType = TRSStandard, trsStrategy = Just INNERMOST, signatureBlock = True}

++ File:".\\tests\\TPDB\\XML_version\\TRS_Innermost\\raML\\queue.raml.xml" :
TRS {trsSignature = fromList [("#unit",0),("::",2),("breadth",2),("breadth#1",1),("breadth#2",2),("breadth#3",2),("breadth#4",1),("breadth#5",1),("children",4),("children#1",3),("children#2",2),("children#3",4),("copyover",2),("copyover#1",1),("copyover#2",2),("dequeue",2),("dequeue#1",1),("dequeue#2",2),("dequeue#3",1),("dequeue#4",1),("empty",1),("enqueue",2),("enqueue#1",2),("enqueues",2),("enqueues#1",2),("nil",0),("startBreadth",1),("startBreadth#1",1),("startBreadth#2",1),("tuple#2",2),("tuple#4",4)], trsVariables = fromList ["@_@9","@a","@b","@breadth@1","@breadth@2","@breadth@7","@breadth@8","@children@3","@children@4","@children@5","@children@6","@copyover@1","@copyover@2","@dequeue@1","@dequeue@2","@dequeue@3","@dequeue@4","@elem","@inq","@l","@l1","@l2","@outq","@queue","@queue'","@x","@xs","@y","@ys","@z"], trsRMap = [], trsRules = [breadth(@breadth@1,@breadth@2) -> breadth#1(dequeue(@breadth@1,@breadth@2)),breadth#1(tuple#2(@queue',@elem)) -> breadth#2(@elem,@queue'),breadth#2(::(@z,@_@9),@queue') -> breadth#3(breadth#4(@z),@queue'),breadth#2(nil,@queue') -> nil,breadth#3(tuple#2(@x,@ys),@queue') -> ::(@x,breadth#5(enqueues(@ys,@queue'))),breadth#4(tuple#4(@children@3,@children@4,@children@5,@children@6)) -> children(@children@3,@children@4,@children@5,@children@6),breadth#5(tuple#2(@breadth@7,@breadth@8)) -> breadth(@breadth@7,@breadth@8),children(@a,@b,@l1,@l2) -> tuple#2(tuple#2(@a,@b),children#1(@l1,@b,@l2)),children#1(::(@x,@xs),@b,@l2) -> children#3(@l2,@b,@x,@xs),children#1(nil,@b,@l2) -> children#2(@l2,@b),children#2(::(@y,@ys),@b) -> ::(tuple#4(@y,@b,nil,@ys),nil),children#2(nil,@b) -> nil,children#3(::(@y,@ys),@b,@x,@xs) -> ::(tuple#4(@x,@b,nil,@xs),::(tuple#4(@x,@y,@xs,@ys),nil)),children#3(nil,@b,@x,@xs) -> nil,copyover(@copyover@1,@copyover@2) -> copyover#1(tuple#2(@copyover@1,@copyover@2)),copyover#1(tuple#2(@inq,@outq)) -> copyover#2(@inq,@outq),copyover#2(::(@x,@xs),@outq) -> copyover(@xs,::(@x,@outq)),copyover#2(nil,@outq) -> tuple#2(nil,@outq),dequeue(@dequeue@1,@dequeue@2) -> dequeue#1(tuple#2(@dequeue@1,@dequeue@2)),dequeue#1(tuple#2(@inq,@outq)) -> dequeue#2(@outq,@inq),dequeue#2(::(@y,@ys),@inq) -> tuple#2(tuple#2(@inq,@ys),::(@y,nil)),dequeue#2(nil,@inq) -> dequeue#3(@inq),dequeue#3(::(@x,@xs)) -> dequeue#4(copyover(::(@x,@xs),nil)),dequeue#3(nil) -> tuple#2(tuple#2(nil,nil),nil),dequeue#4(tuple#2(@dequeue@3,@dequeue@4)) -> dequeue(@dequeue@3,@dequeue@4),empty(@x) -> tuple#2(nil,nil),enqueue(@x,@queue) -> enqueue#1(@queue,@x),enqueue#1(tuple#2(@inq,@outq),@x) -> tuple#2(::(@x,@inq),@outq),enqueues(@l,@queue) -> enqueues#1(@l,@queue),enqueues#1(::(@x,@xs),@queue) -> enqueues(@xs,enqueue(@x,@queue)),enqueues#1(nil,@queue) -> @queue,startBreadth(@xs) -> startBreadth#1(@xs),startBreadth#1(::(@x,@xs)) -> startBreadth#2(enqueue(tuple#4(@x,@x,@xs,@xs),empty(#unit))),startBreadth#1(nil) -> nil,startBreadth#2(tuple#2(@breadth@1,@breadth@2)) -> breadth(@breadth@1,@breadth@2)], trsType = TRSStandard, trsStrategy = Just INNERMOST, signatureBlock = True}

++ File:".\\tests\\TPDB\\XML_version\\TRS_Innermost\\raML\\appendAll.raml.xml" :
TRS {trsSignature = fromList [("::",2),("append",2),("append#1",2),("appendAll",1),("appendAll#1",1),("appendAll2",1),("appendAll2#1",1),("appendAll3",1),("appendAll3#1",1),("nil",0)], trsVariables = fromList ["@l","@l1","@l2","@ls","@x","@xs"], trsRMap = [], trsRules = [append(@l1,@l2) -> append#1(@l1,@l2),append#1(::(@x,@xs),@l2) -> ::(@x,append(@xs,@l2)),append#1(nil,@l2) -> @l2,appendAll(@l) -> appendAll#1(@l),appendAll#1(::(@l1,@ls)) -> append(@l1,appendAll(@ls)),appendAll#1(nil) -> nil,appendAll2(@l) -> appendAll2#1(@l),appendAll2#1(::(@l1,@ls)) -> append(appendAll(@l1),appendAll2(@ls)),appendAll2#1(nil) -> nil,appendAll3(@l) -> appendAll3#1(@l),appendAll3#1(::(@l1,@ls)) -> append(appendAll2(@l1),appendAll3(@ls)),appendAll3#1(nil) -> nil], trsType = TRSStandard, trsStrategy = Just INNERMOST, signatureBlock = True}


++ File:".\\tests\\TPDB\\XML_version\\TRS_Equational\\Mixed_AC\\YWHM14_5.xml" :
TRS {trsSignature = fromList [("a",0),("f",1),("g",1),("plus",2)], trsVariables = fromList ["x"], trsRMap = [], trsRules = [plus(f(x),g(x)) -> plus(g(x),plus(g(x),g(x))),f(x) -> plus(g(x),a)], trsType = TRSEquational, trsStrategy = Just FULL, signatureBlock = True}

++ File:".\\tests\\TPDB\\XML_version\\TRS_Equational\\Mixed_AC\\YWHM14_4.xml" :
TRS {trsSignature = fromList [("a",0),("ac1",2),("ac2",2),("b",0),("c",0),("f",1)], trsVariables = fromList [], trsRMap = [], trsRules = [ac1(a,ac2(b,c)) -> ac1(b,f(ac2(a,c))),ac2(a,ac1(b,c)) -> ac2(b,f(ac1(a,c)))], trsType = TRSEquational, trsStrategy = Just FULL, signatureBlock = True}

++ File:".\\tests\\TPDB\\XML_version\\TRS_Equational\\Mixed_AC\\YWHM14_3.xml" :
TRS {trsSignature = fromList [("a",0),("b",0),("f",1),("g",1),("h",2),("plus",2)], trsVariables = fromList ["x","y"], trsRMap = [], trsRules = [f(plus(x,y)) -> plus(f(x),y),plus(g(x),y) -> g(plus(x,y)),plus(f(a),g(b)) -> plus(f(b),g(a)),h(a,b) -> h(b,a),h(a,g(g(a))) -> h(g(a),f(a)),h(g(a),a) -> h(a,g(b)),h(g(a),b) -> h(a,g(a))], trsType = TRSEquational, trsStrategy = Just FULL, signatureBlock = True}

++ File:".\\tests\\TPDB\\XML_version\\TRS_Equational\\Mixed_AC\\YWHM14_2.xml" :
TRS {trsSignature = fromList [("a",0),("f",1),("plus",2)], trsVariables = fromList [], trsRMap = [], trsRules = [f(plus(a,a)) -> plus(f(a),f(a)),plus(f(a),f(a)) -> plus(a,f(f(a)))], trsType = TRSEquational, trsStrategy = Just FULL, signatureBlock = True}

++ File:".\\tests\\TPDB\\XML_version\\TRS_Equational\\Mixed_AC\\YWHM14_1.xml" :
TRS {trsSignature = fromList [("a",0),("f",1),("plus",2)], trsVariables = fromList [], trsRMap = [], trsRules = [f(plus(a,a)) -> plus(f(a),f(a)),plus(a,f(f(a))) -> plus(f(a),f(a))], trsType = TRSEquational, trsStrategy = Just FULL, signatureBlock = True}

++ File:".\\tests\\TPDB\\XML_version\\TRS_Equational\\Mixed_AC\\sequent_modulo.xml" :
TRS {trsSignature = fromList [("*",2),(".",2),("1",0),("Pe",1),("and",2),("convf",1),("convs",1),("ef",1),("emptyfset",0),("emptysset",0),("exists",1),("forall",1),("id",0),("imp",2),("neg",1),("or",2),("ron",2),("sequent",2),("shift",0),("substf",2),("substt",2),("virg",2)], trsVariables = fromList ["a","b","f","g","s","t","u","x","y"], trsRMap = [], trsRules = [substt(ef(x),y) -> ef(substt(x,y)),substf(Pe(x),y) -> Pe(substt(x,y)),substf(neg(f),s) -> neg(substf(f,s)),substf(and(f,g),s) -> and(substf(f,s),substf(g,s)),substf(or(f,g),s) -> or(substf(f,s),substf(g,s)),substf(imp(f,g),s) -> imp(substf(f,s),substf(g,s)),substf(forall(f),s) -> forall(substf(f,.(1,ron(s,shift)))),substf(exists(f),s) -> exists(substf(f,.(1,ron(s,shift)))),substt(x,id) -> x,substf(f,id) -> f,substt(substt(x,s),t) -> substt(x,ron(s,t)),substf(substf(f,s),t) -> substf(f,ron(s,t)),substt(1,.(x,s)) -> x,ron(id,s) -> s,ron(shift,.(x,s)) -> s,ron(ron(s,t),u) -> ron(s,ron(t,u)),ron(.(x,s),t) -> .(substt(x,t),ron(s,t)),ron(s,id) -> s,.(1,shift) -> id,.(substt(1,s),ron(shift,s)) -> s,virg(emptyfset,a) -> a,virg(a,a) -> a,*(emptysset,a) -> a,*(a,a) -> a,neg(neg(f)) -> f,and(f,f) -> f,or(f,f) -> f,imp(f,g) -> or(neg(f),g),exists(f) -> neg(forall(neg(f))),sequent(virg(convf(neg(f)),a),b) -> sequent(a,virg(convf(f),b)),sequent(convf(neg(f)),b) -> sequent(emptyfset,virg(convf(f),b)),sequent(a,virg(convf(neg(f)),b)) -> sequent(virg(convf(f),a),b),sequent(a,convf(neg(f))) -> sequent(virg(convf(f),a),emptyfset),sequent(virg(convf(and(f,g)),a),b) -> sequent(virg(convf(g),virg(convf(f),a)),b),sequent(convf(and(f,g)),b) -> sequent(virg(convf(f),convf(g)),b),sequent(a,virg(convf(or(f,g)),b)) -> sequent(a,virg(virg(convf(f),convf(g)),b)),sequent(a,convf(or(f,g))) -> sequent(a,virg(convf(f),convf(g))),convs(sequent(a,virg(convf(and(f,g)),b))) -> *(convs(sequent(a,virg(convf(f),b))),convs(sequent(a,virg(convf(g),b)))),convs(sequent(a,convf(and(f,g)))) -> *(convs(sequent(a,convf(f))),convs(sequent(a,convf(g)))),convs(sequent(virg(convf(or(f,g)),a),b)) -> *(convs(sequent(virg(convf(f),a),b)),convs(sequent(virg(convf(g),a),b))),convs(sequent(convf(or(f,g)),b)) -> *(convs(sequent(convf(f),b)),convs(sequent(convf(g),b))),convs(sequent(virg(convf(f),a),virg(convf(f),b))) -> emptysset,convs(sequent(virg(convf(f),a),convf(f))) -> emptysset,convs(sequent(convf(f),virg(convf(f),b))) -> emptysset,convs(sequent(convf(f),convf(f))) -> emptysset,*(convs(sequent(virg(f,a),virg(g,b))),convs(sequent(a,b))) -> convs(sequent(a,b)),*(convs(sequent(virg(f,a),b)),convs(sequent(a,b))) -> convs(sequent(a,b)),*(convs(sequent(a,virg(f,b))),convs(sequent(a,b))) -> convs(sequent(a,b)),*(convs(sequent(virg(f,a),b)),convs(sequent(a,emptyfset))) -> convs(sequent(a,emptyfset)),*(convs(sequent(emptyfset,b)),convs(sequent(a,virg(f,b)))) -> convs(sequent(emptyfset,b)),*(convs(sequent(emptyfset,b)),convs(sequent(a,b))) -> convs(sequent(emptyfset,b)),*(convs(sequent(a,emptyfset)),convs(sequent(a,b))) -> convs(sequent(a,emptyfset)),*(convs(sequent(emptyfset,emptyfset)),convs(sequent(a,b))) -> convs(sequent(emptyfset,emptyfset))], trsType = TRSEquational, trsStrategy = Just FULL, signatureBlock = True}

++ File:".\\tests\\TPDB\\XML_version\\TRS_Equational\\Mixed_AC\\kusakari1.xml" :
TRS {trsSignature = fromList [("+",2),("a",0),("g",1)], trsVariables = fromList ["x","y"], trsRMap = [], trsRules = [+(g(x),g(y)) -> g(+(g(a),+(x,y)))], trsType = TRSEquational, trsStrategy = Just FULL, signatureBlock = True}

++ File:".\\tests\\TPDB\\XML_version\\TRS_Equational\\Mixed_AC\\intersect.xml" :
TRS {trsSignature = fromList [("0",0),("empty",0),("eq",2),("false",0),("if",3),("inter",2),("s",1),("singl",1),("true",0),("union",2)], trsVariables = fromList ["x","y","z"], trsRMap = [], trsRules = [if(true,x,y) -> x,if(false,x,y) -> y,eq(0,0) -> true,eq(0,s(x)) -> false,eq(s(x),s(y)) -> eq(x,y),union(empty,x) -> x,inter(empty,x) -> empty,inter(union(y,z),x) -> union(inter(x,y),inter(x,z)),inter(singl(x),singl(y)) -> if(eq(x,y),singl(x),empty)], trsType = TRSEquational, trsStrategy = Just FULL, signatureBlock = True}

++ File:".\\tests\\TPDB\\XML_version\\TRS_Equational\\Mixed_AC\\differ.xml" :
TRS {trsSignature = fromList [("*",2),("+",2),("-",2),("/",2),("0",0),("1",0),("2",0),("X",0),("a",0),("dx",1),("exp",2),("ln",1),("neg",1)], trsVariables = fromList ["f","g"], trsRMap = [], trsRules = [dx(X) -> 1,dx(0) -> 0,dx(1) -> 0,dx(a) -> 0,dx(+(f,g)) -> +(dx(f),dx(g)),dx(*(f,g)) -> +(*(dx(f),g),*(dx(g),f)),dx(-(f,g)) -> -(dx(f),dx(g)),dx(neg(f)) -> neg(dx(f)),dx(/(f,g)) -> -(/(dx(f),g),/(*(dx(g),f),exp(g,2))),dx(ln(f)) -> /(dx(f),f),dx(exp(f,g)) -> +(*(dx(f),*(exp(f,-(g,1)),g)),*(dx(g),*(exp(f,g),ln(f))))], trsType = TRSEquational, trsStrategy = Just FULL, signatureBlock = True}

++ File:".\\tests\\TPDB\\XML_version\\TRS_Equational\\Mixed_AC\\boolean_rings.xml" :
TRS {trsSignature = fromList [("F",0),("T",0),("and",2),("equiv",2),("impl",2),("neg",1),("or",2),("xor",2)], trsVariables = fromList ["x","y","z"], trsRMap = [], trsRules = [xor(F,x) -> x,xor(neg(x),x) -> F,and(T,x) -> x,and(F,x) -> F,and(x,x) -> x,and(xor(x,y),z) -> xor(and(x,z),and(y,z)),xor(x,x) -> F,impl(x,y) -> xor(and(x,y),xor(T,x)),or(x,y) -> xor(and(x,y),xor(x,y)),equiv(x,y) -> xor(xor(T,y),x),neg(x) -> xor(T,x)], trsType = TRSEquational, trsStrategy = Just FULL, signatureBlock = True}

++ File:".\\tests\\TPDB\\XML_version\\TRS_Equational\\Mixed_AC\\bag-sum-prod.xml" :
TRS {trsSignature = fromList [("*",2),("+",2),("0",0),("U",2),("empty",0),("prod",1),("s",1),("singl",1),("sum",1)], trsVariables = fromList ["b","x","y"], trsRMap = [], trsRules = [+(0,x) -> x,+(s(x),s(y)) -> s(s(+(x,y))),*(0,x) -> 0,*(s(x),s(y)) -> s(+(+(x,y),*(x,y))),U(empty,b) -> b,sum(empty) -> 0,sum(singl(x)) -> x,sum(U(x,y)) -> +(sum(x),sum(y)),prod(empty) -> s(0),prod(singl(x)) -> x,prod(U(x,y)) -> *(prod(x),prod(y))], trsType = TRSEquational, trsStrategy = Just FULL, signatureBlock = True}

++ File:".\\tests\\TPDB\\XML_version\\TRS_Equational\\Mixed_AC\\bag-sum-prod-distr.xml" :
TRS {trsSignature = fromList [("#",0),("*",2),("+",2),("0",1),("1",1),("U",2),("empty",0),("prod",1),("singl",1),("sum",1)], trsVariables = fromList ["b","x","y","z"], trsRMap = [], trsRules = [0(#) -> #,+(#,x) -> x,+(0(x),0(y)) -> 0(+(x,y)),+(0(x),1(y)) -> 1(+(x,y)),+(1(x),1(y)) -> 0(+(1(#),+(x,y))),*(#,x) -> #,*(0(x),y) -> 0(*(x,y)),*(1(x),y) -> +(0(*(x,y)),y),*(+(y,z),x) -> +(*(x,y),*(x,z)),U(empty,b) -> b,sum(empty) -> 0(#),sum(singl(x)) -> x,sum(U(x,y)) -> +(sum(x),sum(y)),prod(empty) -> 1(#),prod(singl(x)) -> x,prod(U(x,y)) -> *(prod(x),prod(y))], trsType = TRSEquational, trsStrategy = Just FULL, signatureBlock = True}

++ File:".\\tests\\TPDB\\XML_version\\TRS_Equational\\Mixed_AC\\bag-sum-prod-bin.xml" :
TRS {trsSignature = fromList [("#",0),("*",2),("+",2),("0",1),("1",1),("U",2),("empty",0),("prod",1),("singl",1),("sum",1)], trsVariables = fromList ["b","x","y"], trsRMap = [], trsRules = [0(#) -> #,+(#,x) -> x,+(0(x),0(y)) -> 0(+(x,y)),+(0(x),1(y)) -> 1(+(x,y)),+(1(x),1(y)) -> 0(+(1(#),+(x,y))),*(#,x) -> #,*(0(x),y) -> 0(*(x,y)),*(1(x),y) -> +(0(*(x,y)),y),U(empty,b) -> b,sum(empty) -> 0(#),sum(singl(x)) -> x,sum(U(x,y)) -> +(sum(x),sum(y)),prod(empty) -> 1(#),prod(singl(x)) -> x,prod(U(x,y)) -> *(prod(x),prod(y))], trsType = TRSEquational, trsStrategy = Just FULL, signatureBlock = True}


++ File:".\\tests\\TRS_Contextsensitive\\Maude_06\\PALINDROME_nosorts.xml" :
TRS {trsSignature = fromList [("__",2),("and",2),("isNePal",1),("nil",0),("tt",0)], trsVariables = fromList ["I","P","X","Y","Z"], trsRMap = [], trsRules = [__(__(X,Y),Z) -> __(X,__(Y,Z)),__(X,nil) -> X,__(nil,X) -> X,and(tt,X) -> X,isNePal(__(I,__(P,I))) -> tt], trsType = TRSStandard, trsStrategy = Just FULL, signatureBlock = True}

++ File:".\\tests\\TRS_Contextsensitive\\Maude_06\\PALINDROME_nosorts-noand.xml" :
TRS {trsSignature = fromList [("U11",1),("U12",1),("__",2),("isNePal",1),("nil",0),("tt",0)], trsVariables = fromList ["I","P","X","Y","Z"], trsRMap = [], trsRules = [__(__(X,Y),Z) -> __(X,__(Y,Z)),__(X,nil) -> X,__(nil,X) -> X,U11(tt) -> U12(tt),U12(tt) -> tt,isNePal(__(I,__(P,I))) -> U11(tt)], trsType = TRSStandard, trsStrategy = Just FULL, signatureBlock = True}

++ File:".\\tests\\TRS_Contextsensitive\\Maude_06\\PALINDROME_nokinds.xml" :
TRS {trsSignature = fromList [("__",2),("a",0),("and",2),("e",0),("i",0),("isList",1),("isNeList",1),("isNePal",1),("isPal",1),("isQid",1),("nil",0),("o",0),("tt",0),("u",0)], trsVariables = fromList ["I","P","V","V1","V2","X","Y","Z"], trsRMap = [], trsRules = [__(__(X,Y),Z) -> __(X,__(Y,Z)),__(X,nil) -> X,__(nil,X) -> X,and(tt,X) -> X,isList(V) -> isNeList(V),isList(nil) -> tt,isList(__(V1,V2)) -> and(isList(V1),isList(V2)),isNeList(V) -> isQid(V),isNeList(__(V1,V2)) -> and(isList(V1),isNeList(V2)),isNeList(__(V1,V2)) -> and(isNeList(V1),isList(V2)),isNePal(V) -> isQid(V),isNePal(__(I,__(P,I))) -> and(isQid(I),isPal(P)),isPal(V) -> isNePal(V),isPal(nil) -> tt,isQid(a) -> tt,isQid(e) -> tt,isQid(i) -> tt,isQid(o) -> tt,isQid(u) -> tt], trsType = TRSStandard, trsStrategy = Just FULL, signatureBlock = True}

++ File:".\\tests\\TRS_Contextsensitive\\Maude_06\\PALINDROME_nokinds-noand.xml" :
TRS {trsSignature = fromList [("U11",1),("U21",2),("U22",1),("U31",1),("U41",2),("U42",1),("U51",2),("U52",1),("U61",1),("U71",2),("U72",1),("U81",1),("__",2),("a",0),("e",0),("i",0),("isList",1),("isNeList",1),("isNePal",1),("isPal",1),("isQid",1),("nil",0),("o",0),("tt",0),("u",0)], trsVariables = fromList ["I","P","V","V1","V2","X","Y","Z"], trsRMap = [], trsRules = [__(__(X,Y),Z) -> __(X,__(Y,Z)),__(X,nil) -> X,__(nil,X) -> X,U11(tt) -> tt,U21(tt,V2) -> U22(isList(V2)),U22(tt) -> tt,U31(tt) -> tt,U41(tt,V2) -> U42(isNeList(V2)),U42(tt) -> tt,U51(tt,V2) -> U52(isList(V2)),U52(tt) -> tt,U61(tt) -> tt,U71(tt,P) -> U72(isPal(P)),U72(tt) -> tt,U81(tt) -> tt,isList(V) -> U11(isNeList(V)),isList(nil) -> tt,isList(__(V1,V2)) -> U21(isList(V1),V2),isNeList(V) -> U31(isQid(V)),isNeList(__(V1,V2)) -> U41(isList(V1),V2),isNeList(__(V1,V2)) -> U51(isNeList(V1),V2),isNePal(V) -> U61(isQid(V)),isNePal(__(I,__(P,I))) -> U71(isQid(I),P),isPal(V) -> U81(isNePal(V)),isPal(nil) -> tt,isQid(a) -> tt,isQid(e) -> tt,isQid(i) -> tt,isQid(o) -> tt,isQid(u) -> tt], trsType = TRSStandard, trsStrategy = Just FULL, signatureBlock = True}

++ File:".\\tests\\TRS_Contextsensitive\\Maude_06\\PALINDROME_complete.xml" :
TRS {trsSignature = fromList [("U11",2),("U12",1),("U21",3),("U22",2),("U23",1),("U31",2),("U32",1),("U41",3),("U42",2),("U43",1),("U51",3),("U52",2),("U53",1),("U61",2),("U62",1),("U71",2),("U72",1),("__",2),("a",0),("and",2),("e",0),("i",0),("isList",1),("isNeList",1),("isNePal",1),("isPal",1),("isPalListKind",1),("isQid",1),("nil",0),("o",0),("tt",0),("u",0)], trsVariables = fromList ["I","P","V","V1","V2","X","Y","Z"], trsRMap = [], trsRules = [__(__(X,Y),Z) -> __(X,__(Y,Z)),__(X,nil) -> X,__(nil,X) -> X,U11(tt,V) -> U12(isNeList(V)),U12(tt) -> tt,U21(tt,V1,V2) -> U22(isList(V1),V2),U22(tt,V2) -> U23(isList(V2)),U23(tt) -> tt,U31(tt,V) -> U32(isQid(V)),U32(tt) -> tt,U41(tt,V1,V2) -> U42(isList(V1),V2),U42(tt,V2) -> U43(isNeList(V2)),U43(tt) -> tt,U51(tt,V1,V2) -> U52(isNeList(V1),V2),U52(tt,V2) -> U53(isList(V2)),U53(tt) -> tt,U61(tt,V) -> U62(isQid(V)),U62(tt) -> tt,U71(tt,V) -> U72(isNePal(V)),U72(tt) -> tt,and(tt,X) -> X,isList(V) -> U11(isPalListKind(V),V),isList(nil) -> tt,isList(__(V1,V2)) -> U21(and(isPalListKind(V1),isPalListKind(V2)),V1,V2),isNeList(V) -> U31(isPalListKind(V),V),isNeList(__(V1,V2)) -> U41(and(isPalListKind(V1),isPalListKind(V2)),V1,V2),isNeList(__(V1,V2)) -> U51(and(isPalListKind(V1),isPalListKind(V2)),V1,V2),isNePal(V) -> U61(isPalListKind(V),V),isNePal(__(I,__(P,I))) -> and(and(isQid(I),isPalListKind(I)),and(isPal(P),isPalListKind(P))),isPal(V) -> U71(isPalListKind(V),V),isPal(nil) -> tt,isPalListKind(a) -> tt,isPalListKind(e) -> tt,isPalListKind(i) -> tt,isPalListKind(nil) -> tt,isPalListKind(o) -> tt,isPalListKind(u) -> tt,isPalListKind(__(V1,V2)) -> and(isPalListKind(V1),isPalListKind(V2)),isQid(a) -> tt,isQid(e) -> tt,isQid(i) -> tt,isQid(o) -> tt,isQid(u) -> tt], trsType = TRSStandard, trsStrategy = Just FULL, signatureBlock = True}

++ File:".\\tests\\TRS_Contextsensitive\\Maude_06\\PALINDROME_complete-noand.xml" :
TRS {trsSignature = fromList [("U11",2),("U12",2),("U13",1),("U21",3),("U22",3),("U23",3),("U24",3),("U25",2),("U26",1),("U31",2),("U32",2),("U33",1),("U41",3),("U42",3),("U43",3),("U44",3),("U45",2),("U46",1),("U51",3),("U52",3),("U53",3),("U54",3),("U55",2),("U56",1),("U61",2),("U62",2),("U63",1),("U71",3),("U72",2),("U73",2),("U74",1),("U81",2),("U82",2),("U83",1),("U91",2),("U92",1),("__",2),("a",0),("e",0),("i",0),("isList",1),("isNeList",1),("isNePal",1),("isPal",1),("isPalListKind",1),("isQid",1),("nil",0),("o",0),("tt",0),("u",0)], trsVariables = fromList ["I","P","V","V1","V2","X","Y","Z"], trsRMap = [], trsRules = [__(__(X,Y),Z) -> __(X,__(Y,Z)),__(X,nil) -> X,__(nil,X) -> X,U11(tt,V) -> U12(isPalListKind(V),V),U12(tt,V) -> U13(isNeList(V)),U13(tt) -> tt,U21(tt,V1,V2) -> U22(isPalListKind(V1),V1,V2),U22(tt,V1,V2) -> U23(isPalListKind(V2),V1,V2),U23(tt,V1,V2) -> U24(isPalListKind(V2),V1,V2),U24(tt,V1,V2) -> U25(isList(V1),V2),U25(tt,V2) -> U26(isList(V2)),U26(tt) -> tt,U31(tt,V) -> U32(isPalListKind(V),V),U32(tt,V) -> U33(isQid(V)),U33(tt) -> tt,U41(tt,V1,V2) -> U42(isPalListKind(V1),V1,V2),U42(tt,V1,V2) -> U43(isPalListKind(V2),V1,V2),U43(tt,V1,V2) -> U44(isPalListKind(V2),V1,V2),U44(tt,V1,V2) -> U45(isList(V1),V2),U45(tt,V2) -> U46(isNeList(V2)),U46(tt) -> tt,U51(tt,V1,V2) -> U52(isPalListKind(V1),V1,V2),U52(tt,V1,V2) -> U53(isPalListKind(V2),V1,V2),U53(tt,V1,V2) -> U54(isPalListKind(V2),V1,V2),U54(tt,V1,V2) -> U55(isNeList(V1),V2),U55(tt,V2) -> U56(isList(V2)),U56(tt) -> tt,U61(tt,V) -> U62(isPalListKind(V),V),U62(tt,V) -> U63(isQid(V)),U63(tt) -> tt,U71(tt,I,P) -> U72(isPalListKind(I),P),U72(tt,P) -> U73(isPal(P),P),U73(tt,P) -> U74(isPalListKind(P)),U74(tt) -> tt,U81(tt,V) -> U82(isPalListKind(V),V),U82(tt,V) -> U83(isNePal(V)),U83(tt) -> tt,U91(tt,V2) -> U92(isPalListKind(V2)),U92(tt) -> tt,isList(V) -> U11(isPalListKind(V),V),isList(nil) -> tt,isList(__(V1,V2)) -> U21(isPalListKind(V1),V1,V2),isNeList(V) -> U31(isPalListKind(V),V),isNeList(__(V1,V2)) -> U41(isPalListKind(V1),V1,V2),isNeList(__(V1,V2)) -> U51(isPalListKind(V1),V1,V2),isNePal(V) -> U61(isPalListKind(V),V),isNePal(__(I,__(P,I))) -> U71(isQid(I),I,P),isPal(V) -> U81(isPalListKind(V),V),isPal(nil) -> tt,isPalListKind(a) -> tt,isPalListKind(e) -> tt,isPalListKind(i) -> tt,isPalListKind(nil) -> tt,isPalListKind(o) -> tt,isPalListKind(u) -> tt,isPalListKind(__(V1,V2)) -> U91(isPalListKind(V1),V2),isQid(a) -> tt,isQid(e) -> tt,isQid(i) -> tt,isQid(o) -> tt,isQid(u) -> tt], trsType = TRSStandard, trsStrategy = Just FULL, signatureBlock = True}

++ File:".\\tests\\TRS_Contextsensitive\\Maude_06\\OvConsOS_nosorts.xml" :
TRS {trsSignature = fromList [("0",0),("and",2),("cons",2),("length",1),("nil",0),("s",1),("take",2),("tt",0),("zeros",0)], trsVariables = fromList ["IL","L","M","N","X"], trsRMap = [], trsRules = [zeros -> cons(0,zeros),and(tt,X) -> X,length(nil) -> 0,length(cons(N,L)) -> s(length(L)),take(0,IL) -> nil,take(s(M),cons(N,IL)) -> cons(N,take(M,IL))], trsType = TRSStandard, trsStrategy = Just FULL, signatureBlock = True}

++ File:".\\tests\\TRS_Contextsensitive\\Maude_06\\OvConsOS_nosorts-noand.xml" :
TRS {trsSignature = fromList [("0",0),("U11",2),("U12",2),("U21",4),("U22",4),("U23",4),("cons",2),("length",1),("nil",0),("s",1),("take",2),("tt",0),("zeros",0)], trsVariables = fromList ["IL","L","M","N"], trsRMap = [], trsRules = [zeros -> cons(0,zeros),U11(tt,L) -> U12(tt,L),U12(tt,L) -> s(length(L)),U21(tt,IL,M,N) -> U22(tt,IL,M,N),U22(tt,IL,M,N) -> U23(tt,IL,M,N),U23(tt,IL,M,N) -> cons(N,take(M,IL)),length(nil) -> 0,length(cons(N,L)) -> U11(tt,L),take(0,IL) -> nil,take(s(M),cons(N,IL)) -> U21(tt,IL,M,N)], trsType = TRSStandard, trsStrategy = Just FULL, signatureBlock = True}

++ File:".\\tests\\TRS_Contextsensitive\\Maude_06\\OvConsOS_nokinds.xml" :
TRS {trsSignature = fromList [("0",0),("U11",2),("U21",1),("U31",4),("and",2),("cons",2),("isNat",1),("isNatIList",1),("isNatList",1),("length",1),("nil",0),("s",1),("take",2),("tt",0),("zeros",0)], trsVariables = fromList ["IL","L","M","N","V","V1","V2","X"], trsRMap = [], trsRules = [zeros -> cons(0,zeros),U11(tt,L) -> s(length(L)),U21(tt) -> nil,U31(tt,IL,M,N) -> cons(N,take(M,IL)),and(tt,X) -> X,isNat(0) -> tt,isNat(length(V1)) -> isNatList(V1),isNat(s(V1)) -> isNat(V1),isNatIList(V) -> isNatList(V),isNatIList(zeros) -> tt,isNatIList(cons(V1,V2)) -> and(isNat(V1),isNatIList(V2)),isNatList(nil) -> tt,isNatList(cons(V1,V2)) -> and(isNat(V1),isNatList(V2)),isNatList(take(V1,V2)) -> and(isNat(V1),isNatIList(V2)),length(nil) -> 0,length(cons(N,L)) -> U11(and(isNatList(L),isNat(N)),L),take(0,IL) -> U21(isNatIList(IL)),take(s(M),cons(N,IL)) -> U31(and(isNatIList(IL),and(isNat(M),isNat(N))),IL,M,N)], trsType = TRSStandard, trsStrategy = Just FULL, signatureBlock = True}

++ File:".\\tests\\TRS_Contextsensitive\\Maude_06\\OvConsOS_nokinds-noand.xml" :
TRS {trsSignature = fromList [("0",0),("U11",1),("U21",1),("U31",1),("U41",2),("U42",1),("U51",2),("U52",1),("U61",2),("U62",1),("U71",3),("U72",2),("U81",1),("U91",4),("U92",4),("U93",4),("cons",2),("isNat",1),("isNatIList",1),("isNatList",1),("length",1),("nil",0),("s",1),("take",2),("tt",0),("zeros",0)], trsVariables = fromList ["IL","L","M","N","V","V1","V2"], trsRMap = [], trsRules = [zeros -> cons(0,zeros),U11(tt) -> tt,U21(tt) -> tt,U31(tt) -> tt,U41(tt,V2) -> U42(isNatIList(V2)),U42(tt) -> tt,U51(tt,V2) -> U52(isNatList(V2)),U52(tt) -> tt,U61(tt,V2) -> U62(isNatIList(V2)),U62(tt) -> tt,U71(tt,L,N) -> U72(isNat(N),L),U72(tt,L) -> s(length(L)),U81(tt) -> nil,U91(tt,IL,M,N) -> U92(isNat(M),IL,M,N),U92(tt,IL,M,N) -> U93(isNat(N),IL,M,N),U93(tt,IL,M,N) -> cons(N,take(M,IL)),isNat(0) -> tt,isNat(length(V1)) -> U11(isNatList(V1)),isNat(s(V1)) -> U21(isNat(V1)),isNatIList(V) -> U31(isNatList(V)),isNatIList(zeros) -> tt,isNatIList(cons(V1,V2)) -> U41(isNat(V1),V2),isNatList(nil) -> tt,isNatList(cons(V1,V2)) -> U51(isNat(V1),V2),isNatList(take(V1,V2)) -> U61(isNat(V1),V2),length(nil) -> 0,length(cons(N,L)) -> U71(isNatList(L),L,N),take(0,IL) -> U81(isNatIList(IL)),take(s(M),cons(N,IL)) -> U91(isNatIList(IL),IL,M,N)], trsType = TRSStandard, trsStrategy = Just FULL, signatureBlock = True}

++ File:".\\tests\\TRS_Contextsensitive\\Maude_06\\OvConsOS_complete.xml" :
TRS {trsSignature = fromList [("0",0),("U11",2),("U12",1),("U21",2),("U22",1),("U31",2),("U32",1),("U41",3),("U42",2),("U43",1),("U51",3),("U52",2),("U53",1),("U61",3),("U62",2),("U63",1),("U71",2),("U81",1),("U91",4),("and",2),("cons",2),("isNat",1),("isNatIList",1),("isNatIListKind",1),("isNatKind",1),("isNatList",1),("length",1),("nil",0),("s",1),("take",2),("tt",0),("zeros",0)], trsVariables = fromList ["IL","L","M","N","V","V1","V2","X"], trsRMap = [], trsRules = [zeros -> cons(0,zeros),U11(tt,V1) -> U12(isNatList(V1)),U12(tt) -> tt,U21(tt,V1) -> U22(isNat(V1)),U22(tt) -> tt,U31(tt,V) -> U32(isNatList(V)),U32(tt) -> tt,U41(tt,V1,V2) -> U42(isNat(V1),V2),U42(tt,V2) -> U43(isNatIList(V2)),U43(tt) -> tt,U51(tt,V1,V2) -> U52(isNat(V1),V2),U52(tt,V2) -> U53(isNatList(V2)),U53(tt) -> tt,U61(tt,V1,V2) -> U62(isNat(V1),V2),U62(tt,V2) -> U63(isNatIList(V2)),U63(tt) -> tt,U71(tt,L) -> s(length(L)),U81(tt) -> nil,U91(tt,IL,M,N) -> cons(N,take(M,IL)),and(tt,X) -> X,isNat(0) -> tt,isNat(length(V1)) -> U11(isNatIListKind(V1),V1),isNat(s(V1)) -> U21(isNatKind(V1),V1),isNatIList(V) -> U31(isNatIListKind(V),V),isNatIList(zeros) -> tt,isNatIList(cons(V1,V2)) -> U41(and(isNatKind(V1),isNatIListKind(V2)),V1,V2),isNatIListKind(nil) -> tt,isNatIListKind(zeros) -> tt,isNatIListKind(cons(V1,V2)) -> and(isNatKind(V1),isNatIListKind(V2)),isNatIListKind(take(V1,V2)) -> and(isNatKind(V1),isNatIListKind(V2)),isNatKind(0) -> tt,isNatKind(length(V1)) -> isNatIListKind(V1),isNatKind(s(V1)) -> isNatKind(V1),isNatList(nil) -> tt,isNatList(cons(V1,V2)) -> U51(and(isNatKind(V1),isNatIListKind(V2)),V1,V2),isNatList(take(V1,V2)) -> U61(and(isNatKind(V1),isNatIListKind(V2)),V1,V2),length(nil) -> 0,length(cons(N,L)) -> U71(and(and(isNatList(L),isNatIListKind(L)),and(isNat(N),isNatKind(N))),L),take(0,IL) -> U81(and(isNatIList(IL),isNatIListKind(IL))),take(s(M),cons(N,IL)) -> U91(and(and(isNatIList(IL),isNatIListKind(IL)),and(and(isNat(M),isNatKind(M)),and(isNat(N),isNatKind(N)))),IL,M,N)], trsType = TRSStandard, trsStrategy = Just FULL, signatureBlock = True}

++ File:".\\tests\\TRS_Contextsensitive\\Maude_06\\OvConsOS_complete-noand.xml" :
TRS {trsSignature = fromList [("0",0),("U101",3),("U102",3),("U103",3),("U104",3),("U105",2),("U106",1),("U11",2),("U111",3),("U112",3),("U113",3),("U114",2),("U12",2),("U121",2),("U122",1),("U13",1),("U131",4),("U132",4),("U133",4),("U134",4),("U135",4),("U136",4),("U21",2),("U22",2),("U23",1),("U31",2),("U32",2),("U33",1),("U41",3),("U42",3),("U43",3),("U44",3),("U45",2),("U46",1),("U51",2),("U52",1),("U61",2),("U62",1),("U71",1),("U81",1),("U91",3),("U92",3),("U93",3),("U94",3),("U95",2),("U96",1),("cons",2),("isNat",1),("isNatIList",1),("isNatIListKind",1),("isNatKind",1),("isNatList",1),("length",1),("nil",0),("s",1),("take",2),("tt",0),("zeros",0)], trsVariables = fromList ["IL","L","M","N","V","V1","V2"], trsRMap = [], trsRules = [zeros -> cons(0,zeros),U101(tt,V1,V2) -> U102(isNatKind(V1),V1,V2),U102(tt,V1,V2) -> U103(isNatIListKind(V2),V1,V2),U103(tt,V1,V2) -> U104(isNatIListKind(V2),V1,V2),U104(tt,V1,V2) -> U105(isNat(V1),V2),U105(tt,V2) -> U106(isNatIList(V2)),U106(tt) -> tt,U11(tt,V1) -> U12(isNatIListKind(V1),V1),U111(tt,L,N) -> U112(isNatIListKind(L),L,N),U112(tt,L,N) -> U113(isNat(N),L,N),U113(tt,L,N) -> U114(isNatKind(N),L),U114(tt,L) -> s(length(L)),U12(tt,V1) -> U13(isNatList(V1)),U121(tt,IL) -> U122(isNatIListKind(IL)),U122(tt) -> nil,U13(tt) -> tt,U131(tt,IL,M,N) -> U132(isNatIListKind(IL),IL,M,N),U132(tt,IL,M,N) -> U133(isNat(M),IL,M,N),U133(tt,IL,M,N) -> U134(isNatKind(M),IL,M,N),U134(tt,IL,M,N) -> U135(isNat(N),IL,M,N),U135(tt,IL,M,N) -> U136(isNatKind(N),IL,M,N),U136(tt,IL,M,N) -> cons(N,take(M,IL)),U21(tt,V1) -> U22(isNatKind(V1),V1),U22(tt,V1) -> U23(isNat(V1)),U23(tt) -> tt,U31(tt,V) -> U32(isNatIListKind(V),V),U32(tt,V) -> U33(isNatList(V)),U33(tt) -> tt,U41(tt,V1,V2) -> U42(isNatKind(V1),V1,V2),U42(tt,V1,V2) -> U43(isNatIListKind(V2),V1,V2),U43(tt,V1,V2) -> U44(isNatIListKind(V2),V1,V2),U44(tt,V1,V2) -> U45(isNat(V1),V2),U45(tt,V2) -> U46(isNatIList(V2)),U46(tt) -> tt,U51(tt,V2) -> U52(isNatIListKind(V2)),U52(tt) -> tt,U61(tt,V2) -> U62(isNatIListKind(V2)),U62(tt) -> tt,U71(tt) -> tt,U81(tt) -> tt,U91(tt,V1,V2) -> U92(isNatKind(V1),V1,V2),U92(tt,V1,V2) -> U93(isNatIListKind(V2),V1,V2),U93(tt,V1,V2) -> U94(isNatIListKind(V2),V1,V2),U94(tt,V1,V2) -> U95(isNat(V1),V2),U95(tt,V2) -> U96(isNatList(V2)),U96(tt) -> tt,isNat(0) -> tt,isNat(length(V1)) -> U11(isNatIListKind(V1),V1),isNat(s(V1)) -> U21(isNatKind(V1),V1),isNatIList(V) -> U31(isNatIListKind(V),V),isNatIList(zeros) -> tt,isNatIList(cons(V1,V2)) -> U41(isNatKind(V1),V1,V2),isNatIListKind(nil) -> tt,isNatIListKind(zeros) -> tt,isNatIListKind(cons(V1,V2)) -> U51(isNatKind(V1),V2),isNatIListKind(take(V1,V2)) -> U61(isNatKind(V1),V2),isNatKind(0) -> tt,isNatKind(length(V1)) -> U71(isNatIListKind(V1)),isNatKind(s(V1)) -> U81(isNatKind(V1)),isNatList(nil) -> tt,isNatList(cons(V1,V2)) -> U91(isNatKind(V1),V1,V2),isNatList(take(V1,V2)) -> U101(isNatKind(V1),V1,V2),length(nil) -> 0,length(cons(N,L)) -> U111(isNatList(L),L,N),take(0,IL) -> U121(isNatIList(IL),IL),take(s(M),cons(N,IL)) -> U131(isNatIList(IL),IL,M,N)], trsType = TRSStandard, trsStrategy = Just FULL, signatureBlock = True}

++ File:".\\tests\\TRS_Contextsensitive\\Maude_06\\MYNAT_nosorts.xml" :
TRS {trsSignature = fromList [("0",0),("and",2),("plus",2),("s",1),("tt",0),("x",2)], trsVariables = fromList ["M","N","X"], trsRMap = [], trsRules = [and(tt,X) -> X,plus(N,0) -> N,plus(N,s(M)) -> s(plus(N,M)),x(N,0) -> 0,x(N,s(M)) -> plus(x(N,M),N)], trsType = TRSStandard, trsStrategy = Just FULL, signatureBlock = True}

++ File:".\\tests\\TRS_Contextsensitive\\Maude_06\\MYNAT_nosorts-peanoSimple.xml" :
TRS {trsSignature = fromList [("0",0),("and",2),("plus",2),("s",1),("tt",0)], trsVariables = fromList ["M","N","X"], trsRMap = [], trsRules = [and(tt,X) -> X,plus(N,0) -> N,plus(N,s(M)) -> s(plus(N,M))], trsType = TRSStandard, trsStrategy = Just FULL, signatureBlock = True}

++ File:".\\tests\\TRS_Contextsensitive\\Maude_06\\MYNAT_nosorts-noand.xml" :
TRS {trsSignature = fromList [("0",0),("U11",3),("U12",3),("U21",3),("U22",3),("plus",2),("s",1),("tt",0),("x",2)], trsVariables = fromList ["M","N"], trsRMap = [], trsRules = [U11(tt,M,N) -> U12(tt,M,N),U12(tt,M,N) -> s(plus(N,M)),U21(tt,M,N) -> U22(tt,M,N),U22(tt,M,N) -> plus(x(N,M),N),plus(N,0) -> N,plus(N,s(M)) -> U11(tt,M,N),x(N,0) -> 0,x(N,s(M)) -> U21(tt,M,N)], trsType = TRSStandard, trsStrategy = Just FULL, signatureBlock = True}

++ File:".\\tests\\TRS_Contextsensitive\\Maude_06\\MYNAT_nosorts-noand-peanoSimple.xml" :
TRS {trsSignature = fromList [("0",0),("U11",3),("U12",3),("plus",2),("s",1),("tt",0)], trsVariables = fromList ["M","N"], trsRMap = [], trsRules = [U11(tt,M,N) -> U12(tt,M,N),U12(tt,M,N) -> s(plus(N,M)),plus(N,0) -> N,plus(N,s(M)) -> U11(tt,M,N)], trsType = TRSStandard, trsStrategy = Just FULL, signatureBlock = True}

++ File:".\\tests\\TRS_Contextsensitive\\Maude_06\\MYNAT_nokinds.xml" :
TRS {trsSignature = fromList [("0",0),("U11",2),("U21",3),("U31",1),("U41",3),("and",2),("isNat",1),("plus",2),("s",1),("tt",0),("x",2)], trsVariables = fromList ["M","N","V1","V2","X"], trsRMap = [], trsRules = [U11(tt,N) -> N,U21(tt,M,N) -> s(plus(N,M)),U31(tt) -> 0,U41(tt,M,N) -> plus(x(N,M),N),and(tt,X) -> X,isNat(0) -> tt,isNat(plus(V1,V2)) -> and(isNat(V1),isNat(V2)),isNat(s(V1)) -> isNat(V1),isNat(x(V1,V2)) -> and(isNat(V1),isNat(V2)),plus(N,0) -> U11(isNat(N),N),plus(N,s(M)) -> U21(and(isNat(M),isNat(N)),M,N),x(N,0) -> U31(isNat(N)),x(N,s(M)) -> U41(and(isNat(M),isNat(N)),M,N)], trsType = TRSStandard, trsStrategy = Just FULL, signatureBlock = True}

++ File:".\\tests\\TRS_Contextsensitive\\Maude_06\\MYNAT_nokinds-peanoSimple.xml" :
TRS {trsSignature = fromList [("0",0),("U11",2),("U21",3),("and",2),("isNat",1),("plus",2),("s",1),("tt",0)], trsVariables = fromList ["M","N","V1","V2","X"], trsRMap = [], trsRules = [U11(tt,N) -> N,U21(tt,M,N) -> s(plus(N,M)),and(tt,X) -> X,isNat(0) -> tt,isNat(plus(V1,V2)) -> and(isNat(V1),isNat(V2)),isNat(s(V1)) -> isNat(V1),plus(N,0) -> U11(isNat(N),N),plus(N,s(M)) -> U21(and(isNat(M),isNat(N)),M,N)], trsType = TRSStandard, trsStrategy = Just FULL, signatureBlock = True}

++ File:".\\tests\\TRS_Contextsensitive\\Maude_06\\MYNAT_nokinds-noand.xml" :
TRS {trsSignature = fromList [("0",0),("U11",2),("U12",1),("U21",1),("U31",2),("U32",1),("U41",2),("U51",3),("U52",3),("U61",1),("U71",3),("U72",3),("isNat",1),("plus",2),("s",1),("tt",0),("x",2)], trsVariables = fromList ["M","N","V1","V2"], trsRMap = [], trsRules = [U11(tt,V2) -> U12(isNat(V2)),U12(tt) -> tt,U21(tt) -> tt,U31(tt,V2) -> U32(isNat(V2)),U32(tt) -> tt,U41(tt,N) -> N,U51(tt,M,N) -> U52(isNat(N),M,N),U52(tt,M,N) -> s(plus(N,M)),U61(tt) -> 0,U71(tt,M,N) -> U72(isNat(N),M,N),U72(tt,M,N) -> plus(x(N,M),N),isNat(0) -> tt,isNat(plus(V1,V2)) -> U11(isNat(V1),V2),isNat(s(V1)) -> U21(isNat(V1)),isNat(x(V1,V2)) -> U31(isNat(V1),V2),plus(N,0) -> U41(isNat(N),N),plus(N,s(M)) -> U51(isNat(M),M,N),x(N,0) -> U61(isNat(N)),x(N,s(M)) -> U71(isNat(M),M,N)], trsType = TRSStandard, trsStrategy = Just FULL, signatureBlock = True}

++ File:".\\tests\\TRS_Contextsensitive\\Maude_06\\MYNAT_nokinds-noand-peanoSimple.xml" :
TRS {trsSignature = fromList [("0",0),("U11",2),("U12",1),("U21",1),("U31",2),("U41",3),("U42",3),("isNat",1),("plus",2),("s",1),("tt",0)], trsVariables = fromList ["M","N","V1","V2"], trsRMap = [], trsRules = [U11(tt,V2) -> U12(isNat(V2)),U12(tt) -> tt,U21(tt) -> tt,U31(tt,N) -> N,U41(tt,M,N) -> U42(isNat(N),M,N),U42(tt,M,N) -> s(plus(N,M)),isNat(0) -> tt,isNat(plus(V1,V2)) -> U11(isNat(V1),V2),isNat(s(V1)) -> U21(isNat(V1)),plus(N,0) -> U31(isNat(N),N),plus(N,s(M)) -> U41(isNat(M),M,N)], trsType = TRSStandard, trsStrategy = Just FULL, signatureBlock = True}

++ File:".\\tests\\TRS_Contextsensitive\\Maude_06\\MYNAT_complete.xml" :
TRS {trsSignature = fromList [("0",0),("U11",3),("U12",2),("U13",1),("U21",2),("U22",1),("U31",3),("U32",2),("U33",1),("U41",2),("U51",3),("U61",1),("U71",3),("and",2),("isNat",1),("isNatKind",1),("plus",2),("s",1),("tt",0),("x",2)], trsVariables = fromList ["M","N","V1","V2","X"], trsRMap = [], trsRules = [U11(tt,V1,V2) -> U12(isNat(V1),V2),U12(tt,V2) -> U13(isNat(V2)),U13(tt) -> tt,U21(tt,V1) -> U22(isNat(V1)),U22(tt) -> tt,U31(tt,V1,V2) -> U32(isNat(V1),V2),U32(tt,V2) -> U33(isNat(V2)),U33(tt) -> tt,U41(tt,N) -> N,U51(tt,M,N) -> s(plus(N,M)),U61(tt) -> 0,U71(tt,M,N) -> plus(x(N,M),N),and(tt,X) -> X,isNat(0) -> tt,isNat(plus(V1,V2)) -> U11(and(isNatKind(V1),isNatKind(V2)),V1,V2),isNat(s(V1)) -> U21(isNatKind(V1),V1),isNat(x(V1,V2)) -> U31(and(isNatKind(V1),isNatKind(V2)),V1,V2),isNatKind(0) -> tt,isNatKind(plus(V1,V2)) -> and(isNatKind(V1),isNatKind(V2)),isNatKind(s(V1)) -> isNatKind(V1),isNatKind(x(V1,V2)) -> and(isNatKind(V1),isNatKind(V2)),plus(N,0) -> U41(and(isNat(N),isNatKind(N)),N),plus(N,s(M)) -> U51(and(and(isNat(M),isNatKind(M)),and(isNat(N),isNatKind(N))),M,N),x(N,0) -> U61(and(isNat(N),isNatKind(N))),x(N,s(M)) -> U71(and(and(isNat(M),isNatKind(M)),and(isNat(N),isNatKind(N))),M,N)], trsType = TRSStandard, trsStrategy = Just FULL, signatureBlock = True}

++ File:".\\tests\\TRS_Contextsensitive\\Maude_06\\MYNAT_complete-peanoSimple.xml" :
TRS {trsSignature = fromList [("0",0),("U11",3),("U12",2),("U13",1),("U21",2),("U22",1),("U31",2),("U41",3),("and",2),("isNat",1),("isNatKind",1),("plus",2),("s",1),("tt",0)], trsVariables = fromList ["M","N","V1","V2","X"], trsRMap = [], trsRules = [U11(tt,V1,V2) -> U12(isNat(V1),V2),U12(tt,V2) -> U13(isNat(V2)),U13(tt) -> tt,U21(tt,V1) -> U22(isNat(V1)),U22(tt) -> tt,U31(tt,N) -> N,U41(tt,M,N) -> s(plus(N,M)),and(tt,X) -> X,isNat(0) -> tt,isNat(plus(V1,V2)) -> U11(and(isNatKind(V1),isNatKind(V2)),V1,V2),isNat(s(V1)) -> U21(isNatKind(V1),V1),isNatKind(0) -> tt,isNatKind(plus(V1,V2)) -> and(isNatKind(V1),isNatKind(V2)),isNatKind(s(V1)) -> isNatKind(V1),plus(N,0) -> U31(and(isNat(N),isNatKind(N)),N),plus(N,s(M)) -> U41(and(and(isNat(M),isNatKind(M)),and(isNat(N),isNatKind(N))),M,N)], trsType = TRSStandard, trsStrategy = Just FULL, signatureBlock = True}

++ File:".\\tests\\TRS_Contextsensitive\\Maude_06\\MYNAT_complete-noand.xml" :
TRS {trsSignature = fromList [("0",0),("U101",3),("U102",3),("U103",3),("U104",3),("U11",3),("U12",3),("U13",3),("U14",3),("U15",2),("U16",1),("U21",2),("U22",2),("U23",1),("U31",3),("U32",3),("U33",3),("U34",3),("U35",2),("U36",1),("U41",2),("U42",1),("U51",1),("U61",2),("U62",1),("U71",2),("U72",2),("U81",3),("U82",3),("U83",3),("U84",3),("U91",2),("U92",1),("isNat",1),("isNatKind",1),("plus",2),("s",1),("tt",0),("x",2)], trsVariables = fromList ["M","N","V1","V2"], trsRMap = [], trsRules = [U101(tt,M,N) -> U102(isNatKind(M),M,N),U102(tt,M,N) -> U103(isNat(N),M,N),U103(tt,M,N) -> U104(isNatKind(N),M,N),U104(tt,M,N) -> plus(x(N,M),N),U11(tt,V1,V2) -> U12(isNatKind(V1),V1,V2),U12(tt,V1,V2) -> U13(isNatKind(V2),V1,V2),U13(tt,V1,V2) -> U14(isNatKind(V2),V1,V2),U14(tt,V1,V2) -> U15(isNat(V1),V2),U15(tt,V2) -> U16(isNat(V2)),U16(tt) -> tt,U21(tt,V1) -> U22(isNatKind(V1),V1),U22(tt,V1) -> U23(isNat(V1)),U23(tt) -> tt,U31(tt,V1,V2) -> U32(isNatKind(V1),V1,V2),U32(tt,V1,V2) -> U33(isNatKind(V2),V1,V2),U33(tt,V1,V2) -> U34(isNatKind(V2),V1,V2),U34(tt,V1,V2) -> U35(isNat(V1),V2),U35(tt,V2) -> U36(isNat(V2)),U36(tt) -> tt,U41(tt,V2) -> U42(isNatKind(V2)),U42(tt) -> tt,U51(tt) -> tt,U61(tt,V2) -> U62(isNatKind(V2)),U62(tt) -> tt,U71(tt,N) -> U72(isNatKind(N),N),U72(tt,N) -> N,U81(tt,M,N) -> U82(isNatKind(M),M,N),U82(tt,M,N) -> U83(isNat(N),M,N),U83(tt,M,N) -> U84(isNatKind(N),M,N),U84(tt,M,N) -> s(plus(N,M)),U91(tt,N) -> U92(isNatKind(N)),U92(tt) -> 0,isNat(0) -> tt,isNat(plus(V1,V2)) -> U11(isNatKind(V1),V1,V2),isNat(s(V1)) -> U21(isNatKind(V1),V1),isNat(x(V1,V2)) -> U31(isNatKind(V1),V1,V2),isNatKind(0) -> tt,isNatKind(plus(V1,V2)) -> U41(isNatKind(V1),V2),isNatKind(s(V1)) -> U51(isNatKind(V1)),isNatKind(x(V1,V2)) -> U61(isNatKind(V1),V2),plus(N,0) -> U71(isNat(N),N),plus(N,s(M)) -> U81(isNat(M),M,N),x(N,0) -> U91(isNat(N),N),x(N,s(M)) -> U101(isNat(M),M,N)], trsType = TRSStandard, trsStrategy = Just FULL, signatureBlock = True}

++ File:".\\tests\\TRS_Contextsensitive\\Maude_06\\MYNAT_complete-noand-peanoSimple.xml" :
TRS {trsSignature = fromList [("0",0),("U11",3),("U12",3),("U13",3),("U14",3),("U15",2),("U16",1),("U21",2),("U22",2),("U23",1),("U31",2),("U32",1),("U41",1),("U51",2),("U52",2),("U61",3),("U62",3),("U63",3),("U64",3),("isNat",1),("isNatKind",1),("plus",2),("s",1),("tt",0)], trsVariables = fromList ["M","N","V1","V2"], trsRMap = [], trsRules = [U11(tt,V1,V2) -> U12(isNatKind(V1),V1,V2),U12(tt,V1,V2) -> U13(isNatKind(V2),V1,V2),U13(tt,V1,V2) -> U14(isNatKind(V2),V1,V2),U14(tt,V1,V2) -> U15(isNat(V1),V2),U15(tt,V2) -> U16(isNat(V2)),U16(tt) -> tt,U21(tt,V1) -> U22(isNatKind(V1),V1),U22(tt,V1) -> U23(isNat(V1)),U23(tt) -> tt,U31(tt,V2) -> U32(isNatKind(V2)),U32(tt) -> tt,U41(tt) -> tt,U51(tt,N) -> U52(isNatKind(N),N),U52(tt,N) -> N,U61(tt,M,N) -> U62(isNatKind(M),M,N),U62(tt,M,N) -> U63(isNat(N),M,N),U63(tt,M,N) -> U64(isNatKind(N),M,N),U64(tt,M,N) -> s(plus(N,M)),isNat(0) -> tt,isNat(plus(V1,V2)) -> U11(isNatKind(V1),V1,V2),isNat(s(V1)) -> U21(isNatKind(V1),V1),isNatKind(0) -> tt,isNatKind(plus(V1,V2)) -> U31(isNatKind(V1),V2),isNatKind(s(V1)) -> U41(isNatKind(V1)),plus(N,0) -> U51(isNat(N),N),plus(N,s(M)) -> U61(isNat(M),M,N)], trsType = TRSStandard, trsStrategy = Just FULL, signatureBlock = True}

++ File:".\\tests\\TRS_Contextsensitive\\Maude_06\\LISTUTILITIES_nosorts.xml" :
TRS {trsSignature = fromList [("0",0),("U11",4),("U12",2),("afterNth",2),("and",2),("cons",2),("fst",1),("head",1),("natsFrom",1),("nil",0),("pair",2),("s",1),("sel",2),("snd",1),("splitAt",2),("tail",1),("take",2),("tt",0)], trsVariables = fromList ["N","X","XS","Y","YS","ZS"], trsRMap = [], trsRules = [U11(tt,N,X,XS) -> U12(splitAt(N,XS),X),U12(pair(YS,ZS),X) -> pair(cons(X,YS),ZS),afterNth(N,XS) -> snd(splitAt(N,XS)),and(tt,X) -> X,fst(pair(X,Y)) -> X,head(cons(N,XS)) -> N,natsFrom(N) -> cons(N,natsFrom(s(N))),sel(N,XS) -> head(afterNth(N,XS)),snd(pair(X,Y)) -> Y,splitAt(0,XS) -> pair(nil,XS),splitAt(s(N),cons(X,XS)) -> U11(tt,N,X,XS),tail(cons(N,XS)) -> XS,take(N,XS) -> fst(splitAt(N,XS))], trsType = TRSStandard, trsStrategy = Just FULL, signatureBlock = True}

++ File:".\\tests\\TRS_Contextsensitive\\Maude_06\\LISTUTILITIES_nosorts-noand.xml" :
TRS {trsSignature = fromList [("0",0),("U11",3),("U12",3),("U21",2),("U22",2),("U31",2),("U32",2),("U41",3),("U42",3),("U51",2),("U52",2),("U61",4),("U62",4),("U63",4),("U64",2),("U71",2),("U72",2),("U81",3),("U82",3),("afterNth",2),("cons",2),("fst",1),("head",1),("natsFrom",1),("nil",0),("pair",2),("s",1),("sel",2),("snd",1),("splitAt",2),("tail",1),("take",2),("tt",0)], trsVariables = fromList ["N","X","XS","Y","YS","ZS"], trsRMap = [], trsRules = [U11(tt,N,XS) -> U12(tt,N,XS),U12(tt,N,XS) -> snd(splitAt(N,XS)),U21(tt,X) -> U22(tt,X),U22(tt,X) -> X,U31(tt,N) -> U32(tt,N),U32(tt,N) -> N,U41(tt,N,XS) -> U42(tt,N,XS),U42(tt,N,XS) -> head(afterNth(N,XS)),U51(tt,Y) -> U52(tt,Y),U52(tt,Y) -> Y,U61(tt,N,X,XS) -> U62(tt,N,X,XS),U62(tt,N,X,XS) -> U63(tt,N,X,XS),U63(tt,N,X,XS) -> U64(splitAt(N,XS),X),U64(pair(YS,ZS),X) -> pair(cons(X,YS),ZS),U71(tt,XS) -> U72(tt,XS),U72(tt,XS) -> XS,U81(tt,N,XS) -> U82(tt,N,XS),U82(tt,N,XS) -> fst(splitAt(N,XS)),afterNth(N,XS) -> U11(tt,N,XS),fst(pair(X,Y)) -> U21(tt,X),head(cons(N,XS)) -> U31(tt,N),natsFrom(N) -> cons(N,natsFrom(s(N))),sel(N,XS) -> U41(tt,N,XS),snd(pair(X,Y)) -> U51(tt,Y),splitAt(0,XS) -> pair(nil,XS),splitAt(s(N),cons(X,XS)) -> U61(tt,N,X,XS),tail(cons(N,XS)) -> U71(tt,XS),take(N,XS) -> U81(tt,N,XS)], trsType = TRSStandard, trsStrategy = Just FULL, signatureBlock = True}

++ File:".\\tests\\TRS_Contextsensitive\\Maude_06\\LISTUTILITIES_nokinds.xml" :
TRS {trsSignature = fromList [("0",0),("U101",3),("U11",3),("U21",2),("U31",2),("U41",2),("U51",3),("U61",2),("U71",2),("U81",4),("U82",2),("U91",2),("afterNth",2),("and",2),("cons",2),("fst",1),("head",1),("isLNat",1),("isNatural",1),("isPLNat",1),("natsFrom",1),("nil",0),("pair",2),("s",1),("sel",2),("snd",1),("splitAt",2),("tail",1),("take",2),("tt",0)], trsVariables = fromList ["N","V1","V2","X","XS","Y","YS","ZS"], trsRMap = [], trsRules = [U101(tt,N,XS) -> fst(splitAt(N,XS)),U11(tt,N,XS) -> snd(splitAt(N,XS)),U21(tt,X) -> X,U31(tt,N) -> N,U41(tt,N) -> cons(N,natsFrom(s(N))),U51(tt,N,XS) -> head(afterNth(N,XS)),U61(tt,Y) -> Y,U71(tt,XS) -> pair(nil,XS),U81(tt,N,X,XS) -> U82(splitAt(N,XS),X),U82(pair(YS,ZS),X) -> pair(cons(X,YS),ZS),U91(tt,XS) -> XS,afterNth(N,XS) -> U11(and(isNatural(N),isLNat(XS)),N,XS),and(tt,X) -> X,fst(pair(X,Y)) -> U21(and(isLNat(X),isLNat(Y)),X),head(cons(N,XS)) -> U31(and(isNatural(N),isLNat(XS)),N),isLNat(nil) -> tt,isLNat(afterNth(V1,V2)) -> and(isNatural(V1),isLNat(V2)),isLNat(cons(V1,V2)) -> and(isNatural(V1),isLNat(V2)),isLNat(fst(V1)) -> isPLNat(V1),isLNat(natsFrom(V1)) -> isNatural(V1),isLNat(snd(V1)) -> isPLNat(V1),isLNat(tail(V1)) -> isLNat(V1),isLNat(take(V1,V2)) -> and(isNatural(V1),isLNat(V2)),isNatural(0) -> tt,isNatural(head(V1)) -> isLNat(V1),isNatural(s(V1)) -> isNatural(V1),isNatural(sel(V1,V2)) -> and(isNatural(V1),isLNat(V2)),isPLNat(pair(V1,V2)) -> and(isLNat(V1),isLNat(V2)),isPLNat(splitAt(V1,V2)) -> and(isNatural(V1),isLNat(V2)),natsFrom(N) -> U41(isNatural(N),N),sel(N,XS) -> U51(and(isNatural(N),isLNat(XS)),N,XS),snd(pair(X,Y)) -> U61(and(isLNat(X),isLNat(Y)),Y),splitAt(0,XS) -> U71(isLNat(XS),XS),splitAt(s(N),cons(X,XS)) -> U81(and(isNatural(N),and(isNatural(X),isLNat(XS))),N,X,XS),tail(cons(N,XS)) -> U91(and(isNatural(N),isLNat(XS)),XS),take(N,XS) -> U101(and(isNatural(N),isLNat(XS)),N,XS)], trsType = TRSStandard, trsStrategy = Just FULL, signatureBlock = True}

++ File:".\\tests\\TRS_Contextsensitive\\Maude_06\\LISTUTILITIES_nokinds-noand.xml" :
TRS {trsSignature = fromList [("0",0),("U101",2),("U102",1),("U11",3),("U111",1),("U12",3),("U121",1),("U131",2),("U132",1),("U141",2),("U142",1),("U151",2),("U152",1),("U161",2),("U171",3),("U172",3),("U181",2),("U182",2),("U191",2),("U201",4),("U202",4),("U203",4),("U204",2),("U21",3),("U211",2),("U212",2),("U22",2),("U221",3),("U222",3),("U31",3),("U32",2),("U41",2),("U42",1),("U51",2),("U52",1),("U61",1),("U71",1),("U81",1),("U91",1),("afterNth",2),("cons",2),("fst",1),("head",1),("isLNat",1),("isNatural",1),("isPLNat",1),("natsFrom",1),("nil",0),("pair",2),("s",1),("sel",2),("snd",1),("splitAt",2),("tail",1),("take",2),("tt",0)], trsVariables = fromList ["N","V1","V2","X","XS","Y","YS","ZS"], trsRMap = [], trsRules = [U101(tt,V2) -> U102(isLNat(V2)),U102(tt) -> tt,U11(tt,N,XS) -> U12(isLNat(XS),N,XS),U111(tt) -> tt,U12(tt,N,XS) -> snd(splitAt(N,XS)),U121(tt) -> tt,U131(tt,V2) -> U132(isLNat(V2)),U132(tt) -> tt,U141(tt,V2) -> U142(isLNat(V2)),U142(tt) -> tt,U151(tt,V2) -> U152(isLNat(V2)),U152(tt) -> tt,U161(tt,N) -> cons(N,natsFrom(s(N))),U171(tt,N,XS) -> U172(isLNat(XS),N,XS),U172(tt,N,XS) -> head(afterNth(N,XS)),U181(tt,Y) -> U182(isLNat(Y),Y),U182(tt,Y) -> Y,U191(tt,XS) -> pair(nil,XS),U201(tt,N,X,XS) -> U202(isNatural(X),N,X,XS),U202(tt,N,X,XS) -> U203(isLNat(XS),N,X,XS),U203(tt,N,X,XS) -> U204(splitAt(N,XS),X),U204(pair(YS,ZS),X) -> pair(cons(X,YS),ZS),U21(tt,X,Y) -> U22(isLNat(Y),X),U211(tt,XS) -> U212(isLNat(XS),XS),U212(tt,XS) -> XS,U22(tt,X) -> X,U221(tt,N,XS) -> U222(isLNat(XS),N,XS),U222(tt,N,XS) -> fst(splitAt(N,XS)),U31(tt,N,XS) -> U32(isLNat(XS),N),U32(tt,N) -> N,U41(tt,V2) -> U42(isLNat(V2)),U42(tt) -> tt,U51(tt,V2) -> U52(isLNat(V2)),U52(tt) -> tt,U61(tt) -> tt,U71(tt) -> tt,U81(tt) -> tt,U91(tt) -> tt,afterNth(N,XS) -> U11(isNatural(N),N,XS),fst(pair(X,Y)) -> U21(isLNat(X),X,Y),head(cons(N,XS)) -> U31(isNatural(N),N,XS),isLNat(nil) -> tt,isLNat(afterNth(V1,V2)) -> U41(isNatural(V1),V2),isLNat(cons(V1,V2)) -> U51(isNatural(V1),V2),isLNat(fst(V1)) -> U61(isPLNat(V1)),isLNat(natsFrom(V1)) -> U71(isNatural(V1)),isLNat(snd(V1)) -> U81(isPLNat(V1)),isLNat(tail(V1)) -> U91(isLNat(V1)),isLNat(take(V1,V2)) -> U101(isNatural(V1),V2),isNatural(0) -> tt,isNatural(head(V1)) -> U111(isLNat(V1)),isNatural(s(V1)) -> U121(isNatural(V1)),isNatural(sel(V1,V2)) -> U131(isNatural(V1),V2),isPLNat(pair(V1,V2)) -> U141(isLNat(V1),V2),isPLNat(splitAt(V1,V2)) -> U151(isNatural(V1),V2),natsFrom(N) -> U161(isNatural(N),N),sel(N,XS) -> U171(isNatural(N),N,XS),snd(pair(X,Y)) -> U181(isLNat(X),Y),splitAt(0,XS) -> U191(isLNat(XS),XS),splitAt(s(N),cons(X,XS)) -> U201(isNatural(N),N,X,XS),tail(cons(N,XS)) -> U211(isNatural(N),XS),take(N,XS) -> U221(isNatural(N),N,XS)], trsType = TRSStandard, trsStrategy = Just FULL, signatureBlock = True}

++ File:".\\tests\\TRS_Contextsensitive\\Maude_06\\LISTUTILITIES_complete.xml" :
TRS {trsSignature = fromList [("0",0),("U101",3),("U102",2),("U103",1),("U11",3),("U111",2),("U112",1),("U121",2),("U122",1),("U131",3),("U132",2),("U133",1),("U141",3),("U142",2),("U143",1),("U151",3),("U152",2),("U153",1),("U161",2),("U171",3),("U181",2),("U191",2),("U201",4),("U202",2),("U21",2),("U211",2),("U221",3),("U31",2),("U41",3),("U42",2),("U43",1),("U51",3),("U52",2),("U53",1),("U61",2),("U62",1),("U71",2),("U72",1),("U81",2),("U82",1),("U91",2),("U92",1),("afterNth",2),("and",2),("cons",2),("fst",1),("head",1),("isLNat",1),("isLNatKind",1),("isNatural",1),("isNaturalKind",1),("isPLNat",1),("isPLNatKind",1),("natsFrom",1),("nil",0),("pair",2),("s",1),("sel",2),("snd",1),("splitAt",2),("tail",1),("take",2),("tt",0)], trsVariables = fromList ["N","V1","V2","X","XS","Y","YS","ZS"], trsRMap = [], trsRules = [U101(tt,V1,V2) -> U102(isNatural(V1),V2),U102(tt,V2) -> U103(isLNat(V2)),U103(tt) -> tt,U11(tt,N,XS) -> snd(splitAt(N,XS)),U111(tt,V1) -> U112(isLNat(V1)),U112(tt) -> tt,U121(tt,V1) -> U122(isNatural(V1)),U122(tt) -> tt,U131(tt,V1,V2) -> U132(isNatural(V1),V2),U132(tt,V2) -> U133(isLNat(V2)),U133(tt) -> tt,U141(tt,V1,V2) -> U142(isLNat(V1),V2),U142(tt,V2) -> U143(isLNat(V2)),U143(tt) -> tt,U151(tt,V1,V2) -> U152(isNatural(V1),V2),U152(tt,V2) -> U153(isLNat(V2)),U153(tt) -> tt,U161(tt,N) -> cons(N,natsFrom(s(N))),U171(tt,N,XS) -> head(afterNth(N,XS)),U181(tt,Y) -> Y,U191(tt,XS) -> pair(nil,XS),U201(tt,N,X,XS) -> U202(splitAt(N,XS),X),U202(pair(YS,ZS),X) -> pair(cons(X,YS),ZS),U21(tt,X) -> X,U211(tt,XS) -> XS,U221(tt,N,XS) -> fst(splitAt(N,XS)),U31(tt,N) -> N,U41(tt,V1,V2) -> U42(isNatural(V1),V2),U42(tt,V2) -> U43(isLNat(V2)),U43(tt) -> tt,U51(tt,V1,V2) -> U52(isNatural(V1),V2),U52(tt,V2) -> U53(isLNat(V2)),U53(tt) -> tt,U61(tt,V1) -> U62(isPLNat(V1)),U62(tt) -> tt,U71(tt,V1) -> U72(isNatural(V1)),U72(tt) -> tt,U81(tt,V1) -> U82(isPLNat(V1)),U82(tt) -> tt,U91(tt,V1) -> U92(isLNat(V1)),U92(tt) -> tt,afterNth(N,XS) -> U11(and(and(isNatural(N),isNaturalKind(N)),and(isLNat(XS),isLNatKind(XS))),N,XS),and(tt,X) -> X,fst(pair(X,Y)) -> U21(and(and(isLNat(X),isLNatKind(X)),and(isLNat(Y),isLNatKind(Y))),X),head(cons(N,XS)) -> U31(and(and(isNatural(N),isNaturalKind(N)),and(isLNat(XS),isLNatKind(XS))),N),isLNat(nil) -> tt,isLNat(afterNth(V1,V2)) -> U41(and(isNaturalKind(V1),isLNatKind(V2)),V1,V2),isLNat(cons(V1,V2)) -> U51(and(isNaturalKind(V1),isLNatKind(V2)),V1,V2),isLNat(fst(V1)) -> U61(isPLNatKind(V1),V1),isLNat(natsFrom(V1)) -> U71(isNaturalKind(V1),V1),isLNat(snd(V1)) -> U81(isPLNatKind(V1),V1),isLNat(tail(V1)) -> U91(isLNatKind(V1),V1),isLNat(take(V1,V2)) -> U101(and(isNaturalKind(V1),isLNatKind(V2)),V1,V2),isLNatKind(nil) -> tt,isLNatKind(afterNth(V1,V2)) -> and(isNaturalKind(V1),isLNatKind(V2)),isLNatKind(cons(V1,V2)) -> and(isNaturalKind(V1),isLNatKind(V2)),isLNatKind(fst(V1)) -> isPLNatKind(V1),isLNatKind(natsFrom(V1)) -> isNaturalKind(V1),isLNatKind(snd(V1)) -> isPLNatKind(V1),isLNatKind(tail(V1)) -> isLNatKind(V1),isLNatKind(take(V1,V2)) -> and(isNaturalKind(V1),isLNatKind(V2)),isNatural(0) -> tt,isNatural(head(V1)) -> U111(isLNatKind(V1),V1),isNatural(s(V1)) -> U121(isNaturalKind(V1),V1),isNatural(sel(V1,V2)) -> U131(and(isNaturalKind(V1),isLNatKind(V2)),V1,V2),isNaturalKind(0) -> tt,isNaturalKind(head(V1)) -> isLNatKind(V1),isNaturalKind(s(V1)) -> isNaturalKind(V1),isNaturalKind(sel(V1,V2)) -> and(isNaturalKind(V1),isLNatKind(V2)),isPLNat(pair(V1,V2)) -> U141(and(isLNatKind(V1),isLNatKind(V2)),V1,V2),isPLNat(splitAt(V1,V2)) -> U151(and(isNaturalKind(V1),isLNatKind(V2)),V1,V2),isPLNatKind(pair(V1,V2)) -> and(isLNatKind(V1),isLNatKind(V2)),isPLNatKind(splitAt(V1,V2)) -> and(isNaturalKind(V1),isLNatKind(V2)),natsFrom(N) -> U161(and(isNatural(N),isNaturalKind(N)),N),sel(N,XS) -> U171(and(and(isNatural(N),isNaturalKind(N)),and(isLNat(XS),isLNatKind(XS))),N,XS),snd(pair(X,Y)) -> U181(and(and(isLNat(X),isLNatKind(X)),and(isLNat(Y),isLNatKind(Y))),Y),splitAt(0,XS) -> U191(and(isLNat(XS),isLNatKind(XS)),XS),splitAt(s(N),cons(X,XS)) -> U201(and(and(isNatural(N),isNaturalKind(N)),and(and(isNatural(X),isNaturalKind(X)),and(isLNat(XS),isLNatKind(XS)))),N,X,XS),tail(cons(N,XS)) -> U211(and(and(isNatural(N),isNaturalKind(N)),and(isLNat(XS),isLNatKind(XS))),XS),take(N,XS) -> U221(and(and(isNatural(N),isNaturalKind(N)),and(isLNat(XS),isLNatKind(XS))),N,XS)], trsType = TRSStandard, trsStrategy = Just FULL, signatureBlock = True}

++ File:".\\tests\\TRS_Contextsensitive\\Maude_06\\LISTUTILITIES_complete-noand.xml" :
TRS {trsSignature = fromList [("0",0),("U101",3),("U102",3),("U103",3),("U104",3),("U105",2),("U106",1),("U11",3),("U111",2),("U112",1),("U12",3),("U121",2),("U122",1),("U13",3),("U131",1),("U14",3),("U141",1),("U151",1),("U161",1),("U171",2),("U172",1),("U181",2),("U182",2),("U183",1),("U191",2),("U192",2),("U193",1),("U201",3),("U202",3),("U203",3),("U204",3),("U205",2),("U206",1),("U21",3),("U211",1),("U22",3),("U221",1),("U23",3),("U231",2),("U232",1),("U24",2),("U241",3),("U242",3),("U243",3),("U244",3),("U245",2),("U246",1),("U251",3),("U252",3),("U253",3),("U254",3),("U255",2),("U256",1),("U261",2),("U262",1),("U271",2),("U272",1),("U281",2),("U282",2),("U291",3),("U292",3),("U293",3),("U294",3),("U301",3),("U302",2),("U303",2),("U304",2),("U31",3),("U311",2),("U312",2),("U32",3),("U321",4),("U322",4),("U323",4),("U324",4),("U325",4),("U326",4),("U327",2),("U33",3),("U331",3),("U332",2),("U333",2),("U334",2),("U34",2),("U341",3),("U342",3),("U343",3),("U344",3),("U41",3),("U42",3),("U43",3),("U44",3),("U45",2),("U46",1),("U51",3),("U52",3),("U53",3),("U54",3),("U55",2),("U56",1),("U61",2),("U62",2),("U63",1),("U71",2),("U72",2),("U73",1),("U81",2),("U82",2),("U83",1),("U91",2),("U92",2),("U93",1),("afterNth",2),("cons",2),("fst",1),("head",1),("isLNat",1),("isLNatKind",1),("isNatural",1),("isNaturalKind",1),("isPLNat",1),("isPLNatKind",1),("natsFrom",1),("nil",0),("pair",2),("s",1),("sel",2),("snd",1),("splitAt",2),("tail",1),("take",2),("tt",0)], trsVariables = fromList ["N","V1","V2","X","XS","Y","YS","ZS"], trsRMap = [], trsRules = [U101(tt,V1,V2) -> U102(isNaturalKind(V1),V1,V2),U102(tt,V1,V2) -> U103(isLNatKind(V2),V1,V2),U103(tt,V1,V2) -> U104(isLNatKind(V2),V1,V2),U104(tt,V1,V2) -> U105(isNatural(V1),V2),U105(tt,V2) -> U106(isLNat(V2)),U106(tt) -> tt,U11(tt,N,XS) -> U12(isNaturalKind(N),N,XS),U111(tt,V2) -> U112(isLNatKind(V2)),U112(tt) -> tt,U12(tt,N,XS) -> U13(isLNat(XS),N,XS),U121(tt,V2) -> U122(isLNatKind(V2)),U122(tt) -> tt,U13(tt,N,XS) -> U14(isLNatKind(XS),N,XS),U131(tt) -> tt,U14(tt,N,XS) -> snd(splitAt(N,XS)),U141(tt) -> tt,U151(tt) -> tt,U161(tt) -> tt,U171(tt,V2) -> U172(isLNatKind(V2)),U172(tt) -> tt,U181(tt,V1) -> U182(isLNatKind(V1),V1),U182(tt,V1) -> U183(isLNat(V1)),U183(tt) -> tt,U191(tt,V1) -> U192(isNaturalKind(V1),V1),U192(tt,V1) -> U193(isNatural(V1)),U193(tt) -> tt,U201(tt,V1,V2) -> U202(isNaturalKind(V1),V1,V2),U202(tt,V1,V2) -> U203(isLNatKind(V2),V1,V2),U203(tt,V1,V2) -> U204(isLNatKind(V2),V1,V2),U204(tt,V1,V2) -> U205(isNatural(V1),V2),U205(tt,V2) -> U206(isLNat(V2)),U206(tt) -> tt,U21(tt,X,Y) -> U22(isLNatKind(X),X,Y),U211(tt) -> tt,U22(tt,X,Y) -> U23(isLNat(Y),X,Y),U221(tt) -> tt,U23(tt,X,Y) -> U24(isLNatKind(Y),X),U231(tt,V2) -> U232(isLNatKind(V2)),U232(tt) -> tt,U24(tt,X) -> X,U241(tt,V1,V2) -> U242(isLNatKind(V1),V1,V2),U242(tt,V1,V2) -> U243(isLNatKind(V2),V1,V2),U243(tt,V1,V2) -> U244(isLNatKind(V2),V1,V2),U244(tt,V1,V2) -> U245(isLNat(V1),V2),U245(tt,V2) -> U246(isLNat(V2)),U246(tt) -> tt,U251(tt,V1,V2) -> U252(isNaturalKind(V1),V1,V2),U252(tt,V1,V2) -> U253(isLNatKind(V2),V1,V2),U253(tt,V1,V2) -> U254(isLNatKind(V2),V1,V2),U254(tt,V1,V2) -> U255(isNatural(V1),V2),U255(tt,V2) -> U256(isLNat(V2)),U256(tt) -> tt,U261(tt,V2) -> U262(isLNatKind(V2)),U262(tt) -> tt,U271(tt,V2) -> U272(isLNatKind(V2)),U272(tt) -> tt,U281(tt,N) -> U282(isNaturalKind(N),N),U282(tt,N) -> cons(N,natsFrom(s(N))),U291(tt,N,XS) -> U292(isNaturalKind(N),N,XS),U292(tt,N,XS) -> U293(isLNat(XS),N,XS),U293(tt,N,XS) -> U294(isLNatKind(XS),N,XS),U294(tt,N,XS) -> head(afterNth(N,XS)),U301(tt,X,Y) -> U302(isLNatKind(X),Y),U302(tt,Y) -> U303(isLNat(Y),Y),U303(tt,Y) -> U304(isLNatKind(Y),Y),U304(tt,Y) -> Y,U31(tt,N,XS) -> U32(isNaturalKind(N),N,XS),U311(tt,XS) -> U312(isLNatKind(XS),XS),U312(tt,XS) -> pair(nil,XS),U32(tt,N,XS) -> U33(isLNat(XS),N,XS),U321(tt,N,X,XS) -> U322(isNaturalKind(N),N,X,XS),U322(tt,N,X,XS) -> U323(isNatural(X),N,X,XS),U323(tt,N,X,XS) -> U324(isNaturalKind(X),N,X,XS),U324(tt,N,X,XS) -> U325(isLNat(XS),N,X,XS),U325(tt,N,X,XS) -> U326(isLNatKind(XS),N,X,XS),U326(tt,N,X,XS) -> U327(splitAt(N,XS),X),U327(pair(YS,ZS),X) -> pair(cons(X,YS),ZS),U33(tt,N,XS) -> U34(isLNatKind(XS),N),U331(tt,N,XS) -> U332(isNaturalKind(N),XS),U332(tt,XS) -> U333(isLNat(XS),XS),U333(tt,XS) -> U334(isLNatKind(XS),XS),U334(tt,XS) -> XS,U34(tt,N) -> N,U341(tt,N,XS) -> U342(isNaturalKind(N),N,XS),U342(tt,N,XS) -> U343(isLNat(XS),N,XS),U343(tt,N,XS) -> U344(isLNatKind(XS),N,XS),U344(tt,N,XS) -> fst(splitAt(N,XS)),U41(tt,V1,V2) -> U42(isNaturalKind(V1),V1,V2),U42(tt,V1,V2) -> U43(isLNatKind(V2),V1,V2),U43(tt,V1,V2) -> U44(isLNatKind(V2),V1,V2),U44(tt,V1,V2) -> U45(isNatural(V1),V2),U45(tt,V2) -> U46(isLNat(V2)),U46(tt) -> tt,U51(tt,V1,V2) -> U52(isNaturalKind(V1),V1,V2),U52(tt,V1,V2) -> U53(isLNatKind(V2),V1,V2),U53(tt,V1,V2) -> U54(isLNatKind(V2),V1,V2),U54(tt,V1,V2) -> U55(isNatural(V1),V2),U55(tt,V2) -> U56(isLNat(V2)),U56(tt) -> tt,U61(tt,V1) -> U62(isPLNatKind(V1),V1),U62(tt,V1) -> U63(isPLNat(V1)),U63(tt) -> tt,U71(tt,V1) -> U72(isNaturalKind(V1),V1),U72(tt,V1) -> U73(isNatural(V1)),U73(tt) -> tt,U81(tt,V1) -> U82(isPLNatKind(V1),V1),U82(tt,V1) -> U83(isPLNat(V1)),U83(tt) -> tt,U91(tt,V1) -> U92(isLNatKind(V1),V1),U92(tt,V1) -> U93(isLNat(V1)),U93(tt) -> tt,afterNth(N,XS) -> U11(isNatural(N),N,XS),fst(pair(X,Y)) -> U21(isLNat(X),X,Y),head(cons(N,XS)) -> U31(isNatural(N),N,XS),isLNat(nil) -> tt,isLNat(afterNth(V1,V2)) -> U41(isNaturalKind(V1),V1,V2),isLNat(cons(V1,V2)) -> U51(isNaturalKind(V1),V1,V2),isLNat(fst(V1)) -> U61(isPLNatKind(V1),V1),isLNat(natsFrom(V1)) -> U71(isNaturalKind(V1),V1),isLNat(snd(V1)) -> U81(isPLNatKind(V1),V1),isLNat(tail(V1)) -> U91(isLNatKind(V1),V1),isLNat(take(V1,V2)) -> U101(isNaturalKind(V1),V1,V2),isLNatKind(nil) -> tt,isLNatKind(afterNth(V1,V2)) -> U111(isNaturalKind(V1),V2),isLNatKind(cons(V1,V2)) -> U121(isNaturalKind(V1),V2),isLNatKind(fst(V1)) -> U131(isPLNatKind(V1)),isLNatKind(natsFrom(V1)) -> U141(isNaturalKind(V1)),isLNatKind(snd(V1)) -> U151(isPLNatKind(V1)),isLNatKind(tail(V1)) -> U161(isLNatKind(V1)),isLNatKind(take(V1,V2)) -> U171(isNaturalKind(V1),V2),isNatural(0) -> tt,isNatural(head(V1)) -> U181(isLNatKind(V1),V1),isNatural(s(V1)) -> U191(isNaturalKind(V1),V1),isNatural(sel(V1,V2)) -> U201(isNaturalKind(V1),V1,V2),isNaturalKind(0) -> tt,isNaturalKind(head(V1)) -> U211(isLNatKind(V1)),isNaturalKind(s(V1)) -> U221(isNaturalKind(V1)),isNaturalKind(sel(V1,V2)) -> U231(isNaturalKind(V1),V2),isPLNat(pair(V1,V2)) -> U241(isLNatKind(V1),V1,V2),isPLNat(splitAt(V1,V2)) -> U251(isNaturalKind(V1),V1,V2),isPLNatKind(pair(V1,V2)) -> U261(isLNatKind(V1),V2),isPLNatKind(splitAt(V1,V2)) -> U271(isNaturalKind(V1),V2),natsFrom(N) -> U281(isNatural(N),N),sel(N,XS) -> U291(isNatural(N),N,XS),snd(pair(X,Y)) -> U301(isLNat(X),X,Y),splitAt(0,XS) -> U311(isLNat(XS),XS),splitAt(s(N),cons(X,XS)) -> U321(isNatural(N),N,X,XS),tail(cons(N,XS)) -> U331(isNatural(N),N,XS),take(N,XS) -> U341(isNatural(N),N,XS)], trsType = TRSStandard, trsStrategy = Just FULL, signatureBlock = True}

++ File:".\\tests\\TRS_Contextsensitive\\Maude_06\\LengthOfFiniteLists_nosorts.xml" :
TRS {trsSignature = fromList [("0",0),("and",2),("cons",2),("length",1),("nil",0),("s",1),("tt",0),("zeros",0)], trsVariables = fromList ["L","N","X"], trsRMap = [], trsRules = [zeros -> cons(0,zeros),and(tt,X) -> X,length(nil) -> 0,length(cons(N,L)) -> s(length(L))], trsType = TRSStandard, trsStrategy = Just FULL, signatureBlock = True}

++ File:".\\tests\\TRS_Contextsensitive\\Maude_06\\LengthOfFiniteLists_nosorts-noand.xml" :
TRS {trsSignature = fromList [("0",0),("U11",2),("U12",2),("cons",2),("length",1),("nil",0),("s",1),("tt",0),("zeros",0)], trsVariables = fromList ["L","N"], trsRMap = [], trsRules = [zeros -> cons(0,zeros),U11(tt,L) -> U12(tt,L),U12(tt,L) -> s(length(L)),length(nil) -> 0,length(cons(N,L)) -> U11(tt,L)], trsType = TRSStandard, trsStrategy = Just FULL, signatureBlock = True}

++ File:".\\tests\\TRS_Contextsensitive\\Maude_06\\LengthOfFiniteLists_nokinds.xml" :
TRS {trsSignature = fromList [("0",0),("U11",2),("and",2),("cons",2),("isNat",1),("isNatIList",1),("isNatList",1),("length",1),("nil",0),("s",1),("tt",0),("zeros",0)], trsVariables = fromList ["L","N","V","V1","V2","X"], trsRMap = [], trsRules = [zeros -> cons(0,zeros),U11(tt,L) -> s(length(L)),and(tt,X) -> X,isNat(0) -> tt,isNat(length(V1)) -> isNatList(V1),isNat(s(V1)) -> isNat(V1),isNatIList(V) -> isNatList(V),isNatIList(zeros) -> tt,isNatIList(cons(V1,V2)) -> and(isNat(V1),isNatIList(V2)),isNatList(nil) -> tt,isNatList(cons(V1,V2)) -> and(isNat(V1),isNatList(V2)),length(nil) -> 0,length(cons(N,L)) -> U11(and(isNatList(L),isNat(N)),L)], trsType = TRSStandard, trsStrategy = Just FULL, signatureBlock = True}

++ File:".\\tests\\TRS_Contextsensitive\\Maude_06\\LengthOfFiniteLists_nokinds-noand.xml" :
TRS {trsSignature = fromList [("0",0),("U11",1),("U21",1),("U31",1),("U41",2),("U42",1),("U51",2),("U52",1),("U61",3),("U62",2),("cons",2),("isNat",1),("isNatIList",1),("isNatList",1),("length",1),("nil",0),("s",1),("tt",0),("zeros",0)], trsVariables = fromList ["L","N","V","V1","V2"], trsRMap = [], trsRules = [zeros -> cons(0,zeros),U11(tt) -> tt,U21(tt) -> tt,U31(tt) -> tt,U41(tt,V2) -> U42(isNatIList(V2)),U42(tt) -> tt,U51(tt,V2) -> U52(isNatList(V2)),U52(tt) -> tt,U61(tt,L,N) -> U62(isNat(N),L),U62(tt,L) -> s(length(L)),isNat(0) -> tt,isNat(length(V1)) -> U11(isNatList(V1)),isNat(s(V1)) -> U21(isNat(V1)),isNatIList(V) -> U31(isNatList(V)),isNatIList(zeros) -> tt,isNatIList(cons(V1,V2)) -> U41(isNat(V1),V2),isNatList(nil) -> tt,isNatList(cons(V1,V2)) -> U51(isNat(V1),V2),length(nil) -> 0,length(cons(N,L)) -> U61(isNatList(L),L,N)], trsType = TRSStandard, trsStrategy = Just FULL, signatureBlock = True}

++ File:".\\tests\\TRS_Contextsensitive\\Maude_06\\LengthOfFiniteLists_complete.xml" :
TRS {trsSignature = fromList [("0",0),("U11",2),("U12",1),("U21",2),("U22",1),("U31",2),("U32",1),("U41",3),("U42",2),("U43",1),("U51",3),("U52",2),("U53",1),("U61",2),("and",2),("cons",2),("isNat",1),("isNatIList",1),("isNatIListKind",1),("isNatKind",1),("isNatList",1),("length",1),("nil",0),("s",1),("tt",0),("zeros",0)], trsVariables = fromList ["L","N","V","V1","V2","X"], trsRMap = [], trsRules = [zeros -> cons(0,zeros),U11(tt,V1) -> U12(isNatList(V1)),U12(tt) -> tt,U21(tt,V1) -> U22(isNat(V1)),U22(tt) -> tt,U31(tt,V) -> U32(isNatList(V)),U32(tt) -> tt,U41(tt,V1,V2) -> U42(isNat(V1),V2),U42(tt,V2) -> U43(isNatIList(V2)),U43(tt) -> tt,U51(tt,V1,V2) -> U52(isNat(V1),V2),U52(tt,V2) -> U53(isNatList(V2)),U53(tt) -> tt,U61(tt,L) -> s(length(L)),and(tt,X) -> X,isNat(0) -> tt,isNat(length(V1)) -> U11(isNatIListKind(V1),V1),isNat(s(V1)) -> U21(isNatKind(V1),V1),isNatIList(V) -> U31(isNatIListKind(V),V),isNatIList(zeros) -> tt,isNatIList(cons(V1,V2)) -> U41(and(isNatKind(V1),isNatIListKind(V2)),V1,V2),isNatIListKind(nil) -> tt,isNatIListKind(zeros) -> tt,isNatIListKind(cons(V1,V2)) -> and(isNatKind(V1),isNatIListKind(V2)),isNatKind(0) -> tt,isNatKind(length(V1)) -> isNatIListKind(V1),isNatKind(s(V1)) -> isNatKind(V1),isNatList(nil) -> tt,isNatList(cons(V1,V2)) -> U51(and(isNatKind(V1),isNatIListKind(V2)),V1,V2),length(nil) -> 0,length(cons(N,L)) -> U61(and(and(isNatList(L),isNatIListKind(L)),and(isNat(N),isNatKind(N))),L)], trsType = TRSStandard, trsStrategy = Just FULL, signatureBlock = True}

++ File:".\\tests\\TRS_Contextsensitive\\Maude_06\\LengthOfFiniteLists_complete-noand.xml" :
TRS {trsSignature = fromList [("0",0),("U11",2),("U12",2),("U13",1),("U21",2),("U22",2),("U23",1),("U31",2),("U32",2),("U33",1),("U41",3),("U42",3),("U43",3),("U44",3),("U45",2),("U46",1),("U51",2),("U52",1),("U61",1),("U71",1),("U81",3),("U82",3),("U83",3),("U84",3),("U85",2),("U86",1),("U91",3),("U92",3),("U93",3),("U94",2),("cons",2),("isNat",1),("isNatIList",1),("isNatIListKind",1),("isNatKind",1),("isNatList",1),("length",1),("nil",0),("s",1),("tt",0),("zeros",0)], trsVariables = fromList ["L","N","V","V1","V2"], trsRMap = [], trsRules = [zeros -> cons(0,zeros),U11(tt,V1) -> U12(isNatIListKind(V1),V1),U12(tt,V1) -> U13(isNatList(V1)),U13(tt) -> tt,U21(tt,V1) -> U22(isNatKind(V1),V1),U22(tt,V1) -> U23(isNat(V1)),U23(tt) -> tt,U31(tt,V) -> U32(isNatIListKind(V),V),U32(tt,V) -> U33(isNatList(V)),U33(tt) -> tt,U41(tt,V1,V2) -> U42(isNatKind(V1),V1,V2),U42(tt,V1,V2) -> U43(isNatIListKind(V2),V1,V2),U43(tt,V1,V2) -> U44(isNatIListKind(V2),V1,V2),U44(tt,V1,V2) -> U45(isNat(V1),V2),U45(tt,V2) -> U46(isNatIList(V2)),U46(tt) -> tt,U51(tt,V2) -> U52(isNatIListKind(V2)),U52(tt) -> tt,U61(tt) -> tt,U71(tt) -> tt,U81(tt,V1,V2) -> U82(isNatKind(V1),V1,V2),U82(tt,V1,V2) -> U83(isNatIListKind(V2),V1,V2),U83(tt,V1,V2) -> U84(isNatIListKind(V2),V1,V2),U84(tt,V1,V2) -> U85(isNat(V1),V2),U85(tt,V2) -> U86(isNatList(V2)),U86(tt) -> tt,U91(tt,L,N) -> U92(isNatIListKind(L),L,N),U92(tt,L,N) -> U93(isNat(N),L,N),U93(tt,L,N) -> U94(isNatKind(N),L),U94(tt,L) -> s(length(L)),isNat(0) -> tt,isNat(length(V1)) -> U11(isNatIListKind(V1),V1),isNat(s(V1)) -> U21(isNatKind(V1),V1),isNatIList(V) -> U31(isNatIListKind(V),V),isNatIList(zeros) -> tt,isNatIList(cons(V1,V2)) -> U41(isNatKind(V1),V1,V2),isNatIListKind(nil) -> tt,isNatIListKind(zeros) -> tt,isNatIListKind(cons(V1,V2)) -> U51(isNatKind(V1),V2),isNatKind(0) -> tt,isNatKind(length(V1)) -> U61(isNatIListKind(V1)),isNatKind(s(V1)) -> U71(isNatKind(V1)),isNatList(nil) -> tt,isNatList(cons(V1,V2)) -> U81(isNatKind(V1),V1,V2),length(nil) -> 0,length(cons(N,L)) -> U91(isNatList(L),L,N)], trsType = TRSStandard, trsStrategy = Just FULL, signatureBlock = True}

++ File:".\\tests\\TRS_Contextsensitive\\Maude_06\\emmes.xml" :
TRS {trsSignature = fromList [("0",0),("false",0),("if",3),("isZero",1),("p",1),("plus",2),("s",1),("true",0)], trsVariables = fromList ["x","y"], trsRMap = [], trsRules = [plus(x,y) -> if(isZero(x),y,s(plus(p(x),y))),isZero(0) -> true,isZero(s(x)) -> false,p(s(x)) -> x,if(true,x,y) -> x,if(false,x,y) -> y], trsType = TRSStandard, trsStrategy = Just FULL, signatureBlock = True}

++ File:".\\tests\\TRS_Contextsensitive\\Maude_06\\csrdiv.xml" :
TRS {trsSignature = fromList [("0",0),("div",2),("false",0),("gt",2),("if",3),("minus",2),("p",1),("s",1),("true",0)], trsVariables = fromList ["X","Y"], trsRMap = [], trsRules = [gt(0,Y) -> false,gt(s(X),0) -> true,gt(s(X),s(Y)) -> gt(X,Y),p(0) -> 0,p(s(X)) -> X,if(true,X,Y) -> X,if(false,X,Y) -> Y,minus(X,Y) -> if(gt(Y,0),minus(p(X),p(Y)),X),div(0,s(Y)) -> 0,div(s(X),s(Y)) -> s(div(minus(X,Y),s(Y)))], trsType = TRSStandard, trsStrategy = Just FULL, signatureBlock = True}
